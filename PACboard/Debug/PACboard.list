
PACboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006144  08006144  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800614c  0800614c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  20000010  08006164  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041bc  08006164  000241bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c06  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003523  00000000  00000000  00036c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230d2  00000000  00000000  0003c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b65  00000000  00000000  0005f7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d626c  00000000  00000000  00078327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005004  00000000  00000000  0014e5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080060b4 	.word	0x080060b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080060b4 	.word	0x080060b4

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9b9 	b.w	80005b4 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <UART_Init>:

uint8_t txBuffer[TXBUFFERSIZE];
uint8_t rxBuffer[RXBUFFERSIZE];

void UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
//CLOCK
__HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b6d      	ldr	r3, [pc, #436]	; (8000778 <UART_Init+0x1c0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a6c      	ldr	r2, [pc, #432]	; (8000778 <UART_Init+0x1c0>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b6a      	ldr	r3, [pc, #424]	; (8000778 <UART_Init+0x1c0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_USART6_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b66      	ldr	r3, [pc, #408]	; (8000778 <UART_Init+0x1c0>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	4a65      	ldr	r2, [pc, #404]	; (8000778 <UART_Init+0x1c0>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6453      	str	r3, [r2, #68]	; 0x44
 80005ea:	4b63      	ldr	r3, [pc, #396]	; (8000778 <UART_Init+0x1c0>)
 80005ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
__DMA2_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	4b5f      	ldr	r3, [pc, #380]	; (8000778 <UART_Init+0x1c0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a5e      	ldr	r2, [pc, #376]	; (8000778 <UART_Init+0x1c0>)
 8000600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b5c      	ldr	r3, [pc, #368]	; (8000778 <UART_Init+0x1c0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

//GPIO
GPIO_InitTypeDef UART_GPIO;

UART_GPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000612:	23c0      	movs	r3, #192	; 0xc0
 8000614:	60fb      	str	r3, [r7, #12]
UART_GPIO.Mode = GPIO_MODE_AF_PP;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
UART_GPIO.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
UART_GPIO.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
UART_GPIO.Alternate = GPIO_AF8_USART6;
 8000622:	2308      	movs	r3, #8
 8000624:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &UART_GPIO);
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	4619      	mov	r1, r3
 800062c:	4853      	ldr	r0, [pc, #332]	; (800077c <UART_Init+0x1c4>)
 800062e:	f001 fcb5 	bl	8001f9c <HAL_GPIO_Init>

//DMA
dma_tx.Instance                 = DMA2_Stream7;
 8000632:	4b53      	ldr	r3, [pc, #332]	; (8000780 <UART_Init+0x1c8>)
 8000634:	4a53      	ldr	r2, [pc, #332]	; (8000784 <UART_Init+0x1cc>)
 8000636:	601a      	str	r2, [r3, #0]
dma_tx.Init.Channel             = DMA_CHANNEL_5;
 8000638:	4b51      	ldr	r3, [pc, #324]	; (8000780 <UART_Init+0x1c8>)
 800063a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800063e:	605a      	str	r2, [r3, #4]
dma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000640:	4b4f      	ldr	r3, [pc, #316]	; (8000780 <UART_Init+0x1c8>)
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	609a      	str	r2, [r3, #8]
dma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000646:	4b4e      	ldr	r3, [pc, #312]	; (8000780 <UART_Init+0x1c8>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
dma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800064c:	4b4c      	ldr	r3, [pc, #304]	; (8000780 <UART_Init+0x1c8>)
 800064e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000652:	611a      	str	r2, [r3, #16]
dma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000654:	4b4a      	ldr	r3, [pc, #296]	; (8000780 <UART_Init+0x1c8>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
dma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800065a:	4b49      	ldr	r3, [pc, #292]	; (8000780 <UART_Init+0x1c8>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
dma_tx.Init.Mode                = DMA_NORMAL;
 8000660:	4b47      	ldr	r3, [pc, #284]	; (8000780 <UART_Init+0x1c8>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
dma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8000666:	4b46      	ldr	r3, [pc, #280]	; (8000780 <UART_Init+0x1c8>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
dma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800066c:	4b44      	ldr	r3, [pc, #272]	; (8000780 <UART_Init+0x1c8>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
dma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000672:	4b43      	ldr	r3, [pc, #268]	; (8000780 <UART_Init+0x1c8>)
 8000674:	2203      	movs	r2, #3
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
dma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8000678:	4b41      	ldr	r3, [pc, #260]	; (8000780 <UART_Init+0x1c8>)
 800067a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
dma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000680:	4b3f      	ldr	r3, [pc, #252]	; (8000780 <UART_Init+0x1c8>)
 8000682:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000686:	631a      	str	r2, [r3, #48]	; 0x30

HAL_DMA_Init(&dma_tx);
 8000688:	483d      	ldr	r0, [pc, #244]	; (8000780 <UART_Init+0x1c8>)
 800068a:	f001 f885 	bl	8001798 <HAL_DMA_Init>


dma_rx.Instance                 = DMA2_Stream1;
 800068e:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <UART_Init+0x1d0>)
 8000690:	4a3e      	ldr	r2, [pc, #248]	; (800078c <UART_Init+0x1d4>)
 8000692:	601a      	str	r2, [r3, #0]
dma_rx.Init.Channel             = DMA_CHANNEL_5;
 8000694:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <UART_Init+0x1d0>)
 8000696:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800069a:	605a      	str	r2, [r3, #4]
dma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800069c:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <UART_Init+0x1d0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
dma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80006a2:	4b39      	ldr	r3, [pc, #228]	; (8000788 <UART_Init+0x1d0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
dma_rx.Init.MemInc              = DMA_MINC_DISABLE;
 80006a8:	4b37      	ldr	r3, [pc, #220]	; (8000788 <UART_Init+0x1d0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
dma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <UART_Init+0x1d0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
dma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <UART_Init+0x1d0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
dma_rx.Init.Mode                = DMA_NORMAL;
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <UART_Init+0x1d0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
dma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <UART_Init+0x1d0>)
 80006c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006c6:	621a      	str	r2, [r3, #32]
dma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80006c8:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <UART_Init+0x1d0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
dma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <UART_Init+0x1d0>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
dma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 80006d4:	4b2c      	ldr	r3, [pc, #176]	; (8000788 <UART_Init+0x1d0>)
 80006d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
dma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80006dc:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <UART_Init+0x1d0>)
 80006de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30

HAL_DMA_Init(&dma_rx);
 80006e4:	4828      	ldr	r0, [pc, #160]	; (8000788 <UART_Init+0x1d0>)
 80006e6:	f001 f857 	bl	8001798 <HAL_DMA_Init>



//UART
uart6.Instance        = USART6;
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <UART_Init+0x1d8>)
 80006ec:	4a29      	ldr	r2, [pc, #164]	; (8000794 <UART_Init+0x1dc>)
 80006ee:	601a      	str	r2, [r3, #0]

uart6.Init.BaudRate   = 115200;
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <UART_Init+0x1d8>)
 80006f2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f6:	605a      	str	r2, [r3, #4]
uart6.Init.WordLength = UART_WORDLENGTH_8B;
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <UART_Init+0x1d8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
uart6.Init.StopBits   = UART_STOPBITS_1;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <UART_Init+0x1d8>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
uart6.Init.Parity     = UART_PARITY_NONE;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <UART_Init+0x1d8>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
uart6.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <UART_Init+0x1d8>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
uart6.Init.Mode       = UART_MODE_TX_RX;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <UART_Init+0x1d8>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
if(HAL_UART_Init(&uart6) != HAL_OK)
 8000716:	481e      	ldr	r0, [pc, #120]	; (8000790 <UART_Init+0x1d8>)
 8000718:	f003 fb7c 	bl	8003e14 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <UART_Init+0x170>
{
  errorMessage = 0x0002; //UART failure
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <UART_Init+0x1e0>)
 8000724:	2202      	movs	r2, #2
 8000726:	801a      	strh	r2, [r3, #0]
}


//Link DMA -> UART
__HAL_LINKDMA(&uart6, hdmatx, dma_tx);
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <UART_Init+0x1d8>)
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <UART_Init+0x1c8>)
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <UART_Init+0x1c8>)
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <UART_Init+0x1d8>)
 8000732:	639a      	str	r2, [r3, #56]	; 0x38
__HAL_LINKDMA(&uart6, hdmarx, dma_rx);
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <UART_Init+0x1d8>)
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <UART_Init+0x1d0>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <UART_Init+0x1d0>)
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <UART_Init+0x1d8>)
 800073e:	639a      	str	r2, [r3, #56]	; 0x38


HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	2100      	movs	r1, #0
 8000744:	2046      	movs	r0, #70	; 0x46
 8000746:	f000 fffd 	bl	8001744 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800074a:	2046      	movs	r0, #70	; 0x46
 800074c:	f001 f816 	bl	800177c <HAL_NVIC_EnableIRQ>

/* NVIC configuration for DMA transfer complete interrupt (USART6_RX) */
HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2039      	movs	r0, #57	; 0x39
 8000756:	f000 fff5 	bl	8001744 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800075a:	2039      	movs	r0, #57	; 0x39
 800075c:	f001 f80e 	bl	800177c <HAL_NVIC_EnableIRQ>

/* NVIC for USART, to catch the TX complete */
HAL_NVIC_SetPriority(USART6_IRQn, 0, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	2100      	movs	r1, #0
 8000764:	2047      	movs	r0, #71	; 0x47
 8000766:	f000 ffed 	bl	8001744 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(USART6_IRQn);
 800076a:	2047      	movs	r0, #71	; 0x47
 800076c:	f001 f806 	bl	800177c <HAL_NVIC_EnableIRQ>
}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020800 	.word	0x40020800
 8000780:	20004014 	.word	0x20004014
 8000784:	400264b8 	.word	0x400264b8
 8000788:	200040d0 	.word	0x200040d0
 800078c:	40026428 	.word	0x40026428
 8000790:	20004074 	.word	0x20004074
 8000794:	40011400 	.word	0x40011400
 8000798:	20004010 	.word	0x20004010

0800079c <TASK_UARTHandler>:


void TASK_UARTHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&uart6, rxBuffer, RXBUFFERSIZE);
 80007a0:	220a      	movs	r2, #10
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <TASK_UARTHandler+0x28>)
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <TASK_UARTHandler+0x2c>)
 80007a6:	f003 fbf9 	bl	8003f9c <HAL_UART_Receive_DMA>
//	for(int i = 0; i < RXBUFFERSIZE; i++)
//	{
//		txBuffer[i]=rxBuffer[i];
//	}

	if(HAL_UART_Transmit_DMA(&uart6, (uint8_t*)txBuffer, TXBUFFERSIZE) != HAL_OK)
 80007aa:	220a      	movs	r2, #10
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <TASK_UARTHandler+0x30>)
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <TASK_UARTHandler+0x2c>)
 80007b0:	f003 fb88 	bl	8003ec4 <HAL_UART_Transmit_DMA>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <TASK_UARTHandler+0x24>
	{
		errorMessage = 0x0003; //uart failure
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <TASK_UARTHandler+0x34>)
 80007bc:	2203      	movs	r2, #3
 80007be:	801a      	strh	r2, [r3, #0]
	}
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200040b8 	.word	0x200040b8
 80007c8:	20004074 	.word	0x20004074
 80007cc:	200040c4 	.word	0x200040c4
 80007d0:	20004010 	.word	0x20004010

080007d4 <DMA2_Stream1_IRQHandler>:



//Interrupt Handling
void DMA2_Stream1_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&dma_rx);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <DMA2_Stream1_IRQHandler+0x10>)
 80007da:	f001 f975 	bl	8001ac8 <HAL_DMA_IRQHandler>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200040d0 	.word	0x200040d0

080007e8 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&dma_tx);
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <DMA2_Stream7_IRQHandler+0x10>)
 80007ee:	f001 f96b 	bl	8001ac8 <HAL_DMA_IRQHandler>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20004014 	.word	0x20004014

080007fc <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart6);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <USART6_IRQHandler+0x10>)
 8000802:	f003 fbfb 	bl	8003ffc <HAL_UART_IRQHandler>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20004074 	.word	0x20004074

08000810 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2203      	movs	r2, #3
 800081c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2203      	movs	r2, #3
 8000828:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2203      	movs	r2, #3
 800082e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2203      	movs	r2, #3
 8000834:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2203      	movs	r2, #3
 800083a:	715a      	strb	r2, [r3, #5]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <read_data>:
		return false;

}

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08b      	sub	sp, #44	; 0x2c
 800084c:	af04      	add	r7, sp, #16
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	461a      	mov	r2, r3
 8000854:	460b      	mov	r3, r1
 8000856:	72fb      	strb	r3, [r7, #11]
 8000858:	4613      	mov	r3, r2
 800085a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	b29a      	uxth	r2, r3
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	b29b      	uxth	r3, r3
 8000870:	8af9      	ldrh	r1, [r7, #22]
 8000872:	f241 3488 	movw	r4, #5000	; 0x1388
 8000876:	9402      	str	r4, [sp, #8]
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	f001 fe6e 	bl	8002560 <HAL_I2C_Mem_Read>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d101      	bne.n	800088e <read_data+0x46>
		return 0;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <read_data+0x48>
	else
		return 1;
 800088e:	2301      	movs	r3, #1

}
 8000890:	4618      	mov	r0, r3
 8000892:	371c      	adds	r7, #28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd90      	pop	{r4, r7, pc}

08000898 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	10da      	asrs	r2, r3, #3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80008ba:	12db      	asrs	r3, r3, #11
 80008bc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	111b      	asrs	r3, r3, #4
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	8812      	ldrh	r2, [r2, #0]
 80008c6:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	1112      	asrs	r2, r2, #4
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	8809      	ldrh	r1, [r1, #0]
 80008d0:	1a52      	subs	r2, r2, r1
 80008d2:	fb02 f303 	mul.w	r3, r2, r3
 80008d6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80008de:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80008e2:	139b      	asrs	r3, r3, #14
 80008e4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	441a      	add	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4613      	mov	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	3380      	adds	r3, #128	; 0x80
 80008fc:	121b      	asrs	r3, r3, #8
}
 80008fe:	4618      	mov	r0, r3
 8000900:	371c      	adds	r7, #28
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800090a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800090e:	b09c      	sub	sp, #112	; 0x70
 8000910:	af00      	add	r7, sp, #0
 8000912:	6578      	str	r0, [r7, #84]	; 0x54
 8000914:	6539      	str	r1, [r7, #80]	; 0x50
 8000916:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800091a:	461a      	mov	r2, r3
 800091c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000920:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8000924:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000928:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800092c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800092e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000930:	fb03 f102 	mul.w	r1, r3, r2
 8000934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000938:	fb03 f302 	mul.w	r3, r3, r2
 800093c:	18ca      	adds	r2, r1, r3
 800093e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000940:	fba3 4503 	umull	r4, r5, r3, r3
 8000944:	1953      	adds	r3, r2, r5
 8000946:	461d      	mov	r5, r3
 8000948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800094a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800094e:	b21a      	sxth	r2, r3
 8000950:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000954:	fb02 f005 	mul.w	r0, r2, r5
 8000958:	fb04 f103 	mul.w	r1, r4, r3
 800095c:	4401      	add	r1, r0
 800095e:	fba4 2302 	umull	r2, r3, r4, r2
 8000962:	4419      	add	r1, r3
 8000964:	460b      	mov	r3, r1
 8000966:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800096a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800096e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000970:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000974:	b21a      	sxth	r2, r3
 8000976:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800097a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800097c:	fb03 f001 	mul.w	r0, r3, r1
 8000980:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000982:	fb02 f101 	mul.w	r1, r2, r1
 8000986:	4408      	add	r0, r1
 8000988:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800098a:	fba1 2302 	umull	r2, r3, r1, r2
 800098e:	18c1      	adds	r1, r0, r3
 8000990:	460b      	mov	r3, r1
 8000992:	f04f 0000 	mov.w	r0, #0
 8000996:	f04f 0100 	mov.w	r1, #0
 800099a:	0459      	lsls	r1, r3, #17
 800099c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80009a0:	0450      	lsls	r0, r2, #17
 80009a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80009a6:	eb12 0800 	adds.w	r8, r2, r0
 80009aa:	eb43 0901 	adc.w	r9, r3, r1
 80009ae:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80009b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	f04f 0100 	mov.w	r1, #0
 80009c6:	00d1      	lsls	r1, r2, #3
 80009c8:	2000      	movs	r0, #0
 80009ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80009ce:	1814      	adds	r4, r2, r0
 80009d0:	61bc      	str	r4, [r7, #24]
 80009d2:	414b      	adcs	r3, r1
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80009da:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80009de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80009e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e2:	fb03 f102 	mul.w	r1, r3, r2
 80009e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80009e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ea:	fb03 f302 	mul.w	r3, r3, r2
 80009ee:	18ca      	adds	r2, r1, r3
 80009f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009f2:	fba3 4503 	umull	r4, r5, r3, r3
 80009f6:	1953      	adds	r3, r2, r5
 80009f8:	461d      	mov	r5, r3
 80009fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000a06:	fb02 f005 	mul.w	r0, r2, r5
 8000a0a:	fb04 f103 	mul.w	r1, r4, r3
 8000a0e:	4401      	add	r1, r0
 8000a10:	fba4 2302 	umull	r2, r3, r4, r2
 8000a14:	4419      	add	r1, r3
 8000a16:	460b      	mov	r3, r1
 8000a18:	f04f 0800 	mov.w	r8, #0
 8000a1c:	f04f 0900 	mov.w	r9, #0
 8000a20:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8000a24:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8000a28:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000a38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000a3a:	fb03 f001 	mul.w	r0, r3, r1
 8000a3e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000a40:	fb02 f101 	mul.w	r1, r2, r1
 8000a44:	1844      	adds	r4, r0, r1
 8000a46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000a48:	fba1 0102 	umull	r0, r1, r1, r2
 8000a4c:	1863      	adds	r3, r4, r1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	030b      	lsls	r3, r1, #12
 8000a5a:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8000a5e:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000a60:	eb18 0102 	adds.w	r1, r8, r2
 8000a64:	6139      	str	r1, [r7, #16]
 8000a66:	eb49 0303 	adc.w	r3, r9, r3
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000a70:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000a74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000a78:	1c11      	adds	r1, r2, #0
 8000a7a:	6439      	str	r1, [r7, #64]	; 0x40
 8000a7c:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
 8000a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a84:	88db      	ldrh	r3, [r3, #6]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8000a90:	4629      	mov	r1, r5
 8000a92:	fb02 f001 	mul.w	r0, r2, r1
 8000a96:	4621      	mov	r1, r4
 8000a98:	fb01 f103 	mul.w	r1, r1, r3
 8000a9c:	4401      	add	r1, r0
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	fba0 2302 	umull	r2, r3, r0, r2
 8000aa4:	4419      	add	r1, r3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	f04f 0100 	mov.w	r1, #0
 8000ab0:	1058      	asrs	r0, r3, #1
 8000ab2:	17d9      	asrs	r1, r3, #31
 8000ab4:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8000ab8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000abc:	4313      	orrs	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e0e1      	b.n	8000c88 <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8000ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ac6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000aca:	461a      	mov	r2, r3
 8000acc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000ad0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8000ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad6:	105b      	asrs	r3, r3, #1
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000adc:	07db      	lsls	r3, r3, #31
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ae0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ae4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8000ae8:	4621      	mov	r1, r4
 8000aea:	ebb1 0a02 	subs.w	sl, r1, r2
 8000aee:	4629      	mov	r1, r5
 8000af0:	eb61 0b03 	sbc.w	fp, r1, r3
 8000af4:	4652      	mov	r2, sl
 8000af6:	465b      	mov	r3, fp
 8000af8:	1891      	adds	r1, r2, r2
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	415b      	adcs	r3, r3
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b04:	eb12 020a 	adds.w	r2, r2, sl
 8000b08:	eb43 030b 	adc.w	r3, r3, fp
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	0199      	lsls	r1, r3, #6
 8000b16:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8000b1a:	0190      	lsls	r0, r2, #6
 8000b1c:	1812      	adds	r2, r2, r0
 8000b1e:	eb41 0303 	adc.w	r3, r1, r3
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	f04f 0100 	mov.w	r1, #0
 8000b2a:	0099      	lsls	r1, r3, #2
 8000b2c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b30:	0090      	lsls	r0, r2, #2
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	eb12 020a 	adds.w	r2, r2, sl
 8000b3a:	eb43 030b 	adc.w	r3, r3, fp
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	f04f 0100 	mov.w	r1, #0
 8000b46:	0099      	lsls	r1, r3, #2
 8000b48:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000b4c:	0090      	lsls	r0, r2, #2
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	eb12 010a 	adds.w	r1, r2, sl
 8000b56:	6339      	str	r1, [r7, #48]	; 0x30
 8000b58:	eb43 030b 	adc.w	r3, r3, fp
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000b62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000b66:	f7ff fb5b 	bl	8000220 <__aeabi_ldivmod>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8000b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b74:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000b78:	b218      	sxth	r0, r3
 8000b7a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000b7e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	f04f 0300 	mov.w	r3, #0
 8000b8a:	0b62      	lsrs	r2, r4, #13
 8000b8c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8000b90:	136b      	asrs	r3, r5, #13
 8000b92:	fb02 f501 	mul.w	r5, r2, r1
 8000b96:	fb00 f403 	mul.w	r4, r0, r3
 8000b9a:	442c      	add	r4, r5
 8000b9c:	fba0 0102 	umull	r0, r1, r0, r2
 8000ba0:	1863      	adds	r3, r4, r1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	0b62      	lsrs	r2, r4, #13
 8000bb2:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8000bb6:	136b      	asrs	r3, r5, #13
 8000bb8:	fb02 f501 	mul.w	r5, r2, r1
 8000bbc:	fb00 f403 	mul.w	r4, r0, r3
 8000bc0:	442c      	add	r4, r5
 8000bc2:	fba0 0102 	umull	r0, r1, r0, r2
 8000bc6:	1863      	adds	r3, r4, r1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	0e42      	lsrs	r2, r0, #25
 8000bd4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000bd8:	164b      	asrs	r3, r1, #25
 8000bda:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8000bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000be0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000bea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000bec:	fb03 f001 	mul.w	r0, r3, r1
 8000bf0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000bf2:	fb02 f101 	mul.w	r1, r2, r1
 8000bf6:	1844      	adds	r4, r0, r1
 8000bf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000bfa:	fba1 0102 	umull	r0, r1, r1, r2
 8000bfe:	1863      	adds	r3, r4, r1
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	0cc2      	lsrs	r2, r0, #19
 8000c0c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000c10:	14cb      	asrs	r3, r1, #19
 8000c12:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8000c16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000c1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000c1e:	1884      	adds	r4, r0, r2
 8000c20:	62bc      	str	r4, [r7, #40]	; 0x28
 8000c22:	eb41 0303 	adc.w	r3, r1, r3
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000c2c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000c30:	4621      	mov	r1, r4
 8000c32:	1889      	adds	r1, r1, r2
 8000c34:	6239      	str	r1, [r7, #32]
 8000c36:	4629      	mov	r1, r5
 8000c38:	eb43 0101 	adc.w	r1, r3, r1
 8000c3c:	6279      	str	r1, [r7, #36]	; 0x24
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	f04f 0100 	mov.w	r1, #0
 8000c46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	0a18      	lsrs	r0, r3, #8
 8000c4e:	462b      	mov	r3, r5
 8000c50:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c54:	462b      	mov	r3, r5
 8000c56:	1219      	asrs	r1, r3, #8
 8000c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c5a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000c5e:	b21c      	sxth	r4, r3
 8000c60:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	012b      	lsls	r3, r5, #4
 8000c6e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000c72:	0122      	lsls	r2, r4, #4
 8000c74:	1884      	adds	r4, r0, r2
 8000c76:	603c      	str	r4, [r7, #0]
 8000c78:	eb41 0303 	adc.w	r3, r1, r3
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000c82:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8000c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3770      	adds	r7, #112	; 0x70
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000c92 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8000c92:	b480      	push	{r7}
 8000c94:	b087      	sub	sp, #28
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8000ca4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	039a      	lsls	r2, r3, #14
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fb03 f301 	mul.w	r3, r3, r1
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000cc8:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	fb02 f201 	mul.w	r2, r2, r1
 8000cd8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	7f09      	ldrb	r1, [r1, #28]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	6979      	ldr	r1, [r7, #20]
 8000ce2:	fb01 f100 	mul.w	r1, r1, r0
 8000ce6:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000ce8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8000cec:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8000cf0:	1292      	asrs	r2, r2, #10
 8000cf2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8000cf6:	68f9      	ldr	r1, [r7, #12]
 8000cf8:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8000cfc:	fb01 f202 	mul.w	r2, r1, r2
 8000d00:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000d04:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	13db      	asrs	r3, r3, #15
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	13d2      	asrs	r2, r2, #15
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	7e12      	ldrb	r2, [r2, #24]
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000d30:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000d38:	bfa8      	it	ge
 8000d3a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000d3e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	131b      	asrs	r3, r3, #12
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d64:	2b60      	cmp	r3, #96	; 0x60
 8000d66:	d007      	beq.n	8000d78 <bmp280_read_fixed+0x28>
		if (humidity)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <bmp280_read_fixed+0x32>
 8000d7e:	2308      	movs	r3, #8
 8000d80:	e000      	b.n	8000d84 <bmp280_read_fixed+0x34>
 8000d82:	2306      	movs	r3, #6
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f107 0218 	add.w	r2, r7, #24
 8000d8e:	21f7      	movs	r1, #247	; 0xf7
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff fd59 	bl	8000848 <read_data>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <bmp280_read_fixed+0x50>
		return false;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e038      	b.n	8000e12 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000da0:	7e3b      	ldrb	r3, [r7, #24]
 8000da2:	031a      	lsls	r2, r3, #12
 8000da4:	7e7b      	ldrb	r3, [r7, #25]
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4313      	orrs	r3, r2
 8000daa:	7eba      	ldrb	r2, [r7, #26]
 8000dac:	0912      	lsrs	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	4313      	orrs	r3, r2
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8000db4:	7efb      	ldrb	r3, [r7, #27]
 8000db6:	031a      	lsls	r2, r3, #12
 8000db8:	7f3b      	ldrb	r3, [r7, #28]
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	7f7a      	ldrb	r2, [r7, #29]
 8000dc0:	0912      	lsrs	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	461a      	mov	r2, r3
 8000dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff fd61 	bl	8000898 <compensate_temperature>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	461a      	mov	r2, r3
 8000de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000de2:	68f8      	ldr	r0, [r7, #12]
 8000de4:	f7ff fd91 	bl	800090a <compensate_pressure>
 8000de8:	4602      	mov	r2, r0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00d      	beq.n	8000e10 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8000df4:	7fbb      	ldrb	r3, [r7, #30]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	7ffa      	ldrb	r2, [r7, #31]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	461a      	mov	r2, r3
 8000e02:	6a39      	ldr	r1, [r7, #32]
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f7ff ff44 	bl	8000c92 <compensate_humidity>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	601a      	str	r2, [r3, #0]
	}

	return true;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <bmp280_read_float+0x1a>
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	e000      	b.n	8000e38 <bmp280_read_float+0x1c>
 8000e36:	2300      	movs	r3, #0
 8000e38:	f107 0218 	add.w	r2, r7, #24
 8000e3c:	f107 011c 	add.w	r1, r7, #28
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff ff85 	bl	8000d50 <bmp280_read_fixed>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d028      	beq.n	8000e9e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e56:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000ea8 <bmp280_read_float+0x8c>
 8000e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e6e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000eac <bmp280_read_float+0x90>
 8000e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00b      	beq.n	8000e9a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e8c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000eb0 <bmp280_read_float+0x94>
 8000e90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <bmp280_read_float+0x84>
	}

	return false;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	42c80000 	.word	0x42c80000
 8000eac:	43800000 	.word	0x43800000
 8000eb0:	44800000 	.word	0x44800000

08000eb4 <TASK_errorHandler>:
static GPIO_InitTypeDef  GPIO_InitStructRED;
static GPIO_InitTypeDef  GPIO_InitStructBLU;
static GPIO_InitTypeDef  GPIO_InitStructGRN;

void TASK_errorHandler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <TASK_nucleoRED>:

void TASK_nucleoRED(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
		GPIOB->ODR ^= GPIO_PIN_14;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <TASK_nucleoRED+0x1c>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <TASK_nucleoRED+0x1c>)
 8000ece:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000ed2:	6153      	str	r3, [r2, #20]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <TASK_nucleoBLU>:

void TASK_nucleoBLU(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
		GPIOB->ODR ^= GPIO_PIN_7;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <TASK_nucleoBLU+0x1c>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <TASK_nucleoBLU+0x1c>)
 8000eee:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000ef2:	6153      	str	r3, [r2, #20]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40020400 	.word	0x40020400

08000f04 <TASK_nucleoGRN>:

void TASK_nucleoGRN(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
		GPIOB->ODR ^= GPIO_PIN_0;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <TASK_nucleoGRN+0x1c>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <TASK_nucleoGRN+0x1c>)
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	6153      	str	r3, [r2, #20]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40020400 	.word	0x40020400

08000f24 <errorInit>:

void errorInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	GPIO_InitStructRED.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <errorInit+0x6c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
	GPIO_InitStructRED.Pull  = GPIO_PULLUP;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <errorInit+0x6c>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	609a      	str	r2, [r3, #8]
	GPIO_InitStructRED.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <errorInit+0x6c>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	60da      	str	r2, [r3, #12]
	GPIO_InitStructRED.Pin = GPIO_PIN_7;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <errorInit+0x6c>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructRED);
 8000f40:	4913      	ldr	r1, [pc, #76]	; (8000f90 <errorInit+0x6c>)
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <errorInit+0x70>)
 8000f44:	f001 f82a 	bl	8001f9c <HAL_GPIO_Init>

	GPIO_InitStructBLU.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <errorInit+0x74>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
	GPIO_InitStructBLU.Pull  = GPIO_PULLUP;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <errorInit+0x74>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	609a      	str	r2, [r3, #8]
	GPIO_InitStructBLU.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <errorInit+0x74>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	60da      	str	r2, [r3, #12]
	GPIO_InitStructBLU.Pin = GPIO_PIN_14;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <errorInit+0x74>)
 8000f5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f60:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructBLU);
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <errorInit+0x74>)
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <errorInit+0x70>)
 8000f66:	f001 f819 	bl	8001f9c <HAL_GPIO_Init>

	GPIO_InitStructGRN.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <errorInit+0x78>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	605a      	str	r2, [r3, #4]
	GPIO_InitStructGRN.Pull  = GPIO_PULLUP;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <errorInit+0x78>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	609a      	str	r2, [r3, #8]
	GPIO_InitStructGRN.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <errorInit+0x78>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	60da      	str	r2, [r3, #12]
	GPIO_InitStructGRN.Pin = GPIO_PIN_0;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <errorInit+0x78>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructGRN);
 8000f82:	4906      	ldr	r1, [pc, #24]	; (8000f9c <errorInit+0x78>)
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <errorInit+0x70>)
 8000f86:	f001 f809 	bl	8001f9c <HAL_GPIO_Init>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000002c 	.word	0x2000002c
 8000f94:	40020400 	.word	0x40020400
 8000f98:	20000040 	.word	0x20000040
 8000f9c:	20000054 	.word	0x20000054

08000fa0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <vApplicationGetIdleTaskMemory+0x2c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <vApplicationGetIdleTaskMemory+0x30>)
 8000fb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000068 	.word	0x20000068
 8000fd0:	200000bc 	.word	0x200000bc

08000fd4 <main>:

void SystemClock_Config(void);
void StartDefaultTask(void const * argument);

int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  HAL_Init();
 8000fd8:	f000 faba 	bl	8001550 <HAL_Init>
  SystemClock_Config();
 8000fdc:	f000 f80a 	bl	8000ff4 <SystemClock_Config>

  errorInit();
 8000fe0:	f7ff ffa0 	bl	8000f24 <errorInit>
  UART_Init();
 8000fe4:	f7ff fae8 	bl	80005b8 <UART_Init>
  sensorsInit();
 8000fe8:	f000 f952 	bl	8001290 <sensorsInit>

  RTOS_init();
 8000fec:	f000 f8a8 	bl	8001140 <RTOS_init>

  for(;;);
 8000ff0:	e7fe      	b.n	8000ff0 <main+0x1c>
	...

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b096      	sub	sp, #88	; 0x58
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	2234      	movs	r2, #52	; 0x34
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f005 f84e 	bl	80060a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <SystemClock_Config+0xbc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <SystemClock_Config+0xbc>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <SystemClock_Config+0xbc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <SystemClock_Config+0xc0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <SystemClock_Config+0xc0>)
 800103e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <SystemClock_Config+0xc0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	2302      	movs	r3, #2
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001058:	2310      	movs	r3, #16
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4618      	mov	r0, r3
 8001066:	f002 f9a3 	bl	80033b0 <HAL_RCC_OscConfig>
  {
    //error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]


  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <SystemClock_Config+0xbc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SystemClock_Config+0xbc>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SystemClock_Config+0xbc>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 ff83 	bl	8002fac <HAL_RCC_ClockConfig>
  {
	 //error
  }
}
 80010a6:	bf00      	nop
 80010a8:	3758      	adds	r7, #88	; 0x58
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ca:	f000 fa63 	bl	8001594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40010000 	.word	0x40010000

080010dc <PRIVATE_errorHandler>:
static void PRIVATE_nucleoBLU(void);
static void PRIVATE_nucleoGRN(void);
static void PRIVATE_UARTHandler(void);

static void PRIVATE_errorHandler()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_errorHandler();
 80010e0:	f7ff fee8 	bl	8000eb4 <TASK_errorHandler>
		vTaskDelay(500);
 80010e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e8:	f004 f834 	bl	8005154 <vTaskDelay>
		TASK_errorHandler();
 80010ec:	e7f8      	b.n	80010e0 <PRIVATE_errorHandler+0x4>

080010ee <PRIVATE_nucleoRED>:
	}
}

static void PRIVATE_nucleoRED()
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoRED();
 80010f2:	f7ff fee7 	bl	8000ec4 <TASK_nucleoRED>
		vTaskDelay(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fa:	f004 f82b 	bl	8005154 <vTaskDelay>
		TASK_nucleoRED();
 80010fe:	e7f8      	b.n	80010f2 <PRIVATE_nucleoRED+0x4>

08001100 <PRIVATE_nucleoBLU>:
	}
}

static void PRIVATE_nucleoBLU()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoBLU();
 8001104:	f7ff feee 	bl	8000ee4 <TASK_nucleoBLU>
		vTaskDelay(250);
 8001108:	20fa      	movs	r0, #250	; 0xfa
 800110a:	f004 f823 	bl	8005154 <vTaskDelay>
		TASK_nucleoBLU();
 800110e:	e7f9      	b.n	8001104 <PRIVATE_nucleoBLU+0x4>

08001110 <PRIVATE_nucleoGRN>:
	}
}

static void PRIVATE_nucleoGRN()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoGRN();
 8001114:	f7ff fef6 	bl	8000f04 <TASK_nucleoGRN>
		vTaskDelay(100);
 8001118:	2064      	movs	r0, #100	; 0x64
 800111a:	f004 f81b 	bl	8005154 <vTaskDelay>
	{
 800111e:	e7f9      	b.n	8001114 <PRIVATE_nucleoGRN+0x4>

08001120 <PRIVATE_UARTHandler>:
	}
}

static void PRIVATE_UARTHandler()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_UARTHandler();
 8001124:	f7ff fb3a 	bl	800079c <TASK_UARTHandler>
		vTaskDelay(25);
 8001128:	2019      	movs	r0, #25
 800112a:	f004 f813 	bl	8005154 <vTaskDelay>
		TASK_UARTHandler();
 800112e:	e7f9      	b.n	8001124 <PRIVATE_UARTHandler+0x4>

08001130 <PRIVATE_SensorHandler>:
	}
}

static void PRIVATE_SensorHandler()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_SensorHandler();
 8001134:	f000 f912 	bl	800135c <TASK_SensorHandler>
		vTaskDelay(25);
 8001138:	2019      	movs	r0, #25
 800113a:	f004 f80b 	bl	8005154 <vTaskDelay>
	{
 800113e:	e7f9      	b.n	8001134 <PRIVATE_SensorHandler+0x4>

08001140 <RTOS_init>:
}



void RTOS_init()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af02      	add	r7, sp, #8
	BaseType_t ret;


	TaskHandle_t errorHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_errorHandler,
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2301      	movs	r3, #1
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001156:	4941      	ldr	r1, [pc, #260]	; (800125c <RTOS_init+0x11c>)
 8001158:	4841      	ldr	r0, [pc, #260]	; (8001260 <RTOS_init+0x120>)
 800115a:	f003 fec4 	bl	8004ee6 <xTaskCreate>
 800115e:	61f8      	str	r0, [r7, #28]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 1U,
				&errorHandler_th);

		if(ret != pdPASS)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d006      	beq.n	8001174 <RTOS_init+0x34>
		{
			errorMessage |= 0x0001; //RTOS init error
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <RTOS_init+0x124>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <RTOS_init+0x124>)
 8001172:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoRED_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_nucleoRED,
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2303      	movs	r3, #3
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	4938      	ldr	r1, [pc, #224]	; (8001268 <RTOS_init+0x128>)
 8001186:	4839      	ldr	r0, [pc, #228]	; (800126c <RTOS_init+0x12c>)
 8001188:	f003 fead 	bl	8004ee6 <xTaskCreate>
 800118c:	61f8      	str	r0, [r7, #28]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoRED_th);

		if(ret != pdPASS)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d006      	beq.n	80011a2 <RTOS_init+0x62>
		{
			errorMessage |= 0x0001; //RTOS init error
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <RTOS_init+0x124>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <RTOS_init+0x124>)
 80011a0:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoBLUE_th;

	xTaskCreate((TaskFunction_t)PRIVATE_nucleoBLU,
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2303      	movs	r3, #3
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b2:	492f      	ldr	r1, [pc, #188]	; (8001270 <RTOS_init+0x130>)
 80011b4:	482f      	ldr	r0, [pc, #188]	; (8001274 <RTOS_init+0x134>)
 80011b6:	f003 fe96 	bl	8004ee6 <xTaskCreate>
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoBLUE_th);

		if(ret != pdPASS)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d006      	beq.n	80011ce <RTOS_init+0x8e>
		{
			errorMessage |= 0x00000001; //RTOS init error
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <RTOS_init+0x124>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <RTOS_init+0x124>)
 80011cc:	801a      	strh	r2, [r3, #0]
		}

	TaskHandle_t nucleoGRN_th;

	xTaskCreate((TaskFunction_t)PRIVATE_nucleoGRN,
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2303      	movs	r3, #3
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	4926      	ldr	r1, [pc, #152]	; (8001278 <RTOS_init+0x138>)
 80011e0:	4826      	ldr	r0, [pc, #152]	; (800127c <RTOS_init+0x13c>)
 80011e2:	f003 fe80 	bl	8004ee6 <xTaskCreate>
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoGRN_th);

		if(ret != pdPASS)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d006      	beq.n	80011fa <RTOS_init+0xba>
		{
			errorMessage |= 0x00000001; //RTOS init error
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <RTOS_init+0x124>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <RTOS_init+0x124>)
 80011f8:	801a      	strh	r2, [r3, #0]
		}


	TaskHandle_t UARTHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_UARTHandler,
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	2305      	movs	r3, #5
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120a:	491d      	ldr	r1, [pc, #116]	; (8001280 <RTOS_init+0x140>)
 800120c:	481d      	ldr	r0, [pc, #116]	; (8001284 <RTOS_init+0x144>)
 800120e:	f003 fe6a 	bl	8004ee6 <xTaskCreate>
 8001212:	61f8      	str	r0, [r7, #28]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 5U,
				&UARTHandler_th);

		if(ret != pdPASS)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d006      	beq.n	8001228 <RTOS_init+0xe8>
		{
			errorMessage |= 0x0001; //RTOS init error
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <RTOS_init+0x124>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <RTOS_init+0x124>)
 8001226:	801a      	strh	r2, [r3, #0]
		}


	TaskHandle_t SensorHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_SensorHandler,
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	2305      	movs	r3, #5
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2300      	movs	r3, #0
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	4914      	ldr	r1, [pc, #80]	; (8001288 <RTOS_init+0x148>)
 8001238:	4814      	ldr	r0, [pc, #80]	; (800128c <RTOS_init+0x14c>)
 800123a:	f003 fe54 	bl	8004ee6 <xTaskCreate>
 800123e:	61f8      	str	r0, [r7, #28]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 5U,
				&SensorHandler_th);

		if(ret != pdPASS)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d006      	beq.n	8001254 <RTOS_init+0x114>
		{
			errorMessage |= 0x0001; //RTOS init error
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <RTOS_init+0x124>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <RTOS_init+0x124>)
 8001252:	801a      	strh	r2, [r3, #0]
		}


	vTaskStartScheduler();
 8001254:	f003 ffb2 	bl	80051bc <vTaskStartScheduler>

	for(;;);
 8001258:	e7fe      	b.n	8001258 <RTOS_init+0x118>
 800125a:	bf00      	nop
 800125c:	080060cc 	.word	0x080060cc
 8001260:	080010dd 	.word	0x080010dd
 8001264:	20004010 	.word	0x20004010
 8001268:	080060dc 	.word	0x080060dc
 800126c:	080010ef 	.word	0x080010ef
 8001270:	080060e8 	.word	0x080060e8
 8001274:	08001101 	.word	0x08001101
 8001278:	080060f4 	.word	0x080060f4
 800127c:	08001111 	.word	0x08001111
 8001280:	08006100 	.word	0x08006100
 8001284:	08001121 	.word	0x08001121
 8001288:	0800610c 	.word	0x0800610c
 800128c:	08001131 	.word	0x08001131

08001290 <sensorsInit>:
BMP280_HandleTypedef bmp280;

float pressure, temperature, humidity;

void sensorsInit()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b09c      	sub	sp, #112	; 0x70
 8001294:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef I2C_GPIO;
	I2C_GPIO.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129a:	65fb      	str	r3, [r7, #92]	; 0x5c
	I2C_GPIO.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	663b      	str	r3, [r7, #96]	; 0x60
	I2C_GPIO.Pull = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	667b      	str	r3, [r7, #100]	; 0x64
	I2C_GPIO.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	66bb      	str	r3, [r7, #104]	; 0x68
	I2C_GPIO.Alternate = GPIO_AF4_I2C1;
 80012a8:	2304      	movs	r3, #4
 80012aa:	66fb      	str	r3, [r7, #108]	; 0x6c
	HAL_GPIO_Init(GPIOB, &I2C_GPIO);
 80012ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012b0:	4619      	mov	r1, r3
 80012b2:	4824      	ldr	r0, [pc, #144]	; (8001344 <sensorsInit+0xb4>)
 80012b4:	f000 fe72 	bl	8001f9c <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <sensorsInit+0xb8>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <sensorsInit+0xb8>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <sensorsInit+0xb8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

	I2C_HandleTypeDef hi2c1;

	hi2c1.Instance = I2C1;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <sensorsInit+0xbc>)
 80012d6:	60bb      	str	r3, [r7, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e0:	61bb      	str	r3, [r7, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
	hi2c1.Init.OwnAddress2 = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ffe4 	bl	80022c4 <HAL_I2C_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <sensorsInit+0x80>
	{
		errorMessage |= 0x00000003; //I2C init error
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <sensorsInit+0xc0>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	f043 0303 	orr.w	r3, r3, #3
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <sensorsInit+0xc0>)
 800130e:	801a      	strh	r2, [r3, #0]
	}

	HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fdcc 	bl	8002eb4 <HAL_I2CEx_ConfigAnalogFilter>
	HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fe02 	bl	8002f2c <HAL_I2CEx_ConfigDigitalFilter>

	bmp280_init_default_params(&bmp280.params);
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <sensorsInit+0xc4>)
 800132a:	f7ff fa71 	bl	8000810 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <sensorsInit+0xc8>)
 8001330:	2276      	movs	r2, #118	; 0x76
 8001332:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <sensorsInit+0xc8>)
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800133c:	bf00      	nop
 800133e:	3770      	adds	r7, #112	; 0x70
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020400 	.word	0x40020400
 8001348:	40023800 	.word	0x40023800
 800134c:	40005400 	.word	0x40005400
 8001350:	20004010 	.word	0x20004010
 8001354:	20004168 	.word	0x20004168
 8001358:	2000413c 	.word	0x2000413c

0800135c <TASK_SensorHandler>:


void TASK_SensorHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <TASK_SensorHandler+0x14>)
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <TASK_SensorHandler+0x18>)
 8001364:	4904      	ldr	r1, [pc, #16]	; (8001378 <TASK_SensorHandler+0x1c>)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <TASK_SensorHandler+0x20>)
 8001368:	f7ff fd58 	bl	8000e1c <bmp280_read_float>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20004138 	.word	0x20004138
 8001374:	20004134 	.word	0x20004134
 8001378:	20004130 	.word	0x20004130
 800137c:	2000413c 	.word	0x2000413c

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_MspInit+0x54>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_MspInit+0x54>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x54>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_MspInit+0x54>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_MspInit+0x54>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_MspInit+0x54>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	210f      	movs	r1, #15
 80013c2:	f06f 0001 	mvn.w	r0, #1
 80013c6:	f000 f9bd 	bl	8001744 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	2019      	movs	r0, #25
 80013ee:	f000 f9a9 	bl	8001744 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013f2:	2019      	movs	r0, #25
 80013f4:	f000 f9c2 	bl	800177c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_InitTick+0xa0>)
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_InitTick+0xa0>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6453      	str	r3, [r2, #68]	; 0x44
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_InitTick+0xa0>)
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001414:	f107 0210 	add.w	r2, r7, #16
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f001 ff94 	bl	800334c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001424:	f001 ff7e 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8001428:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <HAL_InitTick+0xa4>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9b      	lsrs	r3, r3, #18
 8001434:	3b01      	subs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_InitTick+0xa8>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_InitTick+0xac>)
 800143c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_InitTick+0xa8>)
 8001440:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_InitTick+0xa8>)
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_InitTick+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_InitTick+0xa8>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <HAL_InitTick+0xa8>)
 800145a:	f002 fa2d 	bl	80038b8 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d104      	bne.n	800146e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <HAL_InitTick+0xa8>)
 8001466:	f002 fa81 	bl	800396c <HAL_TIM_Base_Start_IT>
 800146a:	4603      	mov	r3, r0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3730      	adds	r7, #48	; 0x30
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	431bde83 	.word	0x431bde83
 8001480:	20004170 	.word	0x20004170
 8001484:	40010000 	.word	0x40010000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014c2:	f002 fac3 	bl	8003a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20004170 	.word	0x20004170

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <SystemInit+0x28>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <SystemInit+0x28>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SystemInit+0x28>)
 80014e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ea:	609a      	str	r2, [r3, #8]
#endif
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001502:	e003      	b.n	800150c <LoopCopyDataInit>

08001504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800150a:	3104      	adds	r1, #4

0800150c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001514:	d3f6      	bcc.n	8001504 <CopyDataInit>
  ldr  r2, =_sbss
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001518:	e002      	b.n	8001520 <LoopFillZerobss>

0800151a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800151a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800151c:	f842 3b04 	str.w	r3, [r2], #4

08001520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001524:	d3f9      	bcc.n	800151a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001526:	f7ff ffd3 	bl	80014d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152a:	f004 fd97 	bl	800605c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff fd51 	bl	8000fd4 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001534:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001538:	08006154 	.word	0x08006154
  ldr  r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001540:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001544:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001548:	200041bc 	.word	0x200041bc

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f8d8 	bl	800172e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ff2a 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fefc 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008
 80015b8:	200041b8 	.word	0x200041b8

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200041b8 	.word	0x200041b8

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4907      	ldr	r1, [pc, #28]	; (8001670 <__NVIC_EnableIRQ+0x38>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff4c 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001756:	f7ff ff61 	bl	800161c <__NVIC_GetPriorityGrouping>
 800175a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	68b9      	ldr	r1, [r7, #8]
 8001760:	6978      	ldr	r0, [r7, #20]
 8001762:	f7ff ffb1 	bl	80016c8 <NVIC_EncodePriority>
 8001766:	4602      	mov	r2, r0
 8001768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff80 	bl	8001674 <__NVIC_SetPriority>
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff54 	bl	8001638 <__NVIC_EnableIRQ>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff ff0a 	bl	80015bc <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e099      	b.n	80018e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d4:	e00f      	b.n	80017f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d6:	f7ff fef1 	bl	80015bc <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d908      	bls.n	80017f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2220      	movs	r2, #32
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e078      	b.n	80018e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e8      	bne.n	80017d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_DMA_Init+0x158>)
 8001810:	4013      	ands	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2b04      	cmp	r3, #4
 800184e:	d107      	bne.n	8001860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4313      	orrs	r3, r2
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f023 0307 	bic.w	r3, r3, #7
 8001876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	4313      	orrs	r3, r2
 8001880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	2b04      	cmp	r3, #4
 8001888:	d117      	bne.n	80018ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4313      	orrs	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00e      	beq.n	80018ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fb01 	bl	8001ea4 <DMA_CheckFifoParam>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2240      	movs	r2, #64	; 0x40
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018b6:	2301      	movs	r3, #1
 80018b8:	e016      	b.n	80018e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fab8 	bl	8001e38 <DMA_CalcBaseAndBitshift>
 80018c8:	4603      	mov	r3, r0
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	223f      	movs	r2, #63	; 0x3f
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	e010803f 	.word	0xe010803f

080018f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_DMA_Start_IT+0x26>
 8001916:	2302      	movs	r3, #2
 8001918:	e040      	b.n	800199c <HAL_DMA_Start_IT+0xa8>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d12f      	bne.n	800198e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2202      	movs	r2, #2
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fa4a 	bl	8001ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	223f      	movs	r2, #63	; 0x3f
 800194e:	409a      	lsls	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0216 	orr.w	r2, r2, #22
 8001962:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0208 	orr.w	r2, r2, #8
 800197a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e005      	b.n	800199a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800199a:	7dfb      	ldrb	r3, [r7, #23]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019b2:	f7ff fe03 	bl	80015bc <HAL_GetTick>
 80019b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d008      	beq.n	80019d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e052      	b.n	8001a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0216 	bic.w	r2, r2, #22
 80019e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <HAL_DMA_Abort+0x62>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0208 	bic.w	r2, r2, #8
 8001a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a26:	e013      	b.n	8001a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a28:	f7ff fdc8 	bl	80015bc <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d90c      	bls.n	8001a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e015      	b.n	8001a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1e4      	bne.n	8001a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	223f      	movs	r2, #63	; 0x3f
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d004      	beq.n	8001aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00c      	b.n	8001abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0201 	bic.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <HAL_DMA_IRQHandler+0x258>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a92      	ldr	r2, [pc, #584]	; (8001d24 <HAL_DMA_IRQHandler+0x25c>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	0a9b      	lsrs	r3, r3, #10
 8001ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2208      	movs	r2, #8
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01a      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0204 	bic.w	r2, r2, #4
 8001b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	2208      	movs	r2, #8
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	2201      	movs	r2, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	f043 0202 	orr.w	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2204      	movs	r2, #4
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d012      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	f043 0204 	orr.w	r2, r3, #4
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d043      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03c      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d018      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d108      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d024      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
 8001bf6:	e01f      	b.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
 8001c08:	e016      	b.n	8001c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d107      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0208 	bic.w	r2, r2, #8
 8001c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 808e 	beq.w	8001d66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8086 	beq.w	8001d66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2220      	movs	r2, #32
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d136      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0216 	bic.w	r2, r2, #22
 8001c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0x1da>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0208 	bic.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	223f      	movs	r2, #63	; 0x3f
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d07d      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
        }
        return;
 8001cde:	e078      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01c      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d108      	bne.n	8001d0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d030      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e02b      	b.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d027      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
 8001d1e:	e022      	b.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
 8001d20:	20000000 	.word	0x20000000
 8001d24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0210 	bic.w	r2, r2, #16
 8001d44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d032      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d022      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2205      	movs	r2, #5
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3301      	adds	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d307      	bcc.n	8001dae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f2      	bne.n	8001d92 <HAL_DMA_IRQHandler+0x2ca>
 8001dac:	e000      	b.n	8001db0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
 8001dd0:	e000      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dd2:	bf00      	nop
    }
  }
}
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop

08001ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b40      	cmp	r3, #64	; 0x40
 8001e08:	d108      	bne.n	8001e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e1a:	e007      	b.n	8001e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3b10      	subs	r3, #16
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <DMA_CalcBaseAndBitshift+0x64>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d909      	bls.n	8001e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	1d1a      	adds	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	659a      	str	r2, [r3, #88]	; 0x58
 8001e78:	e007      	b.n	8001e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ea0:	0800613c 	.word	0x0800613c

08001ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11f      	bne.n	8001efe <DMA_CheckFifoParam+0x5a>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d856      	bhi.n	8001f72 <DMA_CheckFifoParam+0xce>
 8001ec4:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <DMA_CheckFifoParam+0x28>)
 8001ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001eef 	.word	0x08001eef
 8001ed4:	08001edd 	.word	0x08001edd
 8001ed8:	08001f73 	.word	0x08001f73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d046      	beq.n	8001f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e043      	b.n	8001f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ef6:	d140      	bne.n	8001f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efc:	e03d      	b.n	8001f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f06:	d121      	bne.n	8001f4c <DMA_CheckFifoParam+0xa8>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d837      	bhi.n	8001f7e <DMA_CheckFifoParam+0xda>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <DMA_CheckFifoParam+0x70>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f2b 	.word	0x08001f2b
 8001f1c:	08001f25 	.word	0x08001f25
 8001f20:	08001f3d 	.word	0x08001f3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      break;
 8001f28:	e030      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d025      	beq.n	8001f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3a:	e022      	b.n	8001f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f44:	d11f      	bne.n	8001f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f4a:	e01c      	b.n	8001f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d903      	bls.n	8001f5a <DMA_CheckFifoParam+0xb6>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d003      	beq.n	8001f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f58:	e018      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5e:	e015      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00e      	beq.n	8001f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f70:	e00b      	b.n	8001f8a <DMA_CheckFifoParam+0xe6>
      break;
 8001f72:	bf00      	nop
 8001f74:	e00a      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f76:	bf00      	nop
 8001f78:	e008      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e006      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e004      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f82:	bf00      	nop
 8001f84:	e002      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f86:	bf00      	nop
 8001f88:	e000      	b.n	8001f8c <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e165      	b.n	8002284 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8154 	bne.w	800227e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d005      	beq.n	8001fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d130      	bne.n	8002050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 0201 	and.w	r2, r3, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b03      	cmp	r3, #3
 800205a:	d017      	beq.n	800208c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80ae 	beq.w	800227e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_GPIO_Init+0x300>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a5c      	ldr	r2, [pc, #368]	; (800229c <HAL_GPIO_Init+0x300>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5a      	ldr	r3, [pc, #360]	; (800229c <HAL_GPIO_Init+0x300>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_GPIO_Init+0x304>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4f      	ldr	r2, [pc, #316]	; (80022a4 <HAL_GPIO_Init+0x308>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d025      	beq.n	80021b6 <HAL_GPIO_Init+0x21a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4e      	ldr	r2, [pc, #312]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <HAL_GPIO_Init+0x216>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4d      	ldr	r2, [pc, #308]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d019      	beq.n	80021ae <HAL_GPIO_Init+0x212>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4c      	ldr	r2, [pc, #304]	; (80022b0 <HAL_GPIO_Init+0x314>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x20e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <HAL_GPIO_Init+0x318>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x20a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4a      	ldr	r2, [pc, #296]	; (80022b8 <HAL_GPIO_Init+0x31c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x206>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a49      	ldr	r2, [pc, #292]	; (80022bc <HAL_GPIO_Init+0x320>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x202>
 800219a:	2306      	movs	r3, #6
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x21c>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	; (80022a0 <HAL_GPIO_Init+0x304>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d6:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_GPIO_Init+0x324>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021fa:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <HAL_GPIO_Init+0x324>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_GPIO_Init+0x324>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002278:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_GPIO_Init+0x324>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f ae96 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40021400 	.word	0x40021400
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e12b      	b.n	800252e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f92e 	bl	800254c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002328:	f000 ffe8 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 800232c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4a81      	ldr	r2, [pc, #516]	; (8002538 <HAL_I2C_Init+0x274>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d807      	bhi.n	8002348 <HAL_I2C_Init+0x84>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a80      	ldr	r2, [pc, #512]	; (800253c <HAL_I2C_Init+0x278>)
 800233c:	4293      	cmp	r3, r2
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e006      	b.n	8002356 <HAL_I2C_Init+0x92>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4a7d      	ldr	r2, [pc, #500]	; (8002540 <HAL_I2C_Init+0x27c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	bf94      	ite	ls
 8002350:	2301      	movls	r3, #1
 8002352:	2300      	movhi	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e7      	b.n	800252e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a78      	ldr	r2, [pc, #480]	; (8002544 <HAL_I2C_Init+0x280>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0c9b      	lsrs	r3, r3, #18
 8002368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a6a      	ldr	r2, [pc, #424]	; (8002538 <HAL_I2C_Init+0x274>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d802      	bhi.n	8002398 <HAL_I2C_Init+0xd4>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3301      	adds	r3, #1
 8002396:	e009      	b.n	80023ac <HAL_I2C_Init+0xe8>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	4a69      	ldr	r2, [pc, #420]	; (8002548 <HAL_I2C_Init+0x284>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	3301      	adds	r3, #1
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	495c      	ldr	r1, [pc, #368]	; (8002538 <HAL_I2C_Init+0x274>)
 80023c8:	428b      	cmp	r3, r1
 80023ca:	d819      	bhi.n	8002400 <HAL_I2C_Init+0x13c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e59      	subs	r1, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023da:	1c59      	adds	r1, r3, #1
 80023dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_I2C_Init+0x138>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e59      	subs	r1, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fa:	e051      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e04f      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d111      	bne.n	800242c <HAL_I2C_Init+0x168>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	440b      	add	r3, r1
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e012      	b.n	8002452 <HAL_I2C_Init+0x18e>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Init+0x196>
 8002456:	2301      	movs	r3, #1
 8002458:	e022      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10e      	bne.n	8002480 <HAL_I2C_Init+0x1bc>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e58      	subs	r0, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	440b      	add	r3, r1
 8002470:	fbb0 f3f3 	udiv	r3, r0, r3
 8002474:	3301      	adds	r3, #1
 8002476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247e:	e00f      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e58      	subs	r0, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	0099      	lsls	r1, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	fbb0 f3f3 	udiv	r3, r0, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	6809      	ldr	r1, [r1, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6911      	ldr	r1, [r2, #16]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	000186a0 	.word	0x000186a0
 800253c:	001e847f 	.word	0x001e847f
 8002540:	003d08ff 	.word	0x003d08ff
 8002544:	431bde83 	.word	0x431bde83
 8002548:	10624dd3 	.word	0x10624dd3

0800254c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08c      	sub	sp, #48	; 0x30
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4603      	mov	r3, r0
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	460b      	mov	r3, r1
 8002574:	813b      	strh	r3, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800257a:	f7ff f81f 	bl	80015bc <HAL_GetTick>
 800257e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	f040 8208 	bne.w	800299e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	2319      	movs	r3, #25
 8002594:	2201      	movs	r2, #1
 8002596:	497b      	ldr	r1, [pc, #492]	; (8002784 <HAL_I2C_Mem_Read+0x224>)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 faef 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
 80025a6:	e1fb      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_I2C_Mem_Read+0x56>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e1f4      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d007      	beq.n	80025dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2222      	movs	r2, #34	; 0x22
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2240      	movs	r2, #64	; 0x40
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a5b      	ldr	r2, [pc, #364]	; (8002788 <HAL_I2C_Mem_Read+0x228>)
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800261e:	88f8      	ldrh	r0, [r7, #6]
 8002620:	893a      	ldrh	r2, [r7, #8]
 8002622:	8979      	ldrh	r1, [r7, #10]
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4603      	mov	r3, r0
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f9bc 	bl	80029ac <I2C_RequestMemoryRead>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e1b0      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	d113      	bne.n	800266e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e184      	b.n	8002978 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	2b01      	cmp	r3, #1
 8002674:	d11b      	bne.n	80026ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e164      	b.n	8002978 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d11b      	bne.n	80026ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	e144      	b.n	8002978 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002704:	e138      	b.n	8002978 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	2b03      	cmp	r3, #3
 800270c:	f200 80f1 	bhi.w	80028f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	2b01      	cmp	r3, #1
 8002716:	d123      	bne.n	8002760 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fb44 	bl	8002daa <I2C_WaitOnRXNEFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e139      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800275e:	e10b      	b.n	8002978 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	2b02      	cmp	r3, #2
 8002766:	d14e      	bne.n	8002806 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	2200      	movs	r2, #0
 8002770:	4906      	ldr	r1, [pc, #24]	; (800278c <HAL_I2C_Mem_Read+0x22c>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fa02 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e10e      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000
 800278c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002804:	e0b8      	b.n	8002978 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	2200      	movs	r2, #0
 800280e:	4966      	ldr	r1, [pc, #408]	; (80029a8 <HAL_I2C_Mem_Read+0x448>)
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f9b3 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0bf      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	2200      	movs	r2, #0
 800286a:	494f      	ldr	r1, [pc, #316]	; (80029a8 <HAL_I2C_Mem_Read+0x448>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f985 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e091      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f0:	e042      	b.n	8002978 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa57 	bl	8002daa <I2C_WaitOnRXNEFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e04c      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b04      	cmp	r3, #4
 8002944:	d118      	bne.n	8002978 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f aec2 	bne.w	8002706 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3728      	adds	r7, #40	; 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	00010004 	.word	0x00010004

080029ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	460b      	mov	r3, r1
 80029c0:	813b      	strh	r3, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f8c2 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0c:	d103      	bne.n	8002a16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0aa      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	4952      	ldr	r1, [pc, #328]	; (8002b78 <I2C_RequestMemoryRead+0x1cc>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f8fa 	bl	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e097      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	6a39      	ldr	r1, [r7, #32]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f964 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d107      	bne.n	8002a7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e076      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a88:	893b      	ldrh	r3, [r7, #8]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	e021      	b.n	8002ad8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f93e 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d107      	bne.n	8002aca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e050      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ace:	893b      	ldrh	r3, [r7, #8]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	6a39      	ldr	r1, [r7, #32]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f923 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d107      	bne.n	8002b00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e035      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f82b 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3a:	d103      	bne.n	8002b44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e013      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b48:	897b      	ldrh	r3, [r7, #10]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	6a3a      	ldr	r2, [r7, #32]
 8002b5c:	4906      	ldr	r1, [pc, #24]	; (8002b78 <I2C_RequestMemoryRead+0x1cc>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f863 	bl	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	00010002 	.word	0x00010002

08002b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8c:	e025      	b.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d021      	beq.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7fe fd11 	bl	80015bc <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d116      	bne.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e023      	b.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10d      	bne.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	e00c      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d0b6      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c38:	e051      	b.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d123      	bne.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0204 	orr.w	r2, r3, #4
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e046      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d021      	beq.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fe fc8f 	bl	80015bc <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d116      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e020      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10c      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e00b      	b.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d18d      	bne.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d34:	e02d      	b.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f88d 	bl	8002e56 <I2C_IsAcknowledgeFailed>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e02d      	b.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d021      	beq.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe fc35 	bl	80015bc <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d1ca      	bne.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002db6:	e042      	b.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d119      	bne.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f06f 0210 	mvn.w	r2, #16
 8002dce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e029      	b.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe fbdf 	bl	80015bc <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d116      	bne.n	8002e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d1b5      	bne.n	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d11b      	bne.n	8002ea6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d129      	bne.n	8002f1e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2224      	movs	r2, #36	; 0x24
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0210 	bic.w	r2, r2, #16
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d12a      	bne.n	8002f9c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2224      	movs	r2, #36	; 0x24
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f66:	89fb      	ldrh	r3, [r7, #14]
 8002f68:	f023 030f 	bic.w	r3, r3, #15
 8002f6c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	89fa      	ldrh	r2, [r7, #14]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0cc      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d90c      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b63      	ldr	r3, [pc, #396]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b8      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003000:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a58      	ldr	r2, [pc, #352]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a52      	ldr	r2, [pc, #328]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	494d      	ldr	r1, [pc, #308]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d044      	beq.n	80030cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d119      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d003      	beq.n	800306a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003066:	2b03      	cmp	r3, #3
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e067      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4934      	ldr	r1, [pc, #208]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800309c:	f7fe fa8e 	bl	80015bc <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7fe fa8a 	bl	80015bc <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e04f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 020c 	and.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1eb      	bne.n	80030a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d20c      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e032      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4916      	ldr	r1, [pc, #88]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	490e      	ldr	r1, [pc, #56]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003132:	f000 f821 	bl	8003178 <HAL_RCC_GetSysClockFreq>
 8003136:	4602      	mov	r2, r0
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	490a      	ldr	r1, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	5ccb      	ldrb	r3, [r1, r3]
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe f940 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023c00 	.word	0x40023c00
 8003168:	40023800 	.word	0x40023800
 800316c:	08006124 	.word	0x08006124
 8003170:	20000000 	.word	0x20000000
 8003174:	20000004 	.word	0x20000004

08003178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800317e:	2100      	movs	r1, #0
 8003180:	6079      	str	r1, [r7, #4]
 8003182:	2100      	movs	r1, #0
 8003184:	60f9      	str	r1, [r7, #12]
 8003186:	2100      	movs	r1, #0
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800318a:	2100      	movs	r1, #0
 800318c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318e:	4952      	ldr	r1, [pc, #328]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003190:	6889      	ldr	r1, [r1, #8]
 8003192:	f001 010c 	and.w	r1, r1, #12
 8003196:	2908      	cmp	r1, #8
 8003198:	d00d      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800319a:	2908      	cmp	r1, #8
 800319c:	f200 8094 	bhi.w	80032c8 <HAL_RCC_GetSysClockFreq+0x150>
 80031a0:	2900      	cmp	r1, #0
 80031a2:	d002      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x32>
 80031a4:	2904      	cmp	r1, #4
 80031a6:	d003      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x38>
 80031a8:	e08e      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031aa:	4b4c      	ldr	r3, [pc, #304]	; (80032dc <HAL_RCC_GetSysClockFreq+0x164>)
 80031ac:	60bb      	str	r3, [r7, #8]
       break;
 80031ae:	e08e      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b0:	4b4b      	ldr	r3, [pc, #300]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80031b2:	60bb      	str	r3, [r7, #8]
      break;
 80031b4:	e08b      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b6:	4948      	ldr	r1, [pc, #288]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031b8:	6849      	ldr	r1, [r1, #4]
 80031ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80031be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c0:	4945      	ldr	r1, [pc, #276]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031c2:	6849      	ldr	r1, [r1, #4]
 80031c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d024      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031cc:	4942      	ldr	r1, [pc, #264]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ce:	6849      	ldr	r1, [r1, #4]
 80031d0:	0989      	lsrs	r1, r1, #6
 80031d2:	4608      	mov	r0, r1
 80031d4:	f04f 0100 	mov.w	r1, #0
 80031d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031dc:	f04f 0500 	mov.w	r5, #0
 80031e0:	ea00 0204 	and.w	r2, r0, r4
 80031e4:	ea01 0305 	and.w	r3, r1, r5
 80031e8:	493d      	ldr	r1, [pc, #244]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80031ea:	fb01 f003 	mul.w	r0, r1, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	fb01 f102 	mul.w	r1, r1, r2
 80031f4:	1844      	adds	r4, r0, r1
 80031f6:	493a      	ldr	r1, [pc, #232]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80031f8:	fba2 0101 	umull	r0, r1, r2, r1
 80031fc:	1863      	adds	r3, r4, r1
 80031fe:	4619      	mov	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	461a      	mov	r2, r3
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	f7fd f85a 	bl	80002c0 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e04a      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	099b      	lsrs	r3, r3, #6
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	ea02 0400 	and.w	r4, r2, r0
 800322e:	ea03 0501 	and.w	r5, r3, r1
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	014b      	lsls	r3, r1, #5
 8003240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003244:	0142      	lsls	r2, r0, #5
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	1b00      	subs	r0, r0, r4
 800324c:	eb61 0105 	sbc.w	r1, r1, r5
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	018b      	lsls	r3, r1, #6
 800325a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800325e:	0182      	lsls	r2, r0, #6
 8003260:	1a12      	subs	r2, r2, r0
 8003262:	eb63 0301 	sbc.w	r3, r3, r1
 8003266:	f04f 0000 	mov.w	r0, #0
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	00d9      	lsls	r1, r3, #3
 8003270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003274:	00d0      	lsls	r0, r2, #3
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	1912      	adds	r2, r2, r4
 800327c:	eb45 0303 	adc.w	r3, r5, r3
 8003280:	f04f 0000 	mov.w	r0, #0
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	0299      	lsls	r1, r3, #10
 800328a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800328e:	0290      	lsls	r0, r2, #10
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	461a      	mov	r2, r3
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	f7fd f80e 	bl	80002c0 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4613      	mov	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	3301      	adds	r3, #1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	60bb      	str	r3, [r7, #8]
      break;
 80032c6:	e002      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <HAL_RCC_GetSysClockFreq+0x164>)
 80032ca:	60bb      	str	r3, [r7, #8]
      break;
 80032cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ce:	68bb      	ldr	r3, [r7, #8]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bdb0      	pop	{r4, r5, r7, pc}
 80032d8:	40023800 	.word	0x40023800
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	017d7840 	.word	0x017d7840

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003300:	f7ff fff0 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0a9b      	lsrs	r3, r3, #10
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	08006134 	.word	0x08006134

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003328:	f7ff ffdc 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0b5b      	lsrs	r3, r3, #13
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	08006134 	.word	0x08006134

0800334c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	220f      	movs	r2, #15
 800335a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_GetClockConfig+0x5c>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003368:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <HAL_RCC_GetClockConfig+0x5c>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	08db      	lsrs	r3, r3, #3
 8003386:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RCC_GetClockConfig+0x60>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0207 	and.w	r2, r3, #7
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	601a      	str	r2, [r3, #0]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40023c00 	.word	0x40023c00

080033b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e270      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d075      	beq.n	80034ba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033ce:	4ba3      	ldr	r3, [pc, #652]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d00c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033da:	4ba0      	ldr	r3, [pc, #640]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d112      	bne.n	800340c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e6:	4b9d      	ldr	r3, [pc, #628]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f2:	d10b      	bne.n	800340c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	4b99      	ldr	r3, [pc, #612]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d05b      	beq.n	80034b8 <HAL_RCC_OscConfig+0x108>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d157      	bne.n	80034b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e24b      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003414:	d106      	bne.n	8003424 <HAL_RCC_OscConfig+0x74>
 8003416:	4b91      	ldr	r3, [pc, #580]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a90      	ldr	r2, [pc, #576]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e01d      	b.n	8003460 <HAL_RCC_OscConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x98>
 800342e:	4b8b      	ldr	r3, [pc, #556]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a8a      	ldr	r2, [pc, #552]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a87      	ldr	r2, [pc, #540]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0xb0>
 8003448:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a83      	ldr	r2, [pc, #524]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a80      	ldr	r2, [pc, #512]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800345a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe f8a8 	bl	80015bc <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe f8a4 	bl	80015bc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e210      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0xc0>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f894 	bl	80015bc <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe f890 	bl	80015bc <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1fc      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0xe8>
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d063      	beq.n	800358e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034c6:	4b65      	ldr	r3, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d2:	4b62      	ldr	r3, [pc, #392]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d11c      	bne.n	8003518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b5f      	ldr	r3, [pc, #380]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	4b5c      	ldr	r3, [pc, #368]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x152>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1d0      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b56      	ldr	r3, [pc, #344]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4952      	ldr	r1, [pc, #328]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	e03a      	b.n	800358e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_RCC_OscConfig+0x2b0>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe f849 	bl	80015bc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352e:	f7fe f845 	bl	80015bc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e1b1      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4940      	ldr	r1, [pc, #256]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	e015      	b.n	800358e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_OscConfig+0x2b0>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe f828 	bl	80015bc <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003570:	f7fe f824 	bl	80015bc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e190      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d030      	beq.n	80035fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a2:	4b30      	ldr	r3, [pc, #192]	; (8003664 <HAL_RCC_OscConfig+0x2b4>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fe f808 	bl	80015bc <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fe f804 	bl	80015bc <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e170      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x200>
 80035ce:	e015      	b.n	80035fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_OscConfig+0x2b4>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fd fff1 	bl	80015bc <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035de:	f7fd ffed 	bl	80015bc <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e159      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 80035f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a0 	beq.w	800374a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCC_OscConfig+0x2ac>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x2b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d121      	bne.n	800368a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_RCC_OscConfig+0x2b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_RCC_OscConfig+0x2b8>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fd ffb3 	bl	80015bc <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	e011      	b.n	800367e <HAL_RCC_OscConfig+0x2ce>
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	42470000 	.word	0x42470000
 8003664:	42470e80 	.word	0x42470e80
 8003668:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366c:	f7fd ffa6 	bl	80015bc <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e112      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b8b      	ldr	r3, [pc, #556]	; (80038ac <HAL_RCC_OscConfig+0x4fc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
 8003692:	4b87      	ldr	r3, [pc, #540]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a86      	ldr	r2, [pc, #536]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	e01c      	b.n	80036da <HAL_RCC_OscConfig+0x32a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x312>
 80036a8:	4b81      	ldr	r3, [pc, #516]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a80      	ldr	r2, [pc, #512]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
 80036b4:	4b7e      	ldr	r3, [pc, #504]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	e00b      	b.n	80036da <HAL_RCC_OscConfig+0x32a>
 80036c2:	4b7b      	ldr	r3, [pc, #492]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a7a      	ldr	r2, [pc, #488]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	4b78      	ldr	r3, [pc, #480]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a77      	ldr	r2, [pc, #476]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d015      	beq.n	800370e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd ff6b 	bl	80015bc <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fd ff67 	bl	80015bc <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0d1      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	4b6b      	ldr	r3, [pc, #428]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ee      	beq.n	80036ea <HAL_RCC_OscConfig+0x33a>
 800370c:	e014      	b.n	8003738 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fd ff55 	bl	80015bc <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fd ff51 	bl	80015bc <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0bb      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372c:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4b5c      	ldr	r3, [pc, #368]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a5b      	ldr	r2, [pc, #364]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80a7 	beq.w	80038a2 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003754:	4b56      	ldr	r3, [pc, #344]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d060      	beq.n	8003822 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d145      	bne.n	80037f4 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b52      	ldr	r3, [pc, #328]	; (80038b4 <HAL_RCC_OscConfig+0x504>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd ff25 	bl	80015bc <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fd ff21 	bl	80015bc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e08d      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003788:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	019b      	lsls	r3, r3, #6
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	061b      	lsls	r3, r3, #24
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	071b      	lsls	r3, r3, #28
 80037c0:	493b      	ldr	r1, [pc, #236]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_OscConfig+0x504>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd fef6 	bl	80015bc <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd fef2 	bl	80015bc <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e05e      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x424>
 80037f2:	e056      	b.n	80038a2 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <HAL_RCC_OscConfig+0x504>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd fedf 	bl	80015bc <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003802:	f7fd fedb 	bl	80015bc <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e047      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x452>
 8003820:	e03f      	b.n	80038a2 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e03a      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d030      	beq.n	800389e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d129      	bne.n	800389e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d122      	bne.n	800389e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003864:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003866:	4293      	cmp	r3, r2
 8003868:	d119      	bne.n	800389e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d10f      	bne.n	800389e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d107      	bne.n	800389e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40007000 	.word	0x40007000
 80038b0:	40023800 	.word	0x40023800
 80038b4:	42470060 	.word	0x42470060

080038b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e041      	b.n	800394e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f839 	bl	8003956 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f000 f9d8 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04e      	b.n	8003a22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <HAL_TIM_Base_Start_IT+0xc4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d022      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d01d      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <HAL_TIM_Base_Start_IT+0xc8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d018      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <HAL_TIM_Base_Start_IT+0xcc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <HAL_TIM_Base_Start_IT+0xd0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_TIM_Base_Start_IT+0xd4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_TIM_Base_Start_IT+0xd8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x80>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_TIM_Base_Start_IT+0xdc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d111      	bne.n	8003a10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d010      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0e:	e007      	b.n	8003a20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40010400 	.word	0x40010400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40001800 	.word	0x40001800

08003a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d122      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d11b      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0202 	mvn.w	r2, #2
 8003a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8ee 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8e0 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8f1 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d122      	bne.n	8003afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0204 	mvn.w	r2, #4
 8003acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8c4 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8b6 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f8c7 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0208 	mvn.w	r2, #8
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f89a 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f88c 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f89d 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0210 	mvn.w	r2, #16
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f870 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f862 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f873 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0201 	mvn.w	r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fa74 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b80      	cmp	r3, #128	; 0x80
 8003bdc:	d10e      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d107      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f902 	bl	8003e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d10e      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d107      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f838 	bl	8003c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d10e      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d107      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0220 	mvn.w	r2, #32
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8cc 	bl	8003dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a40      	ldr	r2, [pc, #256]	; (8003dc0 <TIM_Base_SetConfig+0x114>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cca:	d00f      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a3d      	ldr	r2, [pc, #244]	; (8003dc4 <TIM_Base_SetConfig+0x118>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <TIM_Base_SetConfig+0x11c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <TIM_Base_SetConfig+0x120>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <TIM_Base_SetConfig+0x124>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d108      	bne.n	8003cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2f      	ldr	r2, [pc, #188]	; (8003dc0 <TIM_Base_SetConfig+0x114>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d027      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a2c      	ldr	r2, [pc, #176]	; (8003dc4 <TIM_Base_SetConfig+0x118>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d023      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2b      	ldr	r2, [pc, #172]	; (8003dc8 <TIM_Base_SetConfig+0x11c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <TIM_Base_SetConfig+0x120>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <TIM_Base_SetConfig+0x124>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d017      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a28      	ldr	r2, [pc, #160]	; (8003dd4 <TIM_Base_SetConfig+0x128>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <TIM_Base_SetConfig+0x12c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00f      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <TIM_Base_SetConfig+0x130>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <TIM_Base_SetConfig+0x134>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <TIM_Base_SetConfig+0x138>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a23      	ldr	r2, [pc, #140]	; (8003de8 <TIM_Base_SetConfig+0x13c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <TIM_Base_SetConfig+0x114>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_Base_SetConfig+0xf8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <TIM_Base_SetConfig+0x124>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d103      	bne.n	8003dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	615a      	str	r2, [r3, #20]
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800
 8003dcc:	40000c00 	.word	0x40000c00
 8003dd0:	40010400 	.word	0x40010400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800
 8003de0:	40001800 	.word	0x40001800
 8003de4:	40001c00 	.word	0x40001c00
 8003de8:	40002000 	.word	0x40002000

08003dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e03f      	b.n	8003ea6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f837 	bl	8003eae <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	; 0x24
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fd5b 	bl	8004914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d153      	bne.n	8003f86 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_UART_Transmit_DMA+0x26>
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e04c      	b.n	8003f88 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Transmit_DMA+0x38>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e045      	b.n	8003f88 <HAL_UART_Transmit_DMA+0xc4>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2221      	movs	r2, #33	; 0x21
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <HAL_UART_Transmit_DMA+0xcc>)
 8003f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_UART_Transmit_DMA+0xd0>)
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_UART_Transmit_DMA+0xd4>)
 8003f3a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	2200      	movs	r2, #0
 8003f42:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	6819      	ldr	r1, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3304      	adds	r3, #4
 8003f58:	461a      	mov	r2, r3
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f7fd fcca 	bl	80018f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f68:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f80:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	080043d1 	.word	0x080043d1
 8003f94:	08004423 	.word	0x08004423
 8003f98:	0800450b 	.word	0x0800450b

08003f9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d11d      	bne.n	8003ff2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_Receive_DMA+0x26>
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e016      	b.n	8003ff4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Receive_DMA+0x38>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e00f      	b.n	8003ff4 <HAL_UART_Receive_DMA+0x58>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fad9 	bl	80045a0 <UART_Start_Receive_DMA>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	e000      	b.n	8003ff4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
  }
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_UART_IRQHandler+0x52>
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fbcd 	bl	80047e6 <UART_Receive_IT>
      return;
 800404c:	e17c      	b.n	8004348 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80b1 	beq.w	80041b8 <HAL_UART_IRQHandler+0x1bc>
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_UART_IRQHandler+0x70>
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80a6 	beq.w	80041b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_UART_IRQHandler+0x90>
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f043 0201 	orr.w	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_UART_IRQHandler+0xb0>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0202 	orr.w	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_UART_IRQHandler+0xd0>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0204 	orr.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00f      	beq.n	80040f6 <HAL_UART_IRQHandler+0xfa>
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <HAL_UART_IRQHandler+0xee>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f043 0208 	orr.w	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 811f 	beq.w	800433e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_UART_IRQHandler+0x11e>
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fb66 	bl	80047e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <HAL_UART_IRQHandler+0x146>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d031      	beq.n	80041a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 faa6 	bl	8004694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d123      	bne.n	800419e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004164:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	4a77      	ldr	r2, [pc, #476]	; (8004350 <HAL_UART_IRQHandler+0x354>)
 8004174:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd fc82 	bl	8001a84 <HAL_DMA_Abort_IT>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004190:	4610      	mov	r0, r2
 8004192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e00e      	b.n	80041b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f904 	bl	80043a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	e00a      	b.n	80041b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f900 	bl	80043a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	e006      	b.n	80041b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f8fc 	bl	80043a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041b2:	e0c4      	b.n	800433e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	bf00      	nop
    return;
 80041b6:	e0c2      	b.n	800433e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 80a2 	bne.w	8004306 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 809c 	beq.w	8004306 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8096 	beq.w	8004306 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d14f      	bne.n	800429e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004208:	8a3b      	ldrh	r3, [r7, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8099 	beq.w	8004342 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004214:	8a3a      	ldrh	r2, [r7, #16]
 8004216:	429a      	cmp	r2, r3
 8004218:	f080 8093 	bcs.w	8004342 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8a3a      	ldrh	r2, [r7, #16]
 8004220:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422c:	d02b      	beq.n	8004286 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800423c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0210 	bic.w	r2, r2, #16
 800427a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd fb8f 	bl	80019a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800428e:	b29b      	uxth	r3, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	b29b      	uxth	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f88e 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800429c:	e051      	b.n	8004342 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d047      	beq.n	8004346 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80042b6:	8a7b      	ldrh	r3, [r7, #18]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d044      	beq.n	8004346 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042ca:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0210 	bic.w	r2, r2, #16
 80042f8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042fa:	8a7b      	ldrh	r3, [r7, #18]
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f85a 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004304:	e01f      	b.n	8004346 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_UART_IRQHandler+0x326>
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f9fb 	bl	8004716 <UART_Transmit_IT>
    return;
 8004320:	e012      	b.n	8004348 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <HAL_UART_IRQHandler+0x34c>
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa3d 	bl	80047b6 <UART_EndTransmit_IT>
    return;
 800433c:	e004      	b.n	8004348 <HAL_UART_IRQHandler+0x34c>
    return;
 800433e:	bf00      	nop
 8004340:	e002      	b.n	8004348 <HAL_UART_IRQHandler+0x34c>
      return;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <HAL_UART_IRQHandler+0x34c>
      return;
 8004346:	bf00      	nop
  }
}
 8004348:	3728      	adds	r7, #40	; 0x28
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	080046ef 	.word	0x080046ef

08004354 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d113      	bne.n	8004414 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004400:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004410:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004412:	e002      	b.n	800441a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff ff9d 	bl	8004354 <HAL_UART_TxCpltCallback>
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff ff99 	bl	8004368 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d12a      	bne.n	80044b0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800446e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0210 	bic.w	r2, r2, #16
 80044ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d106      	bne.n	80044c6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044bc:	4619      	mov	r1, r3
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7ff ff7a 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044c4:	e002      	b.n	80044cc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff ff58 	bl	800437c <HAL_UART_RxCpltCallback>
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d108      	bne.n	80044fc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4619      	mov	r1, r3
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff ff5f 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044fa:	e002      	b.n	8004502 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff ff47 	bl	8004390 <HAL_UART_RxHalfCpltCallback>
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	bf0c      	ite	eq
 800452a:	2301      	moveq	r3, #1
 800452c:	2300      	movne	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b21      	cmp	r3, #33	; 0x21
 800453c:	d108      	bne.n	8004550 <UART_DMAError+0x46>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800454a:	68b8      	ldr	r0, [r7, #8]
 800454c:	f000 f88c 	bl	8004668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b22      	cmp	r3, #34	; 0x22
 8004570:	d108      	bne.n	8004584 <UART_DMAError+0x7a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f000 f888 	bl	8004694 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004590:	68b8      	ldr	r0, [r7, #8]
 8004592:	f7ff ff07 	bl	80043a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2222      	movs	r2, #34	; 0x22
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	4a23      	ldr	r2, [pc, #140]	; (800465c <UART_Start_Receive_DMA+0xbc>)
 80045ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	4a22      	ldr	r2, [pc, #136]	; (8004660 <UART_Start_Receive_DMA+0xc0>)
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	4a21      	ldr	r2, [pc, #132]	; (8004664 <UART_Start_Receive_DMA+0xc4>)
 80045de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	2200      	movs	r2, #0
 80045e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045e8:	f107 0308 	add.w	r3, r7, #8
 80045ec:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	f7fd f978 	bl	80018f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004630:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004650:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	0800443f 	.word	0x0800443f
 8004660:	080044d5 	.word	0x080044d5
 8004664:	0800450b 	.word	0x0800450b

08004668 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800467e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d107      	bne.n	80046d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0210 	bic.w	r2, r2, #16
 80046d2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff fe4b 	bl	80043a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b21      	cmp	r3, #33	; 0x21
 8004728:	d13e      	bne.n	80047a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004732:	d114      	bne.n	800475e <UART_Transmit_IT+0x48>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d110      	bne.n	800475e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	621a      	str	r2, [r3, #32]
 800475c:	e008      	b.n	8004770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6211      	str	r1, [r2, #32]
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4619      	mov	r1, r3
 800477e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fdbc 	bl	8004354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b22      	cmp	r3, #34	; 0x22
 80047f8:	f040 8087 	bne.w	800490a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004804:	d117      	bne.n	8004836 <UART_Receive_IT+0x50>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d113      	bne.n	8004836 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	b29a      	uxth	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	1c9a      	adds	r2, r3, #2
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
 8004834:	e026      	b.n	8004884 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004848:	d007      	beq.n	800485a <UART_Receive_IT+0x74>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <UART_Receive_IT+0x82>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e008      	b.n	800487a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004874:	b2da      	uxtb	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29b      	uxth	r3, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004894:	2b00      	cmp	r3, #0
 8004896:	d136      	bne.n	8004906 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0220 	bic.w	r2, r2, #32
 80048a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d10e      	bne.n	80048f6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0210 	bic.w	r2, r2, #16
 80048e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fd62 	bl	80043b8 <HAL_UARTEx_RxEventCallback>
 80048f4:	e002      	b.n	80048fc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fd40 	bl	800437c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e002      	b.n	800490c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004918:	b09f      	sub	sp, #124	; 0x7c
 800491a:	af00      	add	r7, sp, #0
 800491c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492a:	68d9      	ldr	r1, [r3, #12]
 800492c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	ea40 0301 	orr.w	r3, r0, r1
 8004934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	431a      	orrs	r2, r3
 8004940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	431a      	orrs	r2, r3
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	4313      	orrs	r3, r2
 800494c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004958:	f021 010c 	bic.w	r1, r1, #12
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004962:	430b      	orrs	r3, r1
 8004964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	6999      	ldr	r1, [r3, #24]
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	ea40 0301 	orr.w	r3, r0, r1
 800497c:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <UART_SetConfig+0x218>)
 8004984:	429a      	cmp	r2, r3
 8004986:	d00e      	beq.n	80049a6 <UART_SetConfig+0x92>
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b68      	ldr	r3, [pc, #416]	; (8004b30 <UART_SetConfig+0x21c>)
 800498e:	429a      	cmp	r2, r3
 8004990:	d009      	beq.n	80049a6 <UART_SetConfig+0x92>
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b67      	ldr	r3, [pc, #412]	; (8004b34 <UART_SetConfig+0x220>)
 8004998:	429a      	cmp	r2, r3
 800499a:	d004      	beq.n	80049a6 <UART_SetConfig+0x92>
 800499c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b65      	ldr	r3, [pc, #404]	; (8004b38 <UART_SetConfig+0x224>)
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d103      	bne.n	80049ae <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049a6:	f7fe fcbd 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80049aa:	6778      	str	r0, [r7, #116]	; 0x74
 80049ac:	e002      	b.n	80049b4 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ae:	f7fe fca5 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80049b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049bc:	f040 80c0 	bne.w	8004b40 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c2:	461c      	mov	r4, r3
 80049c4:	f04f 0500 	mov.w	r5, #0
 80049c8:	4622      	mov	r2, r4
 80049ca:	462b      	mov	r3, r5
 80049cc:	1891      	adds	r1, r2, r2
 80049ce:	6439      	str	r1, [r7, #64]	; 0x40
 80049d0:	415b      	adcs	r3, r3
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
 80049d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049d8:	1912      	adds	r2, r2, r4
 80049da:	eb45 0303 	adc.w	r3, r5, r3
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	00d9      	lsls	r1, r3, #3
 80049e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049ec:	00d0      	lsls	r0, r2, #3
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	1911      	adds	r1, r2, r4
 80049f4:	6639      	str	r1, [r7, #96]	; 0x60
 80049f6:	416b      	adcs	r3, r5
 80049f8:	667b      	str	r3, [r7, #100]	; 0x64
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	1891      	adds	r1, r2, r2
 8004a06:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a08:	415b      	adcs	r3, r3
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a14:	f7fb fc54 	bl	80002c0 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <UART_SetConfig+0x228>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	011e      	lsls	r6, r3, #4
 8004a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a28:	461c      	mov	r4, r3
 8004a2a:	f04f 0500 	mov.w	r5, #0
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	6339      	str	r1, [r7, #48]	; 0x30
 8004a36:	415b      	adcs	r3, r3
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a3e:	1912      	adds	r2, r2, r4
 8004a40:	eb45 0303 	adc.w	r3, r5, r3
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	00d9      	lsls	r1, r3, #3
 8004a4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a52:	00d0      	lsls	r0, r2, #3
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	1911      	adds	r1, r2, r4
 8004a5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a5c:	416b      	adcs	r3, r5
 8004a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	1891      	adds	r1, r2, r2
 8004a6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a6e:	415b      	adcs	r3, r3
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a7a:	f7fb fc21 	bl	80002c0 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <UART_SetConfig+0x228>)
 8004a84:	fba3 1302 	umull	r1, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	2164      	movs	r1, #100	; 0x64
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	3332      	adds	r3, #50	; 0x32
 8004a96:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <UART_SetConfig+0x228>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aa4:	441e      	add	r6, r3
 8004aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	1894      	adds	r4, r2, r2
 8004ab4:	623c      	str	r4, [r7, #32]
 8004ab6:	415b      	adcs	r3, r3
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004abe:	1812      	adds	r2, r2, r0
 8004ac0:	eb41 0303 	adc.w	r3, r1, r3
 8004ac4:	f04f 0400 	mov.w	r4, #0
 8004ac8:	f04f 0500 	mov.w	r5, #0
 8004acc:	00dd      	lsls	r5, r3, #3
 8004ace:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ad2:	00d4      	lsls	r4, r2, #3
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	1814      	adds	r4, r2, r0
 8004ada:	653c      	str	r4, [r7, #80]	; 0x50
 8004adc:	414b      	adcs	r3, r1
 8004ade:	657b      	str	r3, [r7, #84]	; 0x54
 8004ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	1891      	adds	r1, r2, r2
 8004aec:	61b9      	str	r1, [r7, #24]
 8004aee:	415b      	adcs	r3, r3
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004afa:	f7fb fbe1 	bl	80002c0 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <UART_SetConfig+0x228>)
 8004b04:	fba3 1302 	umull	r1, r3, r3, r2
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	2164      	movs	r1, #100	; 0x64
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	3332      	adds	r3, #50	; 0x32
 8004b16:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <UART_SetConfig+0x228>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	f003 0207 	and.w	r2, r3, #7
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4432      	add	r2, r6
 8004b28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b2a:	e0c3      	b.n	8004cb4 <UART_SetConfig+0x3a0>
 8004b2c:	40011000 	.word	0x40011000
 8004b30:	40011400 	.word	0x40011400
 8004b34:	40011800 	.word	0x40011800
 8004b38:	40011c00 	.word	0x40011c00
 8004b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b42:	461c      	mov	r4, r3
 8004b44:	f04f 0500 	mov.w	r5, #0
 8004b48:	4622      	mov	r2, r4
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	6139      	str	r1, [r7, #16]
 8004b50:	415b      	adcs	r3, r3
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b58:	1912      	adds	r2, r2, r4
 8004b5a:	eb45 0303 	adc.w	r3, r5, r3
 8004b5e:	f04f 0000 	mov.w	r0, #0
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	00d9      	lsls	r1, r3, #3
 8004b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b6c:	00d0      	lsls	r0, r2, #3
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	eb12 0804 	adds.w	r8, r2, r4
 8004b76:	eb43 0905 	adc.w	r9, r3, r5
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	008b      	lsls	r3, r1, #2
 8004b8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b92:	0082      	lsls	r2, r0, #2
 8004b94:	4640      	mov	r0, r8
 8004b96:	4649      	mov	r1, r9
 8004b98:	f7fb fb92 	bl	80002c0 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4b47      	ldr	r3, [pc, #284]	; (8004cc0 <UART_SetConfig+0x3ac>)
 8004ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	011e      	lsls	r6, r3, #4
 8004baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bac:	4618      	mov	r0, r3
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	1894      	adds	r4, r2, r2
 8004bb8:	60bc      	str	r4, [r7, #8]
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bc2:	1812      	adds	r2, r2, r0
 8004bc4:	eb41 0303 	adc.w	r3, r1, r3
 8004bc8:	f04f 0400 	mov.w	r4, #0
 8004bcc:	f04f 0500 	mov.w	r5, #0
 8004bd0:	00dd      	lsls	r5, r3, #3
 8004bd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bd6:	00d4      	lsls	r4, r2, #3
 8004bd8:	4622      	mov	r2, r4
 8004bda:	462b      	mov	r3, r5
 8004bdc:	1814      	adds	r4, r2, r0
 8004bde:	64bc      	str	r4, [r7, #72]	; 0x48
 8004be0:	414b      	adcs	r3, r1
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f04f 0100 	mov.w	r1, #0
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bfc:	0082      	lsls	r2, r0, #2
 8004bfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c02:	f7fb fb5d 	bl	80002c0 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <UART_SetConfig+0x3ac>)
 8004c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	2164      	movs	r1, #100	; 0x64
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	3332      	adds	r3, #50	; 0x32
 8004c1e:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <UART_SetConfig+0x3ac>)
 8004c20:	fba2 2303 	umull	r2, r3, r2, r3
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c2a:	441e      	add	r6, r3
 8004c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f04f 0100 	mov.w	r1, #0
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	1894      	adds	r4, r2, r2
 8004c3a:	603c      	str	r4, [r7, #0]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c44:	1812      	adds	r2, r2, r0
 8004c46:	eb41 0303 	adc.w	r3, r1, r3
 8004c4a:	f04f 0400 	mov.w	r4, #0
 8004c4e:	f04f 0500 	mov.w	r5, #0
 8004c52:	00dd      	lsls	r5, r3, #3
 8004c54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c58:	00d4      	lsls	r4, r2, #3
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	eb12 0a00 	adds.w	sl, r2, r0
 8004c62:	eb43 0b01 	adc.w	fp, r3, r1
 8004c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	008b      	lsls	r3, r1, #2
 8004c7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c7e:	0082      	lsls	r2, r0, #2
 8004c80:	4650      	mov	r0, sl
 8004c82:	4659      	mov	r1, fp
 8004c84:	f7fb fb1c 	bl	80002c0 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <UART_SetConfig+0x3ac>)
 8004c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2164      	movs	r1, #100	; 0x64
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	3332      	adds	r3, #50	; 0x32
 8004ca0:	4a07      	ldr	r2, [pc, #28]	; (8004cc0 <UART_SetConfig+0x3ac>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	f003 020f 	and.w	r2, r3, #15
 8004cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4432      	add	r2, r6
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	377c      	adds	r7, #124	; 0x7c
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbe:	bf00      	nop
 8004cc0:	51eb851f 	.word	0x51eb851f

08004cc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0208 	add.w	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f103 0208 	add.w	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f103 0208 	add.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d103      	bne.n	8004d86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e00c      	b.n	8004da0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e002      	b.n	8004d94 <vListInsert+0x2e>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d2f6      	bcs.n	8004d8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6892      	ldr	r2, [r2, #8]
 8004dee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6852      	ldr	r2, [r2, #4]
 8004df8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d103      	bne.n	8004e0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af04      	add	r7, sp, #16
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	61fb      	str	r3, [r7, #28]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e72:	2354      	movs	r3, #84	; 0x54
 8004e74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b54      	cmp	r3, #84	; 0x54
 8004e7a:	d00a      	beq.n	8004e92 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	61bb      	str	r3, [r7, #24]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01e      	beq.n	8004ed8 <xTaskCreateStatic+0xac>
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01b      	beq.n	8004ed8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9303      	str	r3, [sp, #12]
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	9302      	str	r3, [sp, #8]
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f850 	bl	8004f70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ed2:	f000 f8d5 	bl	8005080 <prvAddNewTaskToReadyList>
 8004ed6:	e001      	b.n	8004edc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004edc:	697b      	ldr	r3, [r7, #20]
	}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3728      	adds	r7, #40	; 0x28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b08c      	sub	sp, #48	; 0x30
 8004eea:	af04      	add	r7, sp, #16
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fec4 	bl	8005c88 <pvPortMalloc>
 8004f00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00e      	beq.n	8004f26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f08:	2054      	movs	r0, #84	; 0x54
 8004f0a:	f000 febd 	bl	8005c88 <pvPortMalloc>
 8004f0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f1c:	e005      	b.n	8004f2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f1e:	6978      	ldr	r0, [r7, #20]
 8004f20:	f000 ff7e 	bl	8005e20 <vPortFree>
 8004f24:	e001      	b.n	8004f2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d017      	beq.n	8004f60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f38:	88fa      	ldrh	r2, [r7, #6]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9303      	str	r3, [sp, #12]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	9302      	str	r3, [sp, #8]
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f80e 	bl	8004f70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f54:	69f8      	ldr	r0, [r7, #28]
 8004f56:	f000 f893 	bl	8005080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e002      	b.n	8004f66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f60:	f04f 33ff 	mov.w	r3, #4294967295
 8004f64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f66:	69bb      	ldr	r3, [r7, #24]
	}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f023 0307 	bic.w	r3, r3, #7
 8004f96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	617b      	str	r3, [r7, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01f      	beq.n	8004ffe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e012      	b.n	8004fea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	7819      	ldrb	r1, [r3, #0]
 8004fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3334      	adds	r3, #52	; 0x34
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d006      	beq.n	8004ff2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b0f      	cmp	r3, #15
 8004fee:	d9e9      	bls.n	8004fc4 <prvInitialiseNewTask+0x54>
 8004ff0:	e000      	b.n	8004ff4 <prvInitialiseNewTask+0x84>
			{
				break;
 8004ff2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ffc:	e003      	b.n	8005006 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	2b06      	cmp	r3, #6
 800500a:	d901      	bls.n	8005010 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800500c:	2306      	movs	r3, #6
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005014:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	2200      	movs	r2, #0
 8005020:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	3304      	adds	r3, #4
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fe6c 	bl	8004d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	3318      	adds	r3, #24
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fe67 	bl	8004d04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	f1c3 0207 	rsb	r2, r3, #7
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2200      	movs	r2, #0
 8005050:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	69b8      	ldr	r0, [r7, #24]
 8005060:	f000 fc06 	bl	8005870 <pxPortInitialiseStack>
 8005064:	4602      	mov	r2, r0
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005076:	bf00      	nop
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005088:	f000 fd1c 	bl	8005ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800508c:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <prvAddNewTaskToReadyList+0xb8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	4a29      	ldr	r2, [pc, #164]	; (8005138 <prvAddNewTaskToReadyList+0xb8>)
 8005094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005096:	4b29      	ldr	r3, [pc, #164]	; (800513c <prvAddNewTaskToReadyList+0xbc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800509e:	4a27      	ldr	r2, [pc, #156]	; (800513c <prvAddNewTaskToReadyList+0xbc>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050a4:	4b24      	ldr	r3, [pc, #144]	; (8005138 <prvAddNewTaskToReadyList+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d110      	bne.n	80050ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050ac:	f000 fabc 	bl	8005628 <prvInitialiseTaskLists>
 80050b0:	e00d      	b.n	80050ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <prvAddNewTaskToReadyList+0xc0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050ba:	4b20      	ldr	r3, [pc, #128]	; (800513c <prvAddNewTaskToReadyList+0xbc>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d802      	bhi.n	80050ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050c8:	4a1c      	ldr	r2, [pc, #112]	; (800513c <prvAddNewTaskToReadyList+0xbc>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <prvAddNewTaskToReadyList+0xc4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <prvAddNewTaskToReadyList+0xc4>)
 80050d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	2201      	movs	r2, #1
 80050de:	409a      	lsls	r2, r3
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <prvAddNewTaskToReadyList+0xc8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <prvAddNewTaskToReadyList+0xc8>)
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <prvAddNewTaskToReadyList+0xcc>)
 80050f8:	441a      	add	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	4619      	mov	r1, r3
 8005100:	4610      	mov	r0, r2
 8005102:	f7ff fe0c 	bl	8004d1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005106:	f000 fd0d 	bl	8005b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800510a:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <prvAddNewTaskToReadyList+0xc0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <prvAddNewTaskToReadyList+0xbc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	429a      	cmp	r2, r3
 800511e:	d207      	bcs.n	8005130 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <prvAddNewTaskToReadyList+0xd0>)
 8005122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	200003bc 	.word	0x200003bc
 800513c:	200002bc 	.word	0x200002bc
 8005140:	200003c8 	.word	0x200003c8
 8005144:	200003d8 	.word	0x200003d8
 8005148:	200003c4 	.word	0x200003c4
 800514c:	200002c0 	.word	0x200002c0
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <vTaskDelay+0x60>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <vTaskDelay+0x30>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60bb      	str	r3, [r7, #8]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005184:	f000 f87a 	bl	800527c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005188:	2100      	movs	r1, #0
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fb0a 	bl	80057a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005190:	f000 f882 	bl	8005298 <xTaskResumeAll>
 8005194:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d107      	bne.n	80051ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <vTaskDelay+0x64>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200003e4 	.word	0x200003e4
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051ca:	463a      	mov	r2, r7
 80051cc:	1d39      	adds	r1, r7, #4
 80051ce:	f107 0308 	add.w	r3, r7, #8
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fb fee4 	bl	8000fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	9202      	str	r2, [sp, #8]
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	460a      	mov	r2, r1
 80051ea:	491e      	ldr	r1, [pc, #120]	; (8005264 <vTaskStartScheduler+0xa8>)
 80051ec:	481e      	ldr	r0, [pc, #120]	; (8005268 <vTaskStartScheduler+0xac>)
 80051ee:	f7ff fe1d 	bl	8004e2c <xTaskCreateStatic>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4a1d      	ldr	r2, [pc, #116]	; (800526c <vTaskStartScheduler+0xb0>)
 80051f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051f8:	4b1c      	ldr	r3, [pc, #112]	; (800526c <vTaskStartScheduler+0xb0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005200:	2301      	movs	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e001      	b.n	800520a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d116      	bne.n	800523e <vTaskStartScheduler+0x82>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <vTaskStartScheduler+0xb4>)
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <vTaskStartScheduler+0xb8>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <vTaskStartScheduler+0xbc>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005238:	f000 fba2 	bl	8005980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800523c:	e00e      	b.n	800525c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d10a      	bne.n	800525c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	60fb      	str	r3, [r7, #12]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <vTaskStartScheduler+0x9e>
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	0800611c 	.word	0x0800611c
 8005268:	080055f9 	.word	0x080055f9
 800526c:	200003e0 	.word	0x200003e0
 8005270:	200003dc 	.word	0x200003dc
 8005274:	200003c8 	.word	0x200003c8
 8005278:	200003c0 	.word	0x200003c0

0800527c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <vTaskSuspendAll+0x18>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3301      	adds	r3, #1
 8005286:	4a03      	ldr	r2, [pc, #12]	; (8005294 <vTaskSuspendAll+0x18>)
 8005288:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	200003e4 	.word	0x200003e4

08005298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052a6:	4b41      	ldr	r3, [pc, #260]	; (80053ac <xTaskResumeAll+0x114>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	603b      	str	r3, [r7, #0]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052c4:	f000 fbfe 	bl	8005ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052c8:	4b38      	ldr	r3, [pc, #224]	; (80053ac <xTaskResumeAll+0x114>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	4a37      	ldr	r2, [pc, #220]	; (80053ac <xTaskResumeAll+0x114>)
 80052d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d2:	4b36      	ldr	r3, [pc, #216]	; (80053ac <xTaskResumeAll+0x114>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d161      	bne.n	800539e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052da:	4b35      	ldr	r3, [pc, #212]	; (80053b0 <xTaskResumeAll+0x118>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d05d      	beq.n	800539e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052e2:	e02e      	b.n	8005342 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e4:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <xTaskResumeAll+0x11c>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3318      	adds	r3, #24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fd71 	bl	8004dd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fd6c 	bl	8004dd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	2201      	movs	r2, #1
 8005306:	409a      	lsls	r2, r3
 8005308:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <xTaskResumeAll+0x120>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4313      	orrs	r3, r2
 800530e:	4a2a      	ldr	r2, [pc, #168]	; (80053b8 <xTaskResumeAll+0x120>)
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4a27      	ldr	r2, [pc, #156]	; (80053bc <xTaskResumeAll+0x124>)
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3304      	adds	r3, #4
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7ff fcf8 	bl	8004d1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005332:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <xTaskResumeAll+0x128>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	429a      	cmp	r2, r3
 800533a:	d302      	bcc.n	8005342 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800533c:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <xTaskResumeAll+0x12c>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005342:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <xTaskResumeAll+0x11c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1cc      	bne.n	80052e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005350:	f000 fa08 	bl	8005764 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005354:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <xTaskResumeAll+0x130>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005360:	f000 f836 	bl	80053d0 <xTaskIncrementTick>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800536a:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <xTaskResumeAll+0x12c>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3b01      	subs	r3, #1
 8005374:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1f1      	bne.n	8005360 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800537c:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <xTaskResumeAll+0x130>)
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005382:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <xTaskResumeAll+0x12c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800538a:	2301      	movs	r3, #1
 800538c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <xTaskResumeAll+0x134>)
 8005390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800539e:	f000 fbc1 	bl	8005b24 <vPortExitCritical>

	return xAlreadyYielded;
 80053a2:	68bb      	ldr	r3, [r7, #8]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	200003e4 	.word	0x200003e4
 80053b0:	200003bc 	.word	0x200003bc
 80053b4:	2000037c 	.word	0x2000037c
 80053b8:	200003c4 	.word	0x200003c4
 80053bc:	200002c0 	.word	0x200002c0
 80053c0:	200002bc 	.word	0x200002bc
 80053c4:	200003d0 	.word	0x200003d0
 80053c8:	200003cc 	.word	0x200003cc
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053da:	4b4e      	ldr	r3, [pc, #312]	; (8005514 <xTaskIncrementTick+0x144>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f040 808e 	bne.w	8005500 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053e4:	4b4c      	ldr	r3, [pc, #304]	; (8005518 <xTaskIncrementTick+0x148>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053ec:	4a4a      	ldr	r2, [pc, #296]	; (8005518 <xTaskIncrementTick+0x148>)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d120      	bne.n	800543a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053f8:	4b48      	ldr	r3, [pc, #288]	; (800551c <xTaskIncrementTick+0x14c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <xTaskIncrementTick+0x48>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	603b      	str	r3, [r7, #0]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xTaskIncrementTick+0x46>
 8005418:	4b40      	ldr	r3, [pc, #256]	; (800551c <xTaskIncrementTick+0x14c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	4b40      	ldr	r3, [pc, #256]	; (8005520 <xTaskIncrementTick+0x150>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3e      	ldr	r2, [pc, #248]	; (800551c <xTaskIncrementTick+0x14c>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4a3e      	ldr	r2, [pc, #248]	; (8005520 <xTaskIncrementTick+0x150>)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <xTaskIncrementTick+0x154>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	4a3c      	ldr	r2, [pc, #240]	; (8005524 <xTaskIncrementTick+0x154>)
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	f000 f995 	bl	8005764 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800543a:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <xTaskIncrementTick+0x158>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d348      	bcc.n	80054d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005444:	4b35      	ldr	r3, [pc, #212]	; (800551c <xTaskIncrementTick+0x14c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d104      	bne.n	8005458 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <xTaskIncrementTick+0x158>)
 8005450:	f04f 32ff 	mov.w	r2, #4294967295
 8005454:	601a      	str	r2, [r3, #0]
					break;
 8005456:	e03e      	b.n	80054d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005458:	4b30      	ldr	r3, [pc, #192]	; (800551c <xTaskIncrementTick+0x14c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d203      	bcs.n	8005478 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005470:	4a2d      	ldr	r2, [pc, #180]	; (8005528 <xTaskIncrementTick+0x158>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005476:	e02e      	b.n	80054d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	3304      	adds	r3, #4
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fcab 	bl	8004dd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	3318      	adds	r3, #24
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fca2 	bl	8004dd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	2201      	movs	r2, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	4b23      	ldr	r3, [pc, #140]	; (800552c <xTaskIncrementTick+0x15c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	4a22      	ldr	r2, [pc, #136]	; (800552c <xTaskIncrementTick+0x15c>)
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <xTaskIncrementTick+0x160>)
 80054b4:	441a      	add	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7ff fc2e 	bl	8004d1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <xTaskIncrementTick+0x164>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d3b9      	bcc.n	8005444 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d4:	e7b6      	b.n	8005444 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <xTaskIncrementTick+0x164>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	4914      	ldr	r1, [pc, #80]	; (8005530 <xTaskIncrementTick+0x160>)
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d901      	bls.n	80054f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80054ee:	2301      	movs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <xTaskIncrementTick+0x168>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054fa:	2301      	movs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e004      	b.n	800550a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <xTaskIncrementTick+0x16c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	4a0d      	ldr	r2, [pc, #52]	; (800553c <xTaskIncrementTick+0x16c>)
 8005508:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800550a:	697b      	ldr	r3, [r7, #20]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	200003e4 	.word	0x200003e4
 8005518:	200003c0 	.word	0x200003c0
 800551c:	20000374 	.word	0x20000374
 8005520:	20000378 	.word	0x20000378
 8005524:	200003d4 	.word	0x200003d4
 8005528:	200003dc 	.word	0x200003dc
 800552c:	200003c4 	.word	0x200003c4
 8005530:	200002c0 	.word	0x200002c0
 8005534:	200002bc 	.word	0x200002bc
 8005538:	200003d0 	.word	0x200003d0
 800553c:	200003cc 	.word	0x200003cc

08005540 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005546:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <vTaskSwitchContext+0xa4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800554e:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <vTaskSwitchContext+0xa8>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005554:	e03f      	b.n	80055d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <vTaskSwitchContext+0xa8>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555c:	4b23      	ldr	r3, [pc, #140]	; (80055ec <vTaskSwitchContext+0xac>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	fab3 f383 	clz	r3, r3
 8005568:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	f1c3 031f 	rsb	r3, r3, #31
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	491f      	ldr	r1, [pc, #124]	; (80055f0 <vTaskSwitchContext+0xb0>)
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	607b      	str	r3, [r7, #4]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vTaskSwitchContext+0x5a>
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a12      	ldr	r2, [pc, #72]	; (80055f0 <vTaskSwitchContext+0xb0>)
 80055a8:	4413      	add	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3308      	adds	r3, #8
 80055be:	429a      	cmp	r2, r3
 80055c0:	d104      	bne.n	80055cc <vTaskSwitchContext+0x8c>
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	605a      	str	r2, [r3, #4]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <vTaskSwitchContext+0xb4>)
 80055d4:	6013      	str	r3, [r2, #0]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	200003e4 	.word	0x200003e4
 80055e8:	200003d0 	.word	0x200003d0
 80055ec:	200003c4 	.word	0x200003c4
 80055f0:	200002c0 	.word	0x200002c0
 80055f4:	200002bc 	.word	0x200002bc

080055f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005600:	f000 f852 	bl	80056a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <prvIdleTask+0x28>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d9f9      	bls.n	8005600 <prvIdleTask+0x8>
			{
				taskYIELD();
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <prvIdleTask+0x2c>)
 800560e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800561c:	e7f0      	b.n	8005600 <prvIdleTask+0x8>
 800561e:	bf00      	nop
 8005620:	200002c0 	.word	0x200002c0
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	e00c      	b.n	800564e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4a12      	ldr	r2, [pc, #72]	; (8005688 <prvInitialiseTaskLists+0x60>)
 8005640:	4413      	add	r3, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fb3e 	bl	8004cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3301      	adds	r3, #1
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b06      	cmp	r3, #6
 8005652:	d9ef      	bls.n	8005634 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005654:	480d      	ldr	r0, [pc, #52]	; (800568c <prvInitialiseTaskLists+0x64>)
 8005656:	f7ff fb35 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800565a:	480d      	ldr	r0, [pc, #52]	; (8005690 <prvInitialiseTaskLists+0x68>)
 800565c:	f7ff fb32 	bl	8004cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005660:	480c      	ldr	r0, [pc, #48]	; (8005694 <prvInitialiseTaskLists+0x6c>)
 8005662:	f7ff fb2f 	bl	8004cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005666:	480c      	ldr	r0, [pc, #48]	; (8005698 <prvInitialiseTaskLists+0x70>)
 8005668:	f7ff fb2c 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800566c:	480b      	ldr	r0, [pc, #44]	; (800569c <prvInitialiseTaskLists+0x74>)
 800566e:	f7ff fb29 	bl	8004cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <prvInitialiseTaskLists+0x78>)
 8005674:	4a05      	ldr	r2, [pc, #20]	; (800568c <prvInitialiseTaskLists+0x64>)
 8005676:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <prvInitialiseTaskLists+0x7c>)
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <prvInitialiseTaskLists+0x68>)
 800567c:	601a      	str	r2, [r3, #0]
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	200002c0 	.word	0x200002c0
 800568c:	2000034c 	.word	0x2000034c
 8005690:	20000360 	.word	0x20000360
 8005694:	2000037c 	.word	0x2000037c
 8005698:	20000390 	.word	0x20000390
 800569c:	200003a8 	.word	0x200003a8
 80056a0:	20000374 	.word	0x20000374
 80056a4:	20000378 	.word	0x20000378

080056a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ae:	e019      	b.n	80056e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056b0:	f000 fa08 	bl	8005ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b4:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <prvCheckTasksWaitingTermination+0x50>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fb89 	bl	8004dd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <prvCheckTasksWaitingTermination+0x54>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	4a0b      	ldr	r2, [pc, #44]	; (80056fc <prvCheckTasksWaitingTermination+0x54>)
 80056ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056da:	f000 fa23 	bl	8005b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f810 	bl	8005704 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <prvCheckTasksWaitingTermination+0x58>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e1      	bne.n	80056b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000390 	.word	0x20000390
 80056fc:	200003bc 	.word	0x200003bc
 8005700:	200003a4 	.word	0x200003a4

08005704 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005712:	2b00      	cmp	r3, #0
 8005714:	d108      	bne.n	8005728 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fb80 	bl	8005e20 <vPortFree>
				vPortFree( pxTCB );
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fb7d 	bl	8005e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005726:	e018      	b.n	800575a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800572e:	2b01      	cmp	r3, #1
 8005730:	d103      	bne.n	800573a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fb74 	bl	8005e20 <vPortFree>
	}
 8005738:	e00f      	b.n	800575a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005740:	2b02      	cmp	r3, #2
 8005742:	d00a      	beq.n	800575a <prvDeleteTCB+0x56>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	60fb      	str	r3, [r7, #12]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <prvDeleteTCB+0x54>
	}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576a:	4b0c      	ldr	r3, [pc, #48]	; (800579c <prvResetNextTaskUnblockTime+0x38>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800577c:	e008      	b.n	8005790 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <prvResetNextTaskUnblockTime+0x38>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4a04      	ldr	r2, [pc, #16]	; (80057a0 <prvResetNextTaskUnblockTime+0x3c>)
 800578e:	6013      	str	r3, [r2, #0]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	20000374 	.word	0x20000374
 80057a0:	200003dc 	.word	0x200003dc

080057a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057ae:	4b29      	ldr	r3, [pc, #164]	; (8005854 <prvAddCurrentTaskToDelayedList+0xb0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057b4:	4b28      	ldr	r3, [pc, #160]	; (8005858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fb0c 	bl	8004dd8 <uxListRemove>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057c6:	4b24      	ldr	r3, [pc, #144]	; (8005858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	2201      	movs	r2, #1
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43da      	mvns	r2, r3
 80057d4:	4b21      	ldr	r3, [pc, #132]	; (800585c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4013      	ands	r3, r2
 80057da:	4a20      	ldr	r2, [pc, #128]	; (800585c <prvAddCurrentTaskToDelayedList+0xb8>)
 80057dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d10a      	bne.n	80057fc <prvAddCurrentTaskToDelayedList+0x58>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ec:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4619      	mov	r1, r3
 80057f4:	481a      	ldr	r0, [pc, #104]	; (8005860 <prvAddCurrentTaskToDelayedList+0xbc>)
 80057f6:	f7ff fa92 	bl	8004d1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057fa:	e026      	b.n	800584a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	429a      	cmp	r2, r3
 8005812:	d209      	bcs.n	8005828 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005814:	4b13      	ldr	r3, [pc, #76]	; (8005864 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <prvAddCurrentTaskToDelayedList+0xb4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7ff faa0 	bl	8004d66 <vListInsert>
}
 8005826:	e010      	b.n	800584a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <prvAddCurrentTaskToDelayedList+0xc4>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <prvAddCurrentTaskToDelayedList+0xb4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f7ff fa96 	bl	8004d66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <prvAddCurrentTaskToDelayedList+0xc8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d202      	bcs.n	800584a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005844:	4a09      	ldr	r2, [pc, #36]	; (800586c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6013      	str	r3, [r2, #0]
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	200003c0 	.word	0x200003c0
 8005858:	200002bc 	.word	0x200002bc
 800585c:	200003c4 	.word	0x200003c4
 8005860:	200003a8 	.word	0x200003a8
 8005864:	20000378 	.word	0x20000378
 8005868:	20000374 	.word	0x20000374
 800586c:	200003dc 	.word	0x200003dc

08005870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3b04      	subs	r3, #4
 8005880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b04      	subs	r3, #4
 800588e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3b04      	subs	r3, #4
 800589e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058a0:	4a0c      	ldr	r2, [pc, #48]	; (80058d4 <pxPortInitialiseStack+0x64>)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b14      	subs	r3, #20
 80058aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b04      	subs	r3, #4
 80058b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f06f 0202 	mvn.w	r2, #2
 80058be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3b20      	subs	r3, #32
 80058c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058c6:	68fb      	ldr	r3, [r7, #12]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	080058d9 	.word	0x080058d9

080058d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <prvTaskExitError+0x54>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d00a      	beq.n	8005902 <prvTaskExitError+0x2a>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	60fb      	str	r3, [r7, #12]
}
 80058fe:	bf00      	nop
 8005900:	e7fe      	b.n	8005900 <prvTaskExitError+0x28>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60bb      	str	r3, [r7, #8]
}
 8005914:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005916:	bf00      	nop
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0fc      	beq.n	8005918 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	2000000c 	.word	0x2000000c

08005930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	4770      	bx	lr
 800594c:	f3af 8000 	nop.w

08005950 <pxCurrentTCBConst2>:
 8005950:	200002bc 	.word	0x200002bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop

08005958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005958:	4808      	ldr	r0, [pc, #32]	; (800597c <prvPortStartFirstTask+0x24>)
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f380 8808 	msr	MSP, r0
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f380 8814 	msr	CONTROL, r0
 800596a:	b662      	cpsie	i
 800596c:	b661      	cpsie	f
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	df00      	svc	0
 8005978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800597a:	bf00      	nop
 800597c:	e000ed08 	.word	0xe000ed08

08005980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005986:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <xPortStartScheduler+0x120>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a46      	ldr	r2, [pc, #280]	; (8005aa4 <xPortStartScheduler+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10a      	bne.n	80059a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059a6:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <xPortStartScheduler+0x120>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a3f      	ldr	r2, [pc, #252]	; (8005aa8 <xPortStartScheduler+0x128>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10a      	bne.n	80059c6 <xPortStartScheduler+0x46>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059c6:	4b39      	ldr	r3, [pc, #228]	; (8005aac <xPortStartScheduler+0x12c>)
 80059c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <xPortStartScheduler+0x130>)
 80059ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059ee:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <xPortStartScheduler+0x134>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059f4:	e009      	b.n	8005a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059f6:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <xPortStartScheduler+0x134>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	4a2d      	ldr	r2, [pc, #180]	; (8005ab4 <xPortStartScheduler+0x134>)
 80059fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d0ef      	beq.n	80059f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1c3 0307 	rsb	r3, r3, #7
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d00a      	beq.n	8005a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60bb      	str	r3, [r7, #8]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a38:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a42:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a56:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a6e:	f000 f8dd 	bl	8005c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <xPortStartScheduler+0x13c>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a78:	f000 f8fc 	bl	8005c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a7c:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <xPortStartScheduler+0x140>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0f      	ldr	r2, [pc, #60]	; (8005ac0 <xPortStartScheduler+0x140>)
 8005a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a88:	f7ff ff66 	bl	8005958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a8c:	f7ff fd58 	bl	8005540 <vTaskSwitchContext>
	prvTaskExitError();
 8005a90:	f7ff ff22 	bl	80058d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	e000ed00 	.word	0xe000ed00
 8005aa4:	410fc271 	.word	0x410fc271
 8005aa8:	410fc270 	.word	0x410fc270
 8005aac:	e000e400 	.word	0xe000e400
 8005ab0:	200003e8 	.word	0x200003e8
 8005ab4:	200003ec 	.word	0x200003ec
 8005ab8:	e000ed20 	.word	0xe000ed20
 8005abc:	2000000c 	.word	0x2000000c
 8005ac0:	e000ef34 	.word	0xe000ef34

08005ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ade:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <vPortEnterCritical+0x58>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <vPortEnterCritical+0x58>)
 8005ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <vPortEnterCritical+0x58>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10f      	bne.n	8005b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <vPortEnterCritical+0x5c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	603b      	str	r3, [r7, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <vPortEnterCritical+0x4a>
	}
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	2000000c 	.word	0x2000000c
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <vPortExitCritical+0x50>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <vPortExitCritical+0x24>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	607b      	str	r3, [r7, #4]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <vPortExitCritical+0x50>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <vPortExitCritical+0x50>)
 8005b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <vPortExitCritical+0x50>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d105      	bne.n	8005b66 <vPortExitCritical+0x42>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	2000000c 	.word	0x2000000c
	...

08005b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b80:	f3ef 8009 	mrs	r0, PSP
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <pxCurrentTCBConst>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f01e 0f10 	tst.w	lr, #16
 8005b90:	bf08      	it	eq
 8005b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ba4:	f380 8811 	msr	BASEPRI, r0
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f7ff fcc6 	bl	8005540 <vTaskSwitchContext>
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	f380 8811 	msr	BASEPRI, r0
 8005bbc:	bc09      	pop	{r0, r3}
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	6808      	ldr	r0, [r1, #0]
 8005bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc6:	f01e 0f10 	tst.w	lr, #16
 8005bca:	bf08      	it	eq
 8005bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bd0:	f380 8809 	msr	PSP, r0
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	f3af 8000 	nop.w

08005be0 <pxCurrentTCBConst>:
 8005be0:	200002bc 	.word	0x200002bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop

08005be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c02:	f7ff fbe5 	bl	80053d0 <xTaskIncrementTick>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <SysTick_Handler+0x40>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
}
 8005c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <vPortSetupTimerInterrupt+0x34>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <vPortSetupTimerInterrupt+0x38>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <vPortSetupTimerInterrupt+0x3c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <vPortSetupTimerInterrupt+0x40>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <vPortSetupTimerInterrupt+0x44>)
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c4e:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <vPortSetupTimerInterrupt+0x34>)
 8005c50:	2207      	movs	r2, #7
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	e000e010 	.word	0xe000e010
 8005c64:	e000e018 	.word	0xe000e018
 8005c68:	20000000 	.word	0x20000000
 8005c6c:	10624dd3 	.word	0x10624dd3
 8005c70:	e000e014 	.word	0xe000e014

08005c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c84 <vPortEnableVFP+0x10>
 8005c78:	6801      	ldr	r1, [r0, #0]
 8005c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c7e:	6001      	str	r1, [r0, #0]
 8005c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c82:	bf00      	nop
 8005c84:	e000ed88 	.word	0xe000ed88

08005c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c94:	f7ff faf2 	bl	800527c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c98:	4b5b      	ldr	r3, [pc, #364]	; (8005e08 <pvPortMalloc+0x180>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ca0:	f000 f920 	bl	8005ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ca4:	4b59      	ldr	r3, [pc, #356]	; (8005e0c <pvPortMalloc+0x184>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f040 8093 	bne.w	8005dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01d      	beq.n	8005cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005cb8:	2208      	movs	r2, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d014      	beq.n	8005cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f023 0307 	bic.w	r3, r3, #7
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	617b      	str	r3, [r7, #20]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d06e      	beq.n	8005dd8 <pvPortMalloc+0x150>
 8005cfa:	4b45      	ldr	r3, [pc, #276]	; (8005e10 <pvPortMalloc+0x188>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d869      	bhi.n	8005dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d04:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <pvPortMalloc+0x18c>)
 8005d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <pvPortMalloc+0x18c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d0e:	e004      	b.n	8005d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d903      	bls.n	8005d2c <pvPortMalloc+0xa4>
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f1      	bne.n	8005d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <pvPortMalloc+0x180>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d050      	beq.n	8005dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	2308      	movs	r3, #8
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d91f      	bls.n	8005d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <pvPortMalloc+0xf8>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	613b      	str	r3, [r7, #16]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d92:	69b8      	ldr	r0, [r7, #24]
 8005d94:	f000 f908 	bl	8005fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d98:	4b1d      	ldr	r3, [pc, #116]	; (8005e10 <pvPortMalloc+0x188>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <pvPortMalloc+0x188>)
 8005da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005da6:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <pvPortMalloc+0x188>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b1b      	ldr	r3, [pc, #108]	; (8005e18 <pvPortMalloc+0x190>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d203      	bcs.n	8005dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <pvPortMalloc+0x188>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <pvPortMalloc+0x190>)
 8005db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <pvPortMalloc+0x184>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <pvPortMalloc+0x194>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <pvPortMalloc+0x194>)
 8005dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dd8:	f7ff fa5e 	bl	8005298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <pvPortMalloc+0x174>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60fb      	str	r3, [r7, #12]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <pvPortMalloc+0x172>
	return pvReturn;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3728      	adds	r7, #40	; 0x28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20003ff8 	.word	0x20003ff8
 8005e0c:	2000400c 	.word	0x2000400c
 8005e10:	20003ffc 	.word	0x20003ffc
 8005e14:	20003ff0 	.word	0x20003ff0
 8005e18:	20004000 	.word	0x20004000
 8005e1c:	20004004 	.word	0x20004004

08005e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d04d      	beq.n	8005ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e32:	2308      	movs	r3, #8
 8005e34:	425b      	negs	r3, r3
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <vPortFree+0xb8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <vPortFree+0x44>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	60fb      	str	r3, [r7, #12]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <vPortFree+0x62>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60bb      	str	r3, [r7, #8]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <vPortFree+0xb8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01e      	beq.n	8005ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11a      	bne.n	8005ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <vPortFree+0xb8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ea8:	f7ff f9e8 	bl	800527c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <vPortFree+0xbc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4a09      	ldr	r2, [pc, #36]	; (8005edc <vPortFree+0xbc>)
 8005eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eba:	6938      	ldr	r0, [r7, #16]
 8005ebc:	f000 f874 	bl	8005fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <vPortFree+0xc0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4a06      	ldr	r2, [pc, #24]	; (8005ee0 <vPortFree+0xc0>)
 8005ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eca:	f7ff f9e5 	bl	8005298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	2000400c 	.word	0x2000400c
 8005edc:	20003ffc 	.word	0x20003ffc
 8005ee0:	20004008 	.word	0x20004008

08005ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <prvHeapInit+0xac>)
 8005ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3307      	adds	r3, #7
 8005f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <prvHeapInit+0xac>)
 8005f14:	4413      	add	r3, r2
 8005f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <prvHeapInit+0xb0>)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <prvHeapInit+0xb0>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f30:	2208      	movs	r2, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <prvHeapInit+0xb4>)
 8005f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f46:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <prvHeapInit+0xb4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <prvHeapInit+0xb4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <prvHeapInit+0xb4>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <prvHeapInit+0xb8>)
 8005f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <prvHeapInit+0xbc>)
 8005f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <prvHeapInit+0xc0>)
 8005f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f82:	601a      	str	r2, [r3, #0]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	200003f0 	.word	0x200003f0
 8005f94:	20003ff0 	.word	0x20003ff0
 8005f98:	20003ff8 	.word	0x20003ff8
 8005f9c:	20004000 	.word	0x20004000
 8005fa0:	20003ffc 	.word	0x20003ffc
 8005fa4:	2000400c 	.word	0x2000400c

08005fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fb0:	4b28      	ldr	r3, [pc, #160]	; (8006054 <prvInsertBlockIntoFreeList+0xac>)
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e002      	b.n	8005fbc <prvInsertBlockIntoFreeList+0x14>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d8f7      	bhi.n	8005fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d108      	bne.n	8005fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d118      	bne.n	8006030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b15      	ldr	r3, [pc, #84]	; (8006058 <prvInsertBlockIntoFreeList+0xb0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d00d      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e008      	b.n	8006038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <prvInsertBlockIntoFreeList+0xb0>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e003      	b.n	8006038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d002      	beq.n	8006046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20003ff0 	.word	0x20003ff0
 8006058:	20003ff8 	.word	0x20003ff8

0800605c <__libc_init_array>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4d0d      	ldr	r5, [pc, #52]	; (8006094 <__libc_init_array+0x38>)
 8006060:	4c0d      	ldr	r4, [pc, #52]	; (8006098 <__libc_init_array+0x3c>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	2600      	movs	r6, #0
 8006068:	42a6      	cmp	r6, r4
 800606a:	d109      	bne.n	8006080 <__libc_init_array+0x24>
 800606c:	4d0b      	ldr	r5, [pc, #44]	; (800609c <__libc_init_array+0x40>)
 800606e:	4c0c      	ldr	r4, [pc, #48]	; (80060a0 <__libc_init_array+0x44>)
 8006070:	f000 f820 	bl	80060b4 <_init>
 8006074:	1b64      	subs	r4, r4, r5
 8006076:	10a4      	asrs	r4, r4, #2
 8006078:	2600      	movs	r6, #0
 800607a:	42a6      	cmp	r6, r4
 800607c:	d105      	bne.n	800608a <__libc_init_array+0x2e>
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	f855 3b04 	ldr.w	r3, [r5], #4
 8006084:	4798      	blx	r3
 8006086:	3601      	adds	r6, #1
 8006088:	e7ee      	b.n	8006068 <__libc_init_array+0xc>
 800608a:	f855 3b04 	ldr.w	r3, [r5], #4
 800608e:	4798      	blx	r3
 8006090:	3601      	adds	r6, #1
 8006092:	e7f2      	b.n	800607a <__libc_init_array+0x1e>
 8006094:	0800614c 	.word	0x0800614c
 8006098:	0800614c 	.word	0x0800614c
 800609c:	0800614c 	.word	0x0800614c
 80060a0:	08006150 	.word	0x08006150

080060a4 <memset>:
 80060a4:	4402      	add	r2, r0
 80060a6:	4603      	mov	r3, r0
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d100      	bne.n	80060ae <memset+0xa>
 80060ac:	4770      	bx	lr
 80060ae:	f803 1b01 	strb.w	r1, [r3], #1
 80060b2:	e7f9      	b.n	80060a8 <memset+0x4>

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
