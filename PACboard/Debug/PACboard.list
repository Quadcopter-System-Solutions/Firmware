
PACboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003040  08003040  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003048  08003048  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004004  20000010  08003060  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004014  08003060  00024014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da34  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022c3  00000000  00000000  0002da74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca0  00000000  00000000  0002fd38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  000309d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021645  00000000  00000000  00031540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b396  00000000  00000000  00052b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf774  00000000  00000000  0005df1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d68f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003244  00000000  00000000  0012d70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002fb8 	.word	0x08002fb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08002fb8 	.word	0x08002fb8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <TASK_errorHandler>:
#include "errorHandling.h"



void TASK_errorHandler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	for(;;)
 8000524:	e7fe      	b.n	8000524 <TASK_errorHandler+0x4>
	...

08000528 <TASK_nucleoRED>:

	}
}

void TASK_nucleoRED(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  RED_LED = {GPIO_PIN_14,
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <TASK_nucleoRED+0x28>)
 8000530:	1d3c      	adds	r4, r7, #4
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	682b      	ldr	r3, [r5, #0]
 800053a:	6023      	str	r3, [r4, #0]
			 	 	 	 	 	GPIO_MODE_OUTPUT_PP,
								GPIO_PULLUP,
								GPIO_SPEED_FREQ_VERY_HIGH,
								0};

	HAL_GPIO_Init(GPIOB, &RED_LED);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <TASK_nucleoRED+0x2c>)
 8000542:	f000 fb37 	bl	8000bb4 <HAL_GPIO_Init>

	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOB, 14);
 8000546:	210e      	movs	r1, #14
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <TASK_nucleoRED+0x2c>)
 800054a:	f000 fcde 	bl	8000f0a <HAL_GPIO_TogglePin>
 800054e:	e7fa      	b.n	8000546 <TASK_nucleoRED+0x1e>
 8000550:	08002fd0 	.word	0x08002fd0
 8000554:	40020400 	.word	0x40020400

08000558 <TASK_nucleoBLU>:




void TASK_nucleoBLU(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef  BLU_LED = {GPIO_PIN_7,
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <TASK_nucleoBLU+0x40>)
 8000560:	1d3c      	adds	r4, r7, #4
 8000562:	461d      	mov	r5, r3
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	682b      	ldr	r3, [r5, #0]
 800056a:	6023      	str	r3, [r4, #0]
			 	 	 	 	 	GPIO_MODE_OUTPUT_PP,
								GPIO_PULLUP,
								GPIO_SPEED_FREQ_VERY_HIGH,
								0};

	HAL_GPIO_Init(GPIOB, &BLU_LED);
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	480a      	ldr	r0, [pc, #40]	; (800059c <TASK_nucleoBLU+0x44>)
 8000572:	f000 fb1f 	bl	8000bb4 <HAL_GPIO_Init>

	for(;;)
	{
		HAL_GPIO_WritePin((GPIO_TypeDef*) GPIOB, (uint16_t) 7, (GPIO_PinState) GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2107      	movs	r1, #7
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <TASK_nucleoBLU+0x44>)
 800057c:	f000 fcac 	bl	8000ed8 <HAL_GPIO_WritePin>
		vTaskDelay(250);
 8000580:	20fa      	movs	r0, #250	; 0xfa
 8000582:	f001 fd8b 	bl	800209c <vTaskDelay>
		HAL_GPIO_WritePin((GPIO_TypeDef*) GPIOB, (uint16_t) 7, (GPIO_PinState) GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2107      	movs	r1, #7
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <TASK_nucleoBLU+0x44>)
 800058c:	f000 fca4 	bl	8000ed8 <HAL_GPIO_WritePin>
		vTaskDelay(250);
 8000590:	20fa      	movs	r0, #250	; 0xfa
 8000592:	f001 fd83 	bl	800209c <vTaskDelay>
		HAL_GPIO_WritePin((GPIO_TypeDef*) GPIOB, (uint16_t) 7, (GPIO_PinState) GPIO_PIN_SET);
 8000596:	e7ee      	b.n	8000576 <TASK_nucleoBLU+0x1e>
 8000598:	08002fe4 	.word	0x08002fe4
 800059c:	40020400 	.word	0x40020400

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	2000002c 	.word	0x2000002c
 80005d0:	20000080 	.word	0x20000080

080005d4 <main>:

void SystemClock_Config(void);
void StartDefaultTask(void const * argument);

int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  HAL_Init();
 80005d8:	f000 f9c8 	bl	800096c <HAL_Init>

  SystemClock_Config();
 80005dc:	f000 f806 	bl	80005ec <SystemClock_Config>

  RTOS_init();
 80005e0:	f000 f88a 	bl	80006f8 <RTOS_init>
 80005e4:	2300      	movs	r3, #0

}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	; 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fcd4 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SystemClock_Config+0xbc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <SystemClock_Config+0xbc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <SystemClock_Config+0xbc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <SystemClock_Config+0xbc>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <SystemClock_Config+0xbc>)
 8000636:	f043 0302 	orr.w	r3, r3, #2
 800063a:	6313      	str	r3, [r2, #48]	; 0x30
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <SystemClock_Config+0xbc>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	f003 0302 	and.w	r3, r3, #2
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <SystemClock_Config+0xc0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <SystemClock_Config+0xc0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <SystemClock_Config+0xc0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe4b 	bl	8001314 <HAL_RCC_OscConfig>
  {
    //error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fc51 	bl	8000f40 <HAL_RCC_ClockConfig>
  {
	 //error
  }
}
 800069e:	bf00      	nop
 80006a0:	3758      	adds	r7, #88	; 0x58
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006c2:	f000 f975 	bl	80009b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40010000 	.word	0x40010000

080006d4 <PRIVATE_errorHandler>:
static void PRIVATE_errorHandler(void);
static void PRIVATE_nucleoRED(void);
static void PRIVATE_nucleoBLU(void);

void PRIVATE_errorHandler()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	TASK_errorHandler();
 80006d8:	f7ff ff22 	bl	8000520 <TASK_errorHandler>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <PRIVATE_nucleoRED>:

void PRIVATE_nucleoRED()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	TASK_nucleoRED();
 80006e4:	f7ff ff20 	bl	8000528 <TASK_nucleoRED>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <PRIVATE_nucleoBLU>:

void PRIVATE_nucleoBLU()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	TASK_nucleoBLU();
 80006f0:	f7ff ff32 	bl	8000558 <TASK_nucleoBLU>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <RTOS_init>:

void RTOS_init()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
	BaseType_t ret;


	TaskHandle_t errorHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_errorHandler,
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	491e      	ldr	r1, [pc, #120]	; (8000788 <RTOS_init+0x90>)
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <RTOS_init+0x94>)
 8000710:	f001 fb8e 	bl	8001e30 <xTaskCreate>
 8000714:	60f8      	str	r0, [r7, #12]
				configMINIMAL_STACK_SIZE,
				NULL,
				tskIDLE_PRIORITY + 1U,
				&errorHandler_th);

		if(ret != pdPASS)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d006      	beq.n	800072a <RTOS_init+0x32>
		{
			errorMessage |= 0x0001; //RTOS init error
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <RTOS_init+0x98>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <RTOS_init+0x98>)
 8000728:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoRED_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_nucleoRED,
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	2301      	movs	r3, #1
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	4917      	ldr	r1, [pc, #92]	; (8000794 <RTOS_init+0x9c>)
 8000738:	4817      	ldr	r0, [pc, #92]	; (8000798 <RTOS_init+0xa0>)
 800073a:	f001 fb79 	bl	8001e30 <xTaskCreate>
 800073e:	60f8      	str	r0, [r7, #12]
				configMINIMAL_STACK_SIZE,
				NULL,
				tskIDLE_PRIORITY + 1U,
				&nucleoRED_th);

		if(ret != pdPASS)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d006      	beq.n	8000754 <RTOS_init+0x5c>
		{
			errorMessage |= 0x0001; //RTOS init error
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <RTOS_init+0x98>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <RTOS_init+0x98>)
 8000752:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoBLUE_th;

	xTaskCreate((TaskFunction_t)PRIVATE_nucleoBLU,
 8000754:	463b      	mov	r3, r7
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2301      	movs	r3, #1
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	490e      	ldr	r1, [pc, #56]	; (800079c <RTOS_init+0xa4>)
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <RTOS_init+0xa8>)
 8000764:	f001 fb64 	bl	8001e30 <xTaskCreate>
				configMINIMAL_STACK_SIZE,
				NULL,
				tskIDLE_PRIORITY + 1U,
				&nucleoBLUE_th);

		if(ret != pdPASS)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d006      	beq.n	800077c <RTOS_init+0x84>
		{
			errorMessage |= 0x00000001; //RTOS init error
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <RTOS_init+0x98>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <RTOS_init+0x98>)
 800077a:	801a      	strh	r2, [r3, #0]
		}


	vTaskStartScheduler();
 800077c:	f001 fcc2 	bl	8002104 <vTaskStartScheduler>

}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	08002ff8 	.word	0x08002ff8
 800078c:	080006d5 	.word	0x080006d5
 8000790:	20003fcc 	.word	0x20003fcc
 8000794:	08003008 	.word	0x08003008
 8000798:	080006e1 	.word	0x080006e1
 800079c:	08003014 	.word	0x08003014
 80007a0:	080006ed 	.word	0x080006ed

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	2019      	movs	r0, #25
 800080a:	f000 f9a9 	bl	8000b60 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800080e:	2019      	movs	r0, #25
 8000810:	f000 f9c2 	bl	8000b98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <HAL_InitTick+0xa0>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <HAL_InitTick+0xa0>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6453      	str	r3, [r2, #68]	; 0x44
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_InitTick+0xa0>)
 8000826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000830:	f107 0210 	add.w	r2, r7, #16
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fd38 	bl	80012b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000840:	f000 fd22 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8000844:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <HAL_InitTick+0xa4>)
 800084a:	fba2 2303 	umull	r2, r3, r2, r3
 800084e:	0c9b      	lsrs	r3, r3, #18
 8000850:	3b01      	subs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_InitTick+0xa8>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <HAL_InitTick+0xac>)
 8000858:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_InitTick+0xa8>)
 800085c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000860:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_InitTick+0xa8>)
 8000864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000866:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_InitTick+0xa8>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <HAL_InitTick+0xa8>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <HAL_InitTick+0xa8>)
 8000876:	f000 ff8f 	bl	8001798 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d104      	bne.n	800088a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000880:	4806      	ldr	r0, [pc, #24]	; (800089c <HAL_InitTick+0xa8>)
 8000882:	f000 ffbe 	bl	8001802 <HAL_TIM_Base_Start_IT>
 8000886:	4603      	mov	r3, r0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3730      	adds	r7, #48	; 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	431bde83 	.word	0x431bde83
 800089c:	20003fd0 	.word	0x20003fd0
 80008a0:	40010000 	.word	0x40010000

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008de:	f000 ffb4 	bl	800184a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20003fd0 	.word	0x20003fd0

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SystemInit+0x28>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SystemInit+0x28>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SystemInit+0x28>)
 8000902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000906:	609a      	str	r2, [r3, #8]
#endif
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800091c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800091e:	e003      	b.n	8000928 <LoopCopyDataInit>

08000920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000926:	3104      	adds	r1, #4

08000928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800092c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000930:	d3f6      	bcc.n	8000920 <CopyDataInit>
  ldr  r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000934:	e002      	b.n	800093c <LoopFillZerobss>

08000936 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000938:	f842 3b04 	str.w	r3, [r2], #4

0800093c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000940:	d3f9      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000942:	f7ff ffd3 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f002 fb0b 	bl	8002f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fe43 	bl	80005d4 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000950:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000954:	08003050 	.word	0x08003050
  ldr  r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800095c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000960:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000964:	20004014 	.word	0x20004014

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_Init+0x40>)
 8000976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_Init+0x40>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x40>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f8d8 	bl	8000b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff2a 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff ff00 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20004010 	.word	0x20004010

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20004010 	.word	0x20004010

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ff4c 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b72:	f7ff ff61 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	6978      	ldr	r0, [r7, #20]
 8000b7e:	f7ff ffb1 	bl	8000ae4 <NVIC_EncodePriority>
 8000b82:	4602      	mov	r2, r0
 8000b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff80 	bl	8000a90 <__NVIC_SetPriority>
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff54 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	e165      	b.n	8000e9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f040 8154 	bne.w	8000e96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d00b      	beq.n	8000c0e <HAL_GPIO_Init+0x5a>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d007      	beq.n	8000c0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c02:	2b11      	cmp	r3, #17
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b12      	cmp	r3, #18
 8000c0c:	d130      	bne.n	8000c70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0xfc>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b12      	cmp	r3, #18
 8000cae:	d123      	bne.n	8000cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	69b9      	ldr	r1, [r7, #24]
 8000cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0203 	and.w	r2, r3, #3
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80ae 	beq.w	8000e96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <HAL_GPIO_Init+0x2fc>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a5b      	ldr	r2, [pc, #364]	; (8000eb0 <HAL_GPIO_Init+0x2fc>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b59      	ldr	r3, [pc, #356]	; (8000eb0 <HAL_GPIO_Init+0x2fc>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d56:	4a57      	ldr	r2, [pc, #348]	; (8000eb4 <HAL_GPIO_Init+0x300>)
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4e      	ldr	r2, [pc, #312]	; (8000eb8 <HAL_GPIO_Init+0x304>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x21a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4d      	ldr	r2, [pc, #308]	; (8000ebc <HAL_GPIO_Init+0x308>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x216>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4c      	ldr	r2, [pc, #304]	; (8000ec0 <HAL_GPIO_Init+0x30c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x212>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x20e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4a      	ldr	r2, [pc, #296]	; (8000ec8 <HAL_GPIO_Init+0x314>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x20a>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a49      	ldr	r2, [pc, #292]	; (8000ecc <HAL_GPIO_Init+0x318>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x206>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a48      	ldr	r2, [pc, #288]	; (8000ed0 <HAL_GPIO_Init+0x31c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x202>
 8000db2:	2306      	movs	r3, #6
 8000db4:	e00c      	b.n	8000dd0 <HAL_GPIO_Init+0x21c>
 8000db6:	2307      	movs	r3, #7
 8000db8:	e00a      	b.n	8000dd0 <HAL_GPIO_Init+0x21c>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e008      	b.n	8000dd0 <HAL_GPIO_Init+0x21c>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x21c>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x21c>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x21c>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x21c>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	f002 0203 	and.w	r2, r2, #3
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de0:	4934      	ldr	r1, [pc, #208]	; (8000eb4 <HAL_GPIO_Init+0x300>)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e12:	4a30      	ldr	r2, [pc, #192]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e3c:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e66:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e90:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_GPIO_Init+0x320>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	f67f ae96 	bls.w	8000bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3724      	adds	r7, #36	; 0x24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40021400 	.word	0x40021400
 8000ed0:	40021800 	.word	0x40021800
 8000ed4:	40013c00 	.word	0x40013c00

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d104      	bne.n	8000f2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	041a      	lsls	r2, r3, #16
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0cc      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d90c      	bls.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f62:	4b65      	ldr	r3, [pc, #404]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f6a:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e0b8      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d020      	beq.n	8000fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f94:	4b59      	ldr	r3, [pc, #356]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fac:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb8:	4b50      	ldr	r3, [pc, #320]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	494d      	ldr	r1, [pc, #308]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d044      	beq.n	8001060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d119      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e07f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d003      	beq.n	8000ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d107      	bne.n	800100e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d109      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e06f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e067      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f023 0203 	bic.w	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4934      	ldr	r1, [pc, #208]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001030:	f7ff fcd2 	bl	80009d8 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	e00a      	b.n	800104e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	f7ff fcce 	bl	80009d8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f241 3288 	movw	r2, #5000	; 0x1388
 8001046:	4293      	cmp	r3, r2
 8001048:	d901      	bls.n	800104e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e04f      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 020c 	and.w	r2, r3, #12
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	429a      	cmp	r2, r3
 800105e:	d1eb      	bne.n	8001038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d20c      	bcs.n	8001088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e032      	b.n	80010ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4916      	ldr	r1, [pc, #88]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	490e      	ldr	r1, [pc, #56]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010c6:	f000 f821 	bl	800110c <HAL_RCC_GetSysClockFreq>
 80010ca:	4601      	mov	r1, r0
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	fa21 f303 	lsr.w	r3, r1, r3
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_RCC_ClockConfig+0x1c4>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_RCC_ClockConfig+0x1c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fb84 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	08003028 	.word	0x08003028
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001122:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_RCC_GetSysClockFreq+0x158>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d007      	beq.n	800113e <HAL_RCC_GetSysClockFreq+0x32>
 800112e:	2b08      	cmp	r3, #8
 8001130:	d008      	beq.n	8001144 <HAL_RCC_GetSysClockFreq+0x38>
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 808d 	bne.w	8001252 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <HAL_RCC_GetSysClockFreq+0x15c>)
 800113a:	60bb      	str	r3, [r7, #8]
       break;
 800113c:	e08c      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800113e:	4b4b      	ldr	r3, [pc, #300]	; (800126c <HAL_RCC_GetSysClockFreq+0x160>)
 8001140:	60bb      	str	r3, [r7, #8]
      break;
 8001142:	e089      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001144:	4b47      	ldr	r3, [pc, #284]	; (8001264 <HAL_RCC_GetSysClockFreq+0x158>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800114c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <HAL_RCC_GetSysClockFreq+0x158>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d023      	beq.n	80011a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800115a:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_RCC_GetSysClockFreq+0x158>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	099b      	lsrs	r3, r3, #6
 8001160:	f04f 0400 	mov.w	r4, #0
 8001164:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	ea03 0501 	and.w	r5, r3, r1
 8001170:	ea04 0602 	and.w	r6, r4, r2
 8001174:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_RCC_GetSysClockFreq+0x160>)
 8001176:	fb02 f106 	mul.w	r1, r2, r6
 800117a:	2200      	movs	r2, #0
 800117c:	fb02 f205 	mul.w	r2, r2, r5
 8001180:	440a      	add	r2, r1
 8001182:	493a      	ldr	r1, [pc, #232]	; (800126c <HAL_RCC_GetSysClockFreq+0x160>)
 8001184:	fba5 0101 	umull	r0, r1, r5, r1
 8001188:	1853      	adds	r3, r2, r1
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0400 	mov.w	r4, #0
 8001192:	461a      	mov	r2, r3
 8001194:	4623      	mov	r3, r4
 8001196:	f7ff f843 	bl	8000220 <__aeabi_uldivmod>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	e049      	b.n	8001236 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_RCC_GetSysClockFreq+0x158>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	099b      	lsrs	r3, r3, #6
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	ea03 0501 	and.w	r5, r3, r1
 80011b8:	ea04 0602 	and.w	r6, r4, r2
 80011bc:	4629      	mov	r1, r5
 80011be:	4632      	mov	r2, r6
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	0154      	lsls	r4, r2, #5
 80011ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ce:	014b      	lsls	r3, r1, #5
 80011d0:	4619      	mov	r1, r3
 80011d2:	4622      	mov	r2, r4
 80011d4:	1b49      	subs	r1, r1, r5
 80011d6:	eb62 0206 	sbc.w	r2, r2, r6
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	f04f 0400 	mov.w	r4, #0
 80011e2:	0194      	lsls	r4, r2, #6
 80011e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011e8:	018b      	lsls	r3, r1, #6
 80011ea:	1a5b      	subs	r3, r3, r1
 80011ec:	eb64 0402 	sbc.w	r4, r4, r2
 80011f0:	f04f 0100 	mov.w	r1, #0
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	00e2      	lsls	r2, r4, #3
 80011fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011fe:	00d9      	lsls	r1, r3, #3
 8001200:	460b      	mov	r3, r1
 8001202:	4614      	mov	r4, r2
 8001204:	195b      	adds	r3, r3, r5
 8001206:	eb44 0406 	adc.w	r4, r4, r6
 800120a:	f04f 0100 	mov.w	r1, #0
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	02a2      	lsls	r2, r4, #10
 8001214:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001218:	0299      	lsls	r1, r3, #10
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	4618      	mov	r0, r3
 8001220:	4621      	mov	r1, r4
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f04f 0400 	mov.w	r4, #0
 8001228:	461a      	mov	r2, r3
 800122a:	4623      	mov	r3, r4
 800122c:	f7fe fff8 	bl	8000220 <__aeabi_uldivmod>
 8001230:	4603      	mov	r3, r0
 8001232:	460c      	mov	r4, r1
 8001234:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_GetSysClockFreq+0x158>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	3301      	adds	r3, #1
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	60bb      	str	r3, [r7, #8]
      break;
 8001250:	e002      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001254:	60bb      	str	r3, [r7, #8]
      break;
 8001256:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001258:	68bb      	ldr	r3, [r7, #8]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	00f42400 	.word	0x00f42400
 800126c:	017d7840 	.word	0x017d7840

08001270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_RCC_GetHCLKFreq+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000000 	.word	0x20000000

08001288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800128c:	f7ff fff0 	bl	8001270 <HAL_RCC_GetHCLKFreq>
 8001290:	4601      	mov	r1, r0
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	0b5b      	lsrs	r3, r3, #13
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	08003038 	.word	0x08003038

080012b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	220f      	movs	r2, #15
 80012be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_RCC_GetClockConfig+0x5c>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_RCC_GetClockConfig+0x5c>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_RCC_GetClockConfig+0x5c>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_RCC_GetClockConfig+0x5c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <HAL_RCC_GetClockConfig+0x60>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 020f 	and.w	r2, r3, #15
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d075      	beq.n	8001418 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800132c:	4ba2      	ldr	r3, [pc, #648]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	2b04      	cmp	r3, #4
 8001336:	d00c      	beq.n	8001352 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001338:	4b9f      	ldr	r3, [pc, #636]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001340:	2b08      	cmp	r3, #8
 8001342:	d112      	bne.n	800136a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001344:	4b9c      	ldr	r3, [pc, #624]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d05b      	beq.n	8001416 <HAL_RCC_OscConfig+0x102>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d157      	bne.n	8001416 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e20b      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x6e>
 8001374:	4b90      	ldr	r3, [pc, #576]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a8f      	ldr	r2, [pc, #572]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e01d      	b.n	80013be <HAL_RCC_OscConfig+0xaa>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x92>
 800138c:	4b8a      	ldr	r3, [pc, #552]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a89      	ldr	r2, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a86      	ldr	r2, [pc, #536]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0xaa>
 80013a6:	4b84      	ldr	r3, [pc, #528]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a83      	ldr	r2, [pc, #524]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a80      	ldr	r2, [pc, #512]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80013b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d013      	beq.n	80013ee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb07 	bl	80009d8 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ce:	f7ff fb03 	bl	80009d8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b64      	cmp	r3, #100	; 0x64
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1d0      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e0:	4b75      	ldr	r3, [pc, #468]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0xba>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff faf3 	bl	80009d8 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f6:	f7ff faef 	bl	80009d8 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1bc      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0xe2>
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d063      	beq.n	80014ec <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001424:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00b      	beq.n	8001448 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001430:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001438:	2b08      	cmp	r3, #8
 800143a:	d11c      	bne.n	8001476 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143c:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d116      	bne.n	8001476 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001448:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x14c>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d001      	beq.n	8001460 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e190      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4952      	ldr	r1, [pc, #328]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001474:	e03a      	b.n	80014ec <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d020      	beq.n	80014c0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147e:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <HAL_RCC_OscConfig+0x2a8>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff faa8 	bl	80009d8 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff faa4 	bl	80009d8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e171      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	493f      	ldr	r1, [pc, #252]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c0:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x2a8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa87 	bl	80009d8 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fa83 	bl	80009d8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e150      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d030      	beq.n	800155a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d016      	beq.n	800152e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_RCC_OscConfig+0x2ac>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fa67 	bl	80009d8 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fa63 	bl	80009d8 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e130      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x1fa>
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fa50 	bl	80009d8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fa4c 	bl	80009d8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e119      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 809f 	beq.w	80016a6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10f      	bne.n	8001598 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_OscConfig+0x2a4>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001594:	2301      	movs	r3, #1
 8001596:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_RCC_OscConfig+0x2b0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d120      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_RCC_OscConfig+0x2b0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <HAL_RCC_OscConfig+0x2b0>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fa12 	bl	80009d8 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	e010      	b.n	80015da <HAL_RCC_OscConfig+0x2c6>
 80015b8:	40023800 	.word	0x40023800
 80015bc:	42470000 	.word	0x42470000
 80015c0:	42470e80 	.word	0x42470e80
 80015c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c8:	f7ff fa06 	bl	80009d8 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0d3      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015da:	4b6c      	ldr	r3, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x478>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d106      	bne.n	80015fc <HAL_RCC_OscConfig+0x2e8>
 80015ee:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a67      	ldr	r2, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	e01c      	b.n	8001636 <HAL_RCC_OscConfig+0x322>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b05      	cmp	r3, #5
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x30a>
 8001604:	4b62      	ldr	r3, [pc, #392]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a61      	ldr	r2, [pc, #388]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a5e      	ldr	r2, [pc, #376]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x322>
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a5b      	ldr	r2, [pc, #364]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d015      	beq.n	800166a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff f9cb 	bl	80009d8 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff f9c7 	bl	80009d8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e092      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ee      	beq.n	8001646 <HAL_RCC_OscConfig+0x332>
 8001668:	e014      	b.n	8001694 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7ff f9b5 	bl	80009d8 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff f9b1 	bl	80009d8 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e07c      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ee      	bne.n	8001672 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d105      	bne.n	80016a6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 80016a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d068      	beq.n	8001780 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d060      	beq.n	800177c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d145      	bne.n	800174e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b34      	ldr	r3, [pc, #208]	; (8001794 <HAL_RCC_OscConfig+0x480>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff f986 	bl	80009d8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f982 	bl	80009d8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e04f      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	071b      	lsls	r3, r3, #28
 800171a:	491d      	ldr	r1, [pc, #116]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_RCC_OscConfig+0x480>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff f957 	bl	80009d8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff f953 	bl	80009d8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e020      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x41a>
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_RCC_OscConfig+0x480>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff f940 	bl	80009d8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f93c 	bl	80009d8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e009      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_RCC_OscConfig+0x47c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x448>
 800177a:	e001      	b.n	8001780 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	40023800 	.word	0x40023800
 8001794:	42470060 	.word	0x42470060

08001798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e01d      	b.n	80017e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f815 	bl	80017ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3304      	adds	r3, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f000 f968 	bl	8001aac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b06      	cmp	r3, #6
 800182a:	d007      	beq.n	800183c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b02      	cmp	r3, #2
 800185e:	d122      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b02      	cmp	r3, #2
 800186c:	d11b      	bne.n	80018a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f06f 0202 	mvn.w	r2, #2
 8001876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8ee 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 8001892:	e005      	b.n	80018a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f8e0 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8f1 	bl	8001a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d122      	bne.n	80018fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d11b      	bne.n	80018fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f06f 0204 	mvn.w	r2, #4
 80018ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f8c4 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 80018e6:	e005      	b.n	80018f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f8b6 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f8c7 	bl	8001a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b08      	cmp	r3, #8
 8001906:	d122      	bne.n	800194e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b08      	cmp	r3, #8
 8001914:	d11b      	bne.n	800194e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f06f 0208 	mvn.w	r2, #8
 800191e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2204      	movs	r2, #4
 8001924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f89a 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 800193a:	e005      	b.n	8001948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f88c 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f89d 	bl	8001a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b10      	cmp	r3, #16
 800195a:	d122      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b10      	cmp	r3, #16
 8001968:	d11b      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0210 	mvn.w	r2, #16
 8001972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2208      	movs	r2, #8
 8001978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f870 	bl	8001a6e <HAL_TIM_IC_CaptureCallback>
 800198e:	e005      	b.n	800199c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f862 	bl	8001a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f873 	bl	8001a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d10e      	bne.n	80019ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f06f 0201 	mvn.w	r2, #1
 80019c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7fe fe71 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d8:	2b80      	cmp	r3, #128	; 0x80
 80019da:	d10e      	bne.n	80019fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e6:	2b80      	cmp	r3, #128	; 0x80
 80019e8:	d107      	bne.n	80019fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f903 	bl	8001c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	d10e      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a12:	2b40      	cmp	r3, #64	; 0x40
 8001a14:	d107      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f838 	bl	8001a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d10e      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d107      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f06f 0220 	mvn.w	r2, #32
 8001a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f8cd 	bl	8001bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <TIM_Base_SetConfig+0x114>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d013      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aca:	d00f      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <TIM_Base_SetConfig+0x118>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00b      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3c      	ldr	r2, [pc, #240]	; (8001bc8 <TIM_Base_SetConfig+0x11c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <TIM_Base_SetConfig+0x120>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d003      	beq.n	8001aec <TIM_Base_SetConfig+0x40>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <TIM_Base_SetConfig+0x124>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d108      	bne.n	8001afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a2f      	ldr	r2, [pc, #188]	; (8001bc0 <TIM_Base_SetConfig+0x114>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02b      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d027      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <TIM_Base_SetConfig+0x118>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d023      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a2b      	ldr	r2, [pc, #172]	; (8001bc8 <TIM_Base_SetConfig+0x11c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d01f      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a2a      	ldr	r2, [pc, #168]	; (8001bcc <TIM_Base_SetConfig+0x120>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01b      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <TIM_Base_SetConfig+0x124>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d017      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <TIM_Base_SetConfig+0x128>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <TIM_Base_SetConfig+0x12c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00f      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <TIM_Base_SetConfig+0x130>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00b      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <TIM_Base_SetConfig+0x134>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <TIM_Base_SetConfig+0x138>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d003      	beq.n	8001b5e <TIM_Base_SetConfig+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <TIM_Base_SetConfig+0x13c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <TIM_Base_SetConfig+0x114>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <TIM_Base_SetConfig+0xf8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <TIM_Base_SetConfig+0x124>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d103      	bne.n	8001bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	615a      	str	r2, [r3, #20]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	40000c00 	.word	0x40000c00
 8001bd0:	40010400 	.word	0x40010400
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	40014400 	.word	0x40014400
 8001bdc:	40014800 	.word	0x40014800
 8001be0:	40001800 	.word	0x40001800
 8001be4:	40001c00 	.word	0x40001c00
 8001be8:	40002000 	.word	0x40002000

08001bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f103 0208 	add.w	r2, r3, #8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f103 0208 	add.w	r2, r3, #8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0208 	add.w	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d103      	bne.n	8001cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e00c      	b.n	8001cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3308      	adds	r3, #8
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e002      	b.n	8001ce4 <vListInsert+0x2e>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d2f6      	bcs.n	8001cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6892      	ldr	r2, [r2, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6852      	ldr	r2, [r2, #4]
 8001d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d103      	bne.n	8001d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1e5a      	subs	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	623b      	str	r3, [r7, #32]
 8001da2:	e7fe      	b.n	8001da2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <xTaskCreateStatic+0x42>
 8001daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	e7fe      	b.n	8001dbc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001dbe:	2354      	movs	r3, #84	; 0x54
 8001dc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b54      	cmp	r3, #84	; 0x54
 8001dc6:	d009      	beq.n	8001ddc <xTaskCreateStatic+0x60>
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	e7fe      	b.n	8001dda <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ddc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01e      	beq.n	8001e22 <xTaskCreateStatic+0xa6>
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01b      	beq.n	8001e22 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9303      	str	r3, [sp, #12]
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f850 	bl	8001eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e1c:	f000 f8d4 	bl	8001fc8 <prvAddNewTaskToReadyList>
 8001e20:	e001      	b.n	8001e26 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001e26:	697b      	ldr	r3, [r7, #20]
	}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af04      	add	r7, sp, #16
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 feb5 	bl	8002bb4 <pvPortMalloc>
 8001e4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00e      	beq.n	8001e70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001e52:	2054      	movs	r0, #84	; 0x54
 8001e54:	f000 feae 	bl	8002bb4 <pvPortMalloc>
 8001e58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
 8001e66:	e005      	b.n	8001e74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e68:	6978      	ldr	r0, [r7, #20]
 8001e6a:	f000 ff65 	bl	8002d38 <vPortFree>
 8001e6e:	e001      	b.n	8001e74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d017      	beq.n	8001eaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e82:	88fa      	ldrh	r2, [r7, #6]
 8001e84:	2300      	movs	r3, #0
 8001e86:	9303      	str	r3, [sp, #12]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f80e 	bl	8001eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e9e:	69f8      	ldr	r0, [r7, #28]
 8001ea0:	f000 f892 	bl	8001fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	e002      	b.n	8001eb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
	}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b088      	sub	sp, #32
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f023 0307 	bic.w	r3, r3, #7
 8001ee0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <prvInitialiseNewTask+0x46>
 8001eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef0:	f383 8811 	msr	BASEPRI, r3
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e7fe      	b.n	8001efe <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01f      	beq.n	8001f46 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e012      	b.n	8001f32 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	7819      	ldrb	r1, [r3, #0]
 8001f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3334      	adds	r3, #52	; 0x34
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d9e9      	bls.n	8001f0c <prvInitialiseNewTask+0x52>
 8001f38:	e000      	b.n	8001f3c <prvInitialiseNewTask+0x82>
			{
				break;
 8001f3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f44:	e003      	b.n	8001f4e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d901      	bls.n	8001f58 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f54:	2306      	movs	r3, #6
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	2200      	movs	r2, #0
 8001f68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe70 	bl	8001c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	3318      	adds	r3, #24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe6b 	bl	8001c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	f1c3 0207 	rsb	r2, r3, #7
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	2200      	movs	r2, #0
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	68f9      	ldr	r1, [r7, #12]
 8001fa6:	69b8      	ldr	r0, [r7, #24]
 8001fa8:	f000 fbfe 	bl	80027a8 <pxPortInitialiseStack>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fbe:	bf00      	nop
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001fd0:	f000 fd14 	bl	80029fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <prvAddNewTaskToReadyList+0xb8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a29      	ldr	r2, [pc, #164]	; (8002080 <prvAddNewTaskToReadyList+0xb8>)
 8001fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <prvAddNewTaskToReadyList+0xbc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001fe6:	4a27      	ldr	r2, [pc, #156]	; (8002084 <prvAddNewTaskToReadyList+0xbc>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <prvAddNewTaskToReadyList+0xb8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d110      	bne.n	8002016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ff4:	f000 fab8 	bl	8002568 <prvInitialiseTaskLists>
 8001ff8:	e00d      	b.n	8002016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <prvAddNewTaskToReadyList+0xc0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <prvAddNewTaskToReadyList+0xbc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	429a      	cmp	r2, r3
 800200e:	d802      	bhi.n	8002016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <prvAddNewTaskToReadyList+0xbc>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <prvAddNewTaskToReadyList+0xc4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <prvAddNewTaskToReadyList+0xc4>)
 800201e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2201      	movs	r2, #1
 8002026:	409a      	lsls	r2, r3
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <prvAddNewTaskToReadyList+0xc8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <prvAddNewTaskToReadyList+0xc8>)
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4a15      	ldr	r2, [pc, #84]	; (8002094 <prvAddNewTaskToReadyList+0xcc>)
 8002040:	441a      	add	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f7ff fe10 	bl	8001c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800204e:	f000 fd03 	bl	8002a58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <prvAddNewTaskToReadyList+0xc0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00e      	beq.n	8002078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <prvAddNewTaskToReadyList+0xbc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <prvAddNewTaskToReadyList+0xd0>)
 800206a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000380 	.word	0x20000380
 8002084:	20000280 	.word	0x20000280
 8002088:	2000038c 	.word	0x2000038c
 800208c:	2000039c 	.word	0x2000039c
 8002090:	20000388 	.word	0x20000388
 8002094:	20000284 	.word	0x20000284
 8002098:	e000ed04 	.word	0xe000ed04

0800209c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <vTaskDelay+0x60>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <vTaskDelay+0x2e>
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	e7fe      	b.n	80020c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80020ca:	f000 f879 	bl	80021c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fb03 	bl	80026dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80020d6:	f000 f881 	bl	80021dc <xTaskResumeAll>
 80020da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d107      	bne.n	80020f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <vTaskDelay+0x64>)
 80020e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200003a8 	.word	0x200003a8
 8002100:	e000ed04 	.word	0xe000ed04

08002104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002112:	463a      	mov	r2, r7
 8002114:	1d39      	adds	r1, r7, #4
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa40 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	9202      	str	r2, [sp, #8]
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2300      	movs	r3, #0
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	460a      	mov	r2, r1
 8002132:	491d      	ldr	r1, [pc, #116]	; (80021a8 <vTaskStartScheduler+0xa4>)
 8002134:	481d      	ldr	r0, [pc, #116]	; (80021ac <vTaskStartScheduler+0xa8>)
 8002136:	f7ff fe21 	bl	8001d7c <xTaskCreateStatic>
 800213a:	4602      	mov	r2, r0
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <vTaskStartScheduler+0xac>)
 800213e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <vTaskStartScheduler+0xac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002148:	2301      	movs	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e001      	b.n	8002152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d115      	bne.n	8002184 <vTaskStartScheduler+0x80>
 8002158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215c:	f383 8811 	msr	BASEPRI, r3
 8002160:	f3bf 8f6f 	isb	sy
 8002164:	f3bf 8f4f 	dsb	sy
 8002168:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <vTaskStartScheduler+0xb0>)
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <vTaskStartScheduler+0xb4>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <vTaskStartScheduler+0xb8>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800217e:	f000 fb9f 	bl	80028c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002182:	e00d      	b.n	80021a0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d109      	bne.n	80021a0 <vTaskStartScheduler+0x9c>
 800218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e7fe      	b.n	800219e <vTaskStartScheduler+0x9a>
}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	08003020 	.word	0x08003020
 80021ac:	08002539 	.word	0x08002539
 80021b0:	200003a4 	.word	0x200003a4
 80021b4:	200003a0 	.word	0x200003a0
 80021b8:	2000038c 	.word	0x2000038c
 80021bc:	20000384 	.word	0x20000384

080021c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <vTaskSuspendAll+0x18>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <vTaskSuspendAll+0x18>)
 80021cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	200003a8 	.word	0x200003a8

080021dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <xTaskResumeAll+0x114>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <xTaskResumeAll+0x2a>
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	e7fe      	b.n	8002204 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002206:	f000 fbf9 	bl	80029fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <xTaskResumeAll+0x114>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	4a37      	ldr	r2, [pc, #220]	; (80022f0 <xTaskResumeAll+0x114>)
 8002212:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <xTaskResumeAll+0x114>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d161      	bne.n	80022e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <xTaskResumeAll+0x118>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d05d      	beq.n	80022e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002224:	e02e      	b.n	8002284 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002226:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <xTaskResumeAll+0x11c>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3318      	adds	r3, #24
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fd78 	bl	8001d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3304      	adds	r3, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fd73 	bl	8001d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <xTaskResumeAll+0x120>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <xTaskResumeAll+0x120>)
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4a27      	ldr	r2, [pc, #156]	; (8002300 <xTaskResumeAll+0x124>)
 8002262:	441a      	add	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3304      	adds	r3, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f7ff fcff 	bl	8001c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <xTaskResumeAll+0x128>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <xTaskResumeAll+0x12c>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <xTaskResumeAll+0x11c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1cc      	bne.n	8002226 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002292:	f000 fa03 	bl	800269c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <xTaskResumeAll+0x130>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d010      	beq.n	80022c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80022a2:	f000 f837 	bl	8002314 <xTaskIncrementTick>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <xTaskResumeAll+0x12c>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f1      	bne.n	80022a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <xTaskResumeAll+0x130>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <xTaskResumeAll+0x12c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <xTaskResumeAll+0x134>)
 80022d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80022e0:	f000 fbba 	bl	8002a58 <vPortExitCritical>

	return xAlreadyYielded;
 80022e4:	68bb      	ldr	r3, [r7, #8]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200003a8 	.word	0x200003a8
 80022f4:	20000380 	.word	0x20000380
 80022f8:	20000340 	.word	0x20000340
 80022fc:	20000388 	.word	0x20000388
 8002300:	20000284 	.word	0x20000284
 8002304:	20000280 	.word	0x20000280
 8002308:	20000394 	.word	0x20000394
 800230c:	20000390 	.word	0x20000390
 8002310:	e000ed04 	.word	0xe000ed04

08002314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800231e:	4b4e      	ldr	r3, [pc, #312]	; (8002458 <xTaskIncrementTick+0x144>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8087 	bne.w	8002436 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002328:	4b4c      	ldr	r3, [pc, #304]	; (800245c <xTaskIncrementTick+0x148>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002330:	4a4a      	ldr	r2, [pc, #296]	; (800245c <xTaskIncrementTick+0x148>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11f      	bne.n	800237c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800233c:	4b48      	ldr	r3, [pc, #288]	; (8002460 <xTaskIncrementTick+0x14c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <xTaskIncrementTick+0x46>
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	e7fe      	b.n	8002358 <xTaskIncrementTick+0x44>
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <xTaskIncrementTick+0x14c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	4b40      	ldr	r3, [pc, #256]	; (8002464 <xTaskIncrementTick+0x150>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a3e      	ldr	r2, [pc, #248]	; (8002460 <xTaskIncrementTick+0x14c>)
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <xTaskIncrementTick+0x150>)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <xTaskIncrementTick+0x154>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <xTaskIncrementTick+0x154>)
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	f000 f990 	bl	800269c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <xTaskIncrementTick+0x158>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d348      	bcc.n	8002418 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002386:	4b36      	ldr	r3, [pc, #216]	; (8002460 <xTaskIncrementTick+0x14c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <xTaskIncrementTick+0x158>)
 8002392:	f04f 32ff 	mov.w	r2, #4294967295
 8002396:	601a      	str	r2, [r3, #0]
					break;
 8002398:	e03e      	b.n	8002418 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <xTaskIncrementTick+0x14c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d203      	bcs.n	80023ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80023b2:	4a2e      	ldr	r2, [pc, #184]	; (800246c <xTaskIncrementTick+0x158>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80023b8:	e02e      	b.n	8002418 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3304      	adds	r3, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fcb2 	bl	8001d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3318      	adds	r3, #24
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fca9 	bl	8001d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <xTaskIncrementTick+0x15c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <xTaskIncrementTick+0x15c>)
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <xTaskIncrementTick+0x160>)
 80023f6:	441a      	add	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3304      	adds	r3, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f7ff fc35 	bl	8001c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <xTaskIncrementTick+0x164>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	429a      	cmp	r2, r3
 8002410:	d3b9      	bcc.n	8002386 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002412:	2301      	movs	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002416:	e7b6      	b.n	8002386 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <xTaskIncrementTick+0x164>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241e:	4915      	ldr	r1, [pc, #84]	; (8002474 <xTaskIncrementTick+0x160>)
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d907      	bls.n	8002440 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002430:	2301      	movs	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e004      	b.n	8002440 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <xTaskIncrementTick+0x168>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <xTaskIncrementTick+0x168>)
 800243e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <xTaskIncrementTick+0x16c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002448:	2301      	movs	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800244c:	697b      	ldr	r3, [r7, #20]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200003a8 	.word	0x200003a8
 800245c:	20000384 	.word	0x20000384
 8002460:	20000338 	.word	0x20000338
 8002464:	2000033c 	.word	0x2000033c
 8002468:	20000398 	.word	0x20000398
 800246c:	200003a0 	.word	0x200003a0
 8002470:	20000388 	.word	0x20000388
 8002474:	20000284 	.word	0x20000284
 8002478:	20000280 	.word	0x20000280
 800247c:	20000390 	.word	0x20000390
 8002480:	20000394 	.word	0x20000394

08002484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <vTaskSwitchContext+0xa0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002492:	4b25      	ldr	r3, [pc, #148]	; (8002528 <vTaskSwitchContext+0xa4>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002498:	e03e      	b.n	8002518 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800249a:	4b23      	ldr	r3, [pc, #140]	; (8002528 <vTaskSwitchContext+0xa4>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <vTaskSwitchContext+0xa8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80024ae:	7afb      	ldrb	r3, [r7, #11]
 80024b0:	f1c3 031f 	rsb	r3, r3, #31
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	491e      	ldr	r1, [pc, #120]	; (8002530 <vTaskSwitchContext+0xac>)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <vTaskSwitchContext+0x5a>
	__asm volatile
 80024ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	e7fe      	b.n	80024dc <vTaskSwitchContext+0x58>
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4a11      	ldr	r2, [pc, #68]	; (8002530 <vTaskSwitchContext+0xac>)
 80024ea:	4413      	add	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	3308      	adds	r3, #8
 8002500:	429a      	cmp	r2, r3
 8002502:	d104      	bne.n	800250e <vTaskSwitchContext+0x8a>
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <vTaskSwitchContext+0xb0>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	200003a8 	.word	0x200003a8
 8002528:	20000394 	.word	0x20000394
 800252c:	20000388 	.word	0x20000388
 8002530:	20000284 	.word	0x20000284
 8002534:	20000280 	.word	0x20000280

08002538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002540:	f000 f852 	bl	80025e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <prvIdleTask+0x28>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d9f9      	bls.n	8002540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <prvIdleTask+0x2c>)
 800254e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800255c:	e7f0      	b.n	8002540 <prvIdleTask+0x8>
 800255e:	bf00      	nop
 8002560:	20000284 	.word	0x20000284
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	e00c      	b.n	800258e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <prvInitialiseTaskLists+0x60>)
 8002580:	4413      	add	r3, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fb46 	bl	8001c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d9ef      	bls.n	8002574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <prvInitialiseTaskLists+0x64>)
 8002596:	f7ff fb3d 	bl	8001c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800259a:	480d      	ldr	r0, [pc, #52]	; (80025d0 <prvInitialiseTaskLists+0x68>)
 800259c:	f7ff fb3a 	bl	8001c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <prvInitialiseTaskLists+0x6c>)
 80025a2:	f7ff fb37 	bl	8001c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80025a6:	480c      	ldr	r0, [pc, #48]	; (80025d8 <prvInitialiseTaskLists+0x70>)
 80025a8:	f7ff fb34 	bl	8001c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <prvInitialiseTaskLists+0x74>)
 80025ae:	f7ff fb31 	bl	8001c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <prvInitialiseTaskLists+0x78>)
 80025b4:	4a05      	ldr	r2, [pc, #20]	; (80025cc <prvInitialiseTaskLists+0x64>)
 80025b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <prvInitialiseTaskLists+0x7c>)
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <prvInitialiseTaskLists+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000284 	.word	0x20000284
 80025cc:	20000310 	.word	0x20000310
 80025d0:	20000324 	.word	0x20000324
 80025d4:	20000340 	.word	0x20000340
 80025d8:	20000354 	.word	0x20000354
 80025dc:	2000036c 	.word	0x2000036c
 80025e0:	20000338 	.word	0x20000338
 80025e4:	2000033c 	.word	0x2000033c

080025e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025ee:	e019      	b.n	8002624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80025f0:	f000 fa04 	bl	80029fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <prvCheckTasksWaitingTermination+0x4c>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb91 	bl	8001d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <prvCheckTasksWaitingTermination+0x50>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3b01      	subs	r3, #1
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <prvCheckTasksWaitingTermination+0x50>)
 800260e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <prvCheckTasksWaitingTermination+0x54>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3b01      	subs	r3, #1
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <prvCheckTasksWaitingTermination+0x54>)
 8002618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800261a:	f000 fa1d 	bl	8002a58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f80e 	bl	8002640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <prvCheckTasksWaitingTermination+0x54>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e1      	bne.n	80025f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000354 	.word	0x20000354
 8002638:	20000380 	.word	0x20000380
 800263c:	20000368 	.word	0x20000368

08002640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fb6e 	bl	8002d38 <vPortFree>
				vPortFree( pxTCB );
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fb6b 	bl	8002d38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002662:	e017      	b.n	8002694 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800266a:	2b01      	cmp	r3, #1
 800266c:	d103      	bne.n	8002676 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fb62 	bl	8002d38 <vPortFree>
	}
 8002674:	e00e      	b.n	8002694 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267c:	2b02      	cmp	r3, #2
 800267e:	d009      	beq.n	8002694 <prvDeleteTCB+0x54>
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e7fe      	b.n	8002692 <prvDeleteTCB+0x52>
	}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <prvResetNextTaskUnblockTime+0x38>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <prvResetNextTaskUnblockTime+0x3c>)
 80026ae:	f04f 32ff 	mov.w	r2, #4294967295
 80026b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80026b4:	e008      	b.n	80026c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <prvResetNextTaskUnblockTime+0x38>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <prvResetNextTaskUnblockTime+0x3c>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20000338 	.word	0x20000338
 80026d8:	200003a0 	.word	0x200003a0

080026dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <prvAddCurrentTaskToDelayedList+0xb0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fb18 	bl	8001d28 <uxListRemove>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <prvAddCurrentTaskToDelayedList+0xb8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4013      	ands	r3, r2
 8002712:	4a20      	ldr	r2, [pc, #128]	; (8002794 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002714:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d10a      	bne.n	8002734 <prvAddCurrentTaskToDelayedList+0x58>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3304      	adds	r3, #4
 800272a:	4619      	mov	r1, r3
 800272c:	481a      	ldr	r0, [pc, #104]	; (8002798 <prvAddCurrentTaskToDelayedList+0xbc>)
 800272e:	f7ff fa9e 	bl	8001c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002732:	e026      	b.n	8002782 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d209      	bcs.n	8002760 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <prvAddCurrentTaskToDelayedList+0xc0>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7ff faac 	bl	8001cb6 <vListInsert>
}
 800275e:	e010      	b.n	8002782 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3304      	adds	r3, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7ff faa2 	bl	8001cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d202      	bcs.n	8002782 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000384 	.word	0x20000384
 8002790:	20000280 	.word	0x20000280
 8002794:	20000388 	.word	0x20000388
 8002798:	2000036c 	.word	0x2000036c
 800279c:	2000033c 	.word	0x2000033c
 80027a0:	20000338 	.word	0x20000338
 80027a4:	200003a0 	.word	0x200003a0

080027a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3b04      	subs	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3b04      	subs	r3, #4
 80027c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3b04      	subs	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80027d8:	4a0c      	ldr	r2, [pc, #48]	; (800280c <pxPortInitialiseStack+0x64>)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3b14      	subs	r3, #20
 80027e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3b04      	subs	r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f06f 0202 	mvn.w	r2, #2
 80027f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3b20      	subs	r3, #32
 80027fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	08002811 	.word	0x08002811

08002810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <prvTaskExitError+0x50>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d009      	beq.n	8002838 <prvTaskExitError+0x28>
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e7fe      	b.n	8002836 <prvTaskExitError+0x26>
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800284a:	bf00      	nop
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0fc      	beq.n	800284c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	2000000c 	.word	0x2000000c
	...

08002870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <pxCurrentTCBConst2>)
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	6808      	ldr	r0, [r1, #0]
 8002876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287a:	f380 8809 	msr	PSP, r0
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f380 8811 	msr	BASEPRI, r0
 800288a:	4770      	bx	lr
 800288c:	f3af 8000 	nop.w

08002890 <pxCurrentTCBConst2>:
 8002890:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop

08002898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <prvPortStartFirstTask+0x24>)
 800289a:	6800      	ldr	r0, [r0, #0]
 800289c:	6800      	ldr	r0, [r0, #0]
 800289e:	f380 8808 	msr	MSP, r0
 80028a2:	f04f 0000 	mov.w	r0, #0
 80028a6:	f380 8814 	msr	CONTROL, r0
 80028aa:	b662      	cpsie	i
 80028ac:	b661      	cpsie	f
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	df00      	svc	0
 80028b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80028ba:	bf00      	nop
 80028bc:	e000ed08 	.word	0xe000ed08

080028c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028c6:	4b44      	ldr	r3, [pc, #272]	; (80029d8 <xPortStartScheduler+0x118>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a44      	ldr	r2, [pc, #272]	; (80029dc <xPortStartScheduler+0x11c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d109      	bne.n	80028e4 <xPortStartScheduler+0x24>
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	e7fe      	b.n	80028e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028e4:	4b3c      	ldr	r3, [pc, #240]	; (80029d8 <xPortStartScheduler+0x118>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a3d      	ldr	r2, [pc, #244]	; (80029e0 <xPortStartScheduler+0x120>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d109      	bne.n	8002902 <xPortStartScheduler+0x42>
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e7fe      	b.n	8002900 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002902:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <xPortStartScheduler+0x124>)
 8002904:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	22ff      	movs	r2, #255	; 0xff
 8002912:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <xPortStartScheduler+0x128>)
 8002928:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <xPortStartScheduler+0x12c>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002930:	e009      	b.n	8002946 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <xPortStartScheduler+0x12c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3b01      	subs	r3, #1
 8002938:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <xPortStartScheduler+0x12c>)
 800293a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	b2db      	uxtb	r3, r3
 8002944:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b80      	cmp	r3, #128	; 0x80
 8002950:	d0ef      	beq.n	8002932 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <xPortStartScheduler+0x12c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	d009      	beq.n	8002972 <xPortStartScheduler+0xb2>
 800295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	e7fe      	b.n	8002970 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <xPortStartScheduler+0x12c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <xPortStartScheduler+0x12c>)
 800297a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <xPortStartScheduler+0x12c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <xPortStartScheduler+0x12c>)
 8002986:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <xPortStartScheduler+0x130>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <xPortStartScheduler+0x130>)
 8002996:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800299a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <xPortStartScheduler+0x130>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <xPortStartScheduler+0x130>)
 80029a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80029a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80029a8:	f000 f8d6 	bl	8002b58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <xPortStartScheduler+0x134>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80029b2:	f000 f8f5 	bl	8002ba0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <xPortStartScheduler+0x138>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <xPortStartScheduler+0x138>)
 80029bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80029c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80029c2:	f7ff ff69 	bl	8002898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80029c6:	f7ff fd5d 	bl	8002484 <vTaskSwitchContext>
	prvTaskExitError();
 80029ca:	f7ff ff21 	bl	8002810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	e000ed00 	.word	0xe000ed00
 80029dc:	410fc271 	.word	0x410fc271
 80029e0:	410fc270 	.word	0x410fc270
 80029e4:	e000e400 	.word	0xe000e400
 80029e8:	200003ac 	.word	0x200003ac
 80029ec:	200003b0 	.word	0x200003b0
 80029f0:	e000ed20 	.word	0xe000ed20
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	e000ef34 	.word	0xe000ef34

080029fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <vPortEnterCritical+0x54>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <vPortEnterCritical+0x54>)
 8002a1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <vPortEnterCritical+0x54>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10e      	bne.n	8002a44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <vPortEnterCritical+0x58>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <vPortEnterCritical+0x48>
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	e7fe      	b.n	8002a42 <vPortEnterCritical+0x46>
	}
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <vPortExitCritical+0x4c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <vPortExitCritical+0x22>
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	e7fe      	b.n	8002a78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <vPortExitCritical+0x4c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <vPortExitCritical+0x4c>)
 8002a82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <vPortExitCritical+0x4c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d104      	bne.n	8002a96 <vPortExitCritical+0x3e>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	2000000c 	.word	0x2000000c
	...

08002ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ab0:	f3ef 8009 	mrs	r0, PSP
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <pxCurrentTCBConst>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f01e 0f10 	tst.w	lr, #16
 8002ac0:	bf08      	it	eq
 8002ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aca:	6010      	str	r0, [r2, #0]
 8002acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ad4:	f380 8811 	msr	BASEPRI, r0
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f7ff fcd0 	bl	8002484 <vTaskSwitchContext>
 8002ae4:	f04f 0000 	mov.w	r0, #0
 8002ae8:	f380 8811 	msr	BASEPRI, r0
 8002aec:	bc09      	pop	{r0, r3}
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	6808      	ldr	r0, [r1, #0]
 8002af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af6:	f01e 0f10 	tst.w	lr, #16
 8002afa:	bf08      	it	eq
 8002afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b00:	f380 8809 	msr	PSP, r0
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	f3af 8000 	nop.w

08002b10 <pxCurrentTCBConst>:
 8002b10:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop

08002b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002b30:	f7ff fbf0 	bl	8002314 <xTaskIncrementTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <SysTick_Handler+0x3c>)
 8002b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	2300      	movs	r3, #0
 8002b44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <vPortSetupTimerInterrupt+0x34>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <vPortSetupTimerInterrupt+0x38>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <vPortSetupTimerInterrupt+0x3c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <vPortSetupTimerInterrupt+0x40>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <vPortSetupTimerInterrupt+0x44>)
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <vPortSetupTimerInterrupt+0x34>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010
 8002b90:	e000e018 	.word	0xe000e018
 8002b94:	20000000 	.word	0x20000000
 8002b98:	10624dd3 	.word	0x10624dd3
 8002b9c:	e000e014 	.word	0xe000e014

08002ba0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ba0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002bb0 <vPortEnableVFP+0x10>
 8002ba4:	6801      	ldr	r1, [r0, #0]
 8002ba6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002baa:	6001      	str	r1, [r0, #0]
 8002bac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002bae:	bf00      	nop
 8002bb0:	e000ed88 	.word	0xe000ed88

08002bb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002bc0:	f7ff fafe 	bl	80021c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002bc4:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <pvPortMalloc+0x170>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002bcc:	f000 f90c 	bl	8002de8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002bd0:	4b55      	ldr	r3, [pc, #340]	; (8002d28 <pvPortMalloc+0x174>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 808c 	bne.w	8002cf6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01c      	beq.n	8002c1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002be4:	2208      	movs	r2, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f023 0307 	bic.w	r3, r3, #7
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <pvPortMalloc+0x6a>
	__asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e7fe      	b.n	8002c1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d068      	beq.n	8002cf6 <pvPortMalloc+0x142>
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <pvPortMalloc+0x178>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d863      	bhi.n	8002cf6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002c2e:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <pvPortMalloc+0x17c>)
 8002c30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <pvPortMalloc+0x17c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c38:	e004      	b.n	8002c44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d903      	bls.n	8002c56 <pvPortMalloc+0xa2>
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f1      	bne.n	8002c3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <pvPortMalloc+0x170>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d04a      	beq.n	8002cf6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2208      	movs	r2, #8
 8002c66:	4413      	add	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad2      	subs	r2, r2, r3
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d91e      	bls.n	8002cc0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <pvPortMalloc+0xf4>
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	e7fe      	b.n	8002ca6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002cba:	69b8      	ldr	r0, [r7, #24]
 8002cbc:	f000 f8f6 	bl	8002eac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <pvPortMalloc+0x178>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <pvPortMalloc+0x178>)
 8002ccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <pvPortMalloc+0x178>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <pvPortMalloc+0x180>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d203      	bcs.n	8002ce2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <pvPortMalloc+0x178>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <pvPortMalloc+0x180>)
 8002ce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <pvPortMalloc+0x174>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002cf6:	f7ff fa71 	bl	80021dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <pvPortMalloc+0x164>
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	e7fe      	b.n	8002d16 <pvPortMalloc+0x162>
	return pvReturn;
 8002d18:	69fb      	ldr	r3, [r7, #28]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20003fbc 	.word	0x20003fbc
 8002d28:	20003fc8 	.word	0x20003fc8
 8002d2c:	20003fc0 	.word	0x20003fc0
 8002d30:	20003fb4 	.word	0x20003fb4
 8002d34:	20003fc4 	.word	0x20003fc4

08002d38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d046      	beq.n	8002dd8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4413      	add	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <vPortFree+0xa8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <vPortFree+0x42>
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e7fe      	b.n	8002d78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <vPortFree+0x5e>
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	e7fe      	b.n	8002d94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <vPortFree+0xa8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d019      	beq.n	8002dd8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d115      	bne.n	8002dd8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <vPortFree+0xa8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002dbc:	f7ff fa00 	bl	80021c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <vPortFree+0xac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <vPortFree+0xac>)
 8002dcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002dce:	6938      	ldr	r0, [r7, #16]
 8002dd0:	f000 f86c 	bl	8002eac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002dd4:	f7ff fa02 	bl	80021dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20003fc8 	.word	0x20003fc8
 8002de4:	20003fc0 	.word	0x20003fc0

08002de8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002dee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002df2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <prvHeapInit+0xac>)
 8002df6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00c      	beq.n	8002e1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3307      	adds	r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0307 	bic.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <prvHeapInit+0xac>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e20:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <prvHeapInit+0xb0>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <prvHeapInit+0xb0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002e34:	2208      	movs	r2, #8
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <prvHeapInit+0xb4>)
 8002e48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <prvHeapInit+0xb4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <prvHeapInit+0xb4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <prvHeapInit+0xb4>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <prvHeapInit+0xb8>)
 8002e76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <prvHeapInit+0xbc>)
 8002e7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <prvHeapInit+0xc0>)
 8002e82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	200003b4 	.word	0x200003b4
 8002e98:	20003fb4 	.word	0x20003fb4
 8002e9c:	20003fbc 	.word	0x20003fbc
 8002ea0:	20003fc4 	.word	0x20003fc4
 8002ea4:	20003fc0 	.word	0x20003fc0
 8002ea8:	20003fc8 	.word	0x20003fc8

08002eac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <prvInsertBlockIntoFreeList+0xac>)
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e002      	b.n	8002ec0 <prvInsertBlockIntoFreeList+0x14>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d8f7      	bhi.n	8002eba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d108      	bne.n	8002eee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	441a      	add	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	441a      	add	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d118      	bne.n	8002f34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <prvInsertBlockIntoFreeList+0xb0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d00d      	beq.n	8002f2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	441a      	add	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e008      	b.n	8002f3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <prvInsertBlockIntoFreeList+0xb0>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e003      	b.n	8002f3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d002      	beq.n	8002f4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20003fb4 	.word	0x20003fb4
 8002f5c:	20003fbc 	.word	0x20003fbc

08002f60 <__libc_init_array>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	4e0d      	ldr	r6, [pc, #52]	; (8002f98 <__libc_init_array+0x38>)
 8002f64:	4c0d      	ldr	r4, [pc, #52]	; (8002f9c <__libc_init_array+0x3c>)
 8002f66:	1ba4      	subs	r4, r4, r6
 8002f68:	10a4      	asrs	r4, r4, #2
 8002f6a:	2500      	movs	r5, #0
 8002f6c:	42a5      	cmp	r5, r4
 8002f6e:	d109      	bne.n	8002f84 <__libc_init_array+0x24>
 8002f70:	4e0b      	ldr	r6, [pc, #44]	; (8002fa0 <__libc_init_array+0x40>)
 8002f72:	4c0c      	ldr	r4, [pc, #48]	; (8002fa4 <__libc_init_array+0x44>)
 8002f74:	f000 f820 	bl	8002fb8 <_init>
 8002f78:	1ba4      	subs	r4, r4, r6
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	2500      	movs	r5, #0
 8002f7e:	42a5      	cmp	r5, r4
 8002f80:	d105      	bne.n	8002f8e <__libc_init_array+0x2e>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f88:	4798      	blx	r3
 8002f8a:	3501      	adds	r5, #1
 8002f8c:	e7ee      	b.n	8002f6c <__libc_init_array+0xc>
 8002f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f92:	4798      	blx	r3
 8002f94:	3501      	adds	r5, #1
 8002f96:	e7f2      	b.n	8002f7e <__libc_init_array+0x1e>
 8002f98:	08003048 	.word	0x08003048
 8002f9c:	08003048 	.word	0x08003048
 8002fa0:	08003048 	.word	0x08003048
 8002fa4:	0800304c 	.word	0x0800304c

08002fa8 <memset>:
 8002fa8:	4402      	add	r2, r0
 8002faa:	4603      	mov	r3, r0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
