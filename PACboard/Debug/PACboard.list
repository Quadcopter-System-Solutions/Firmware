
PACboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004870  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac0  08004ac0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004180  20000010  08004ad8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004190  08004ad8  00024190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010412  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029aa  00000000  00000000  00030452  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  00032e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00033d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000221e1  00000000  00000000  00034b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dace  00000000  00000000  00056d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1ff7  00000000  00000000  00064807  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001367fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  0013687c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004a38 	.word	0x08004a38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08004a38 	.word	0x08004a38

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <UART_Init>:

uint8_t txBuffer[TXBUFFERSIZE];
uint8_t rxBuffer[RXBUFFERSIZE];

void UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
//CLOCK
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b6d      	ldr	r3, [pc, #436]	; (80006e0 <UART_Init+0x1c0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a6c      	ldr	r2, [pc, #432]	; (80006e0 <UART_Init+0x1c0>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b6a      	ldr	r3, [pc, #424]	; (80006e0 <UART_Init+0x1c0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_USART6_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b66      	ldr	r3, [pc, #408]	; (80006e0 <UART_Init+0x1c0>)
 8000548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054a:	4a65      	ldr	r2, [pc, #404]	; (80006e0 <UART_Init+0x1c0>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	6453      	str	r3, [r2, #68]	; 0x44
 8000552:	4b63      	ldr	r3, [pc, #396]	; (80006e0 <UART_Init+0x1c0>)
 8000554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
__DMA2_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	4b5f      	ldr	r3, [pc, #380]	; (80006e0 <UART_Init+0x1c0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a5e      	ldr	r2, [pc, #376]	; (80006e0 <UART_Init+0x1c0>)
 8000568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <UART_Init+0x1c0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

//GPIO
GPIO_InitTypeDef UART_GPIO;

UART_GPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800057a:	23c0      	movs	r3, #192	; 0xc0
 800057c:	60fb      	str	r3, [r7, #12]
UART_GPIO.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	613b      	str	r3, [r7, #16]
UART_GPIO.Pull = GPIO_PULLUP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
UART_GPIO.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	61bb      	str	r3, [r7, #24]
UART_GPIO.Alternate = GPIO_AF8_USART6;
 800058a:	2308      	movs	r3, #8
 800058c:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &UART_GPIO);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4619      	mov	r1, r3
 8000594:	4853      	ldr	r0, [pc, #332]	; (80006e4 <UART_Init+0x1c4>)
 8000596:	f001 f867 	bl	8001668 <HAL_GPIO_Init>

//DMA
dma_tx.Instance                 = DMA2_Stream7;
 800059a:	4b53      	ldr	r3, [pc, #332]	; (80006e8 <UART_Init+0x1c8>)
 800059c:	4a53      	ldr	r2, [pc, #332]	; (80006ec <UART_Init+0x1cc>)
 800059e:	601a      	str	r2, [r3, #0]
dma_tx.Init.Channel             = DMA_CHANNEL_5;
 80005a0:	4b51      	ldr	r3, [pc, #324]	; (80006e8 <UART_Init+0x1c8>)
 80005a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80005a6:	605a      	str	r2, [r3, #4]
dma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80005a8:	4b4f      	ldr	r3, [pc, #316]	; (80006e8 <UART_Init+0x1c8>)
 80005aa:	2240      	movs	r2, #64	; 0x40
 80005ac:	609a      	str	r2, [r3, #8]
dma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80005ae:	4b4e      	ldr	r3, [pc, #312]	; (80006e8 <UART_Init+0x1c8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
dma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80005b4:	4b4c      	ldr	r3, [pc, #304]	; (80006e8 <UART_Init+0x1c8>)
 80005b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ba:	611a      	str	r2, [r3, #16]
dma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005bc:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <UART_Init+0x1c8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
dma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80005c2:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <UART_Init+0x1c8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
dma_tx.Init.Mode                = DMA_NORMAL;
 80005c8:	4b47      	ldr	r3, [pc, #284]	; (80006e8 <UART_Init+0x1c8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
dma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80005ce:	4b46      	ldr	r3, [pc, #280]	; (80006e8 <UART_Init+0x1c8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
dma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <UART_Init+0x1c8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
dma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80005da:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <UART_Init+0x1c8>)
 80005dc:	2203      	movs	r2, #3
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
dma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80005e0:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <UART_Init+0x1c8>)
 80005e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005e6:	62da      	str	r2, [r3, #44]	; 0x2c
dma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <UART_Init+0x1c8>)
 80005ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30

HAL_DMA_Init(&dma_tx);
 80005f0:	483d      	ldr	r0, [pc, #244]	; (80006e8 <UART_Init+0x1c8>)
 80005f2:	f000 fca9 	bl	8000f48 <HAL_DMA_Init>


dma_rx.Instance                 = DMA2_Stream1;
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <UART_Init+0x1d0>)
 80005f8:	4a3e      	ldr	r2, [pc, #248]	; (80006f4 <UART_Init+0x1d4>)
 80005fa:	601a      	str	r2, [r3, #0]
dma_rx.Init.Channel             = DMA_CHANNEL_5;
 80005fc:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <UART_Init+0x1d0>)
 80005fe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000602:	605a      	str	r2, [r3, #4]
dma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <UART_Init+0x1d0>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
dma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800060a:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <UART_Init+0x1d0>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
dma_rx.Init.MemInc              = DMA_MINC_DISABLE;
 8000610:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <UART_Init+0x1d0>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
dma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <UART_Init+0x1d0>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
dma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <UART_Init+0x1d0>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
dma_rx.Init.Mode                = DMA_NORMAL;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <UART_Init+0x1d0>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
dma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <UART_Init+0x1d0>)
 800062a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800062e:	621a      	str	r2, [r3, #32]
dma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <UART_Init+0x1d0>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
dma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <UART_Init+0x1d0>)
 8000638:	2203      	movs	r2, #3
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
dma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <UART_Init+0x1d0>)
 800063e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
dma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <UART_Init+0x1d0>)
 8000646:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064a:	631a      	str	r2, [r3, #48]	; 0x30

HAL_DMA_Init(&dma_rx);
 800064c:	4828      	ldr	r0, [pc, #160]	; (80006f0 <UART_Init+0x1d0>)
 800064e:	f000 fc7b 	bl	8000f48 <HAL_DMA_Init>



//UART
uart6.Instance        = USART6;
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <UART_Init+0x1d8>)
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <UART_Init+0x1dc>)
 8000656:	601a      	str	r2, [r3, #0]

uart6.Init.BaudRate   = 115200;
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <UART_Init+0x1d8>)
 800065a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065e:	605a      	str	r2, [r3, #4]
uart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <UART_Init+0x1d8>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
uart6.Init.StopBits   = UART_STOPBITS_1;
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <UART_Init+0x1d8>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
uart6.Init.Parity     = UART_PARITY_NONE;
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <UART_Init+0x1d8>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
uart6.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <UART_Init+0x1d8>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
uart6.Init.Mode       = UART_MODE_TX_RX;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <UART_Init+0x1d8>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
if(HAL_UART_Init(&uart6) != HAL_OK)
 800067e:	481e      	ldr	r0, [pc, #120]	; (80006f8 <UART_Init+0x1d8>)
 8000680:	f002 f802 	bl	8002688 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <UART_Init+0x170>
{
  errorMessage = 0x0002; //UART failure
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <UART_Init+0x1e0>)
 800068c:	2202      	movs	r2, #2
 800068e:	801a      	strh	r2, [r3, #0]
}


//Link DMA -> UART
__HAL_LINKDMA(&uart6, hdmatx, dma_tx);
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <UART_Init+0x1d8>)
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <UART_Init+0x1c8>)
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <UART_Init+0x1c8>)
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <UART_Init+0x1d8>)
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
__HAL_LINKDMA(&uart6, hdmarx, dma_rx);
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <UART_Init+0x1d8>)
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <UART_Init+0x1d0>)
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <UART_Init+0x1d0>)
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <UART_Init+0x1d8>)
 80006a6:	639a      	str	r2, [r3, #56]	; 0x38


HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2100      	movs	r1, #0
 80006ac:	2046      	movs	r0, #70	; 0x46
 80006ae:	f000 fc21 	bl	8000ef4 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006b2:	2046      	movs	r0, #70	; 0x46
 80006b4:	f000 fc3a 	bl	8000f2c <HAL_NVIC_EnableIRQ>

/* NVIC configuration for DMA transfer complete interrupt (USART6_RX) */
HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2039      	movs	r0, #57	; 0x39
 80006be:	f000 fc19 	bl	8000ef4 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006c2:	2039      	movs	r0, #57	; 0x39
 80006c4:	f000 fc32 	bl	8000f2c <HAL_NVIC_EnableIRQ>

/* NVIC for USART, to catch the TX complete */
HAL_NVIC_SetPriority(USART6_IRQn, 0, 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2100      	movs	r1, #0
 80006cc:	2047      	movs	r0, #71	; 0x47
 80006ce:	f000 fc11 	bl	8000ef4 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(USART6_IRQn);
 80006d2:	2047      	movs	r0, #71	; 0x47
 80006d4:	f000 fc2a 	bl	8000f2c <HAL_NVIC_EnableIRQ>
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020800 	.word	0x40020800
 80006e8:	2000400c 	.word	0x2000400c
 80006ec:	400264b8 	.word	0x400264b8
 80006f0:	200040ec 	.word	0x200040ec
 80006f4:	40026428 	.word	0x40026428
 80006f8:	2000406c 	.word	0x2000406c
 80006fc:	40011400 	.word	0x40011400
 8000700:	20004008 	.word	0x20004008

08000704 <TASK_UARTHandler>:


void TASK_UARTHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&uart6, rxBuffer, RXBUFFERSIZE);
 800070a:	2220      	movs	r2, #32
 800070c:	4912      	ldr	r1, [pc, #72]	; (8000758 <TASK_UARTHandler+0x54>)
 800070e:	4813      	ldr	r0, [pc, #76]	; (800075c <TASK_UARTHandler+0x58>)
 8000710:	f002 f87e 	bl	8002810 <HAL_UART_Receive_DMA>

	for(int i = 0; i < RXBUFFERSIZE; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e00b      	b.n	8000732 <TASK_UARTHandler+0x2e>
	{
		txBuffer[i]=rxBuffer[i];
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <TASK_UARTHandler+0x54>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	7819      	ldrb	r1, [r3, #0]
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <TASK_UARTHandler+0x5c>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	460a      	mov	r2, r1
 800072a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RXBUFFERSIZE; i++)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b1f      	cmp	r3, #31
 8000736:	ddf0      	ble.n	800071a <TASK_UARTHandler+0x16>
	}

	if(HAL_UART_Transmit_DMA(&uart6, (uint8_t*)txBuffer, TXBUFFERSIZE) != HAL_OK)
 8000738:	2220      	movs	r2, #32
 800073a:	4909      	ldr	r1, [pc, #36]	; (8000760 <TASK_UARTHandler+0x5c>)
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <TASK_UARTHandler+0x58>)
 800073e:	f001 fffb 	bl	8002738 <HAL_UART_Transmit_DMA>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <TASK_UARTHandler+0x4a>
	{
		errorMessage = 0x0003; //uart failure
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <TASK_UARTHandler+0x60>)
 800074a:	2203      	movs	r2, #3
 800074c:	801a      	strh	r2, [r3, #0]
	}
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200040ac 	.word	0x200040ac
 800075c:	2000406c 	.word	0x2000406c
 8000760:	200040cc 	.word	0x200040cc
 8000764:	20004008 	.word	0x20004008

08000768 <DMA2_Stream1_IRQHandler>:



//Interrupt Handling
void DMA2_Stream1_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&dma_rx);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <DMA2_Stream1_IRQHandler+0x10>)
 800076e:	f000 fd13 	bl	8001198 <HAL_DMA_IRQHandler>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200040ec 	.word	0x200040ec

0800077c <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&dma_tx);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <DMA2_Stream7_IRQHandler+0x10>)
 8000782:	f000 fd09 	bl	8001198 <HAL_DMA_IRQHandler>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000400c 	.word	0x2000400c

08000790 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart6);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USART6_IRQHandler+0x10>)
 8000796:	f002 f8bb 	bl	8002910 <HAL_UART_IRQHandler>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000406c 	.word	0x2000406c

080007a4 <TASK_errorHandler>:
static GPIO_InitTypeDef  GPIO_InitStructRED;
static GPIO_InitTypeDef  GPIO_InitStructBLU;
static GPIO_InitTypeDef  GPIO_InitStructGRN;

void TASK_errorHandler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <TASK_nucleoRED>:

void TASK_nucleoRED(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
		GPIOB->ODR ^= GPIO_PIN_14;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <TASK_nucleoRED+0x1c>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <TASK_nucleoRED+0x1c>)
 80007be:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80007c2:	6153      	str	r3, [r2, #20]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40020400 	.word	0x40020400

080007d4 <TASK_nucleoBLU>:

void TASK_nucleoBLU(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
		GPIOB->ODR ^= GPIO_PIN_7;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <TASK_nucleoBLU+0x1c>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <TASK_nucleoBLU+0x1c>)
 80007de:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80007e2:	6153      	str	r3, [r2, #20]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40020400 	.word	0x40020400

080007f4 <TASK_nucleoGRN>:

void TASK_nucleoGRN(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
		GPIOB->ODR ^= GPIO_PIN_0;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <TASK_nucleoGRN+0x1c>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <TASK_nucleoGRN+0x1c>)
 80007fe:	f083 0301 	eor.w	r3, r3, #1
 8000802:	6153      	str	r3, [r2, #20]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40020400 	.word	0x40020400

08000814 <errorInit>:

void errorInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	GPIO_InitStructRED.Mode  = GPIO_MODE_OUTPUT_PP;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <errorInit+0x6c>)
 800081a:	2201      	movs	r2, #1
 800081c:	605a      	str	r2, [r3, #4]
	GPIO_InitStructRED.Pull  = GPIO_PULLUP;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <errorInit+0x6c>)
 8000820:	2201      	movs	r2, #1
 8000822:	609a      	str	r2, [r3, #8]
	GPIO_InitStructRED.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <errorInit+0x6c>)
 8000826:	2203      	movs	r2, #3
 8000828:	60da      	str	r2, [r3, #12]
	GPIO_InitStructRED.Pin = GPIO_PIN_7;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <errorInit+0x6c>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructRED);
 8000830:	4913      	ldr	r1, [pc, #76]	; (8000880 <errorInit+0x6c>)
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <errorInit+0x70>)
 8000834:	f000 ff18 	bl	8001668 <HAL_GPIO_Init>

	GPIO_InitStructBLU.Mode  = GPIO_MODE_OUTPUT_PP;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <errorInit+0x74>)
 800083a:	2201      	movs	r2, #1
 800083c:	605a      	str	r2, [r3, #4]
	GPIO_InitStructBLU.Pull  = GPIO_PULLUP;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <errorInit+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	609a      	str	r2, [r3, #8]
	GPIO_InitStructBLU.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <errorInit+0x74>)
 8000846:	2203      	movs	r2, #3
 8000848:	60da      	str	r2, [r3, #12]
	GPIO_InitStructBLU.Pin = GPIO_PIN_14;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <errorInit+0x74>)
 800084c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000850:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructBLU);
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <errorInit+0x74>)
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <errorInit+0x70>)
 8000856:	f000 ff07 	bl	8001668 <HAL_GPIO_Init>

	GPIO_InitStructGRN.Mode  = GPIO_MODE_OUTPUT_PP;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <errorInit+0x78>)
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
	GPIO_InitStructGRN.Pull  = GPIO_PULLUP;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <errorInit+0x78>)
 8000862:	2201      	movs	r2, #1
 8000864:	609a      	str	r2, [r3, #8]
	GPIO_InitStructGRN.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <errorInit+0x78>)
 8000868:	2203      	movs	r2, #3
 800086a:	60da      	str	r2, [r3, #12]
	GPIO_InitStructGRN.Pin = GPIO_PIN_0;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <errorInit+0x78>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructGRN);
 8000872:	4906      	ldr	r1, [pc, #24]	; (800088c <errorInit+0x78>)
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <errorInit+0x70>)
 8000876:	f000 fef7 	bl	8001668 <HAL_GPIO_Init>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000002c 	.word	0x2000002c
 8000884:	40020400 	.word	0x40020400
 8000888:	20000040 	.word	0x20000040
 800088c:	20000054 	.word	0x20000054

08000890 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <vApplicationGetIdleTaskMemory+0x2c>)
 80008a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <vApplicationGetIdleTaskMemory+0x30>)
 80008a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000068 	.word	0x20000068
 80008c0:	200000bc 	.word	0x200000bc

080008c4 <main>:

void SystemClock_Config(void);
void StartDefaultTask(void const * argument);

int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  HAL_Init();
 80008c8:	f000 fa1a 	bl	8000d00 <HAL_Init>
  SystemClock_Config();
 80008cc:	f000 f808 	bl	80008e0 <SystemClock_Config>
  errorInit();
 80008d0:	f7ff ffa0 	bl	8000814 <errorInit>
  UART_Init();
 80008d4:	f7ff fe24 	bl	8000520 <UART_Init>
  RTOS_init();
 80008d8:	f000 f8a2 	bl	8000a20 <RTOS_init>

  for(;;);
 80008dc:	e7fe      	b.n	80008dc <main+0x18>
	...

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	2234      	movs	r2, #52	; 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 f89a 	bl	8004a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <SystemClock_Config+0xbc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a23      	ldr	r2, [pc, #140]	; (800099c <SystemClock_Config+0xbc>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <SystemClock_Config+0xbc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <SystemClock_Config+0xc0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <SystemClock_Config+0xc0>)
 800092a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <SystemClock_Config+0xc0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000948:	2300      	movs	r3, #0
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fa19 	bl	8001d88 <HAL_RCC_OscConfig>
  {
    //error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]


  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <SystemClock_Config+0xbc>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SystemClock_Config+0xbc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <SystemClock_Config+0xbc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fffd 	bl	800198c <HAL_RCC_ClockConfig>
  {
	 //error
  }
}
 8000992:	bf00      	nop
 8000994:	3758      	adds	r7, #88	; 0x58
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b6:	f000 f9c5 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010000 	.word	0x40010000

080009c8 <PRIVATE_errorHandler>:
static void PRIVATE_nucleoBLU(void);
static void PRIVATE_nucleoGRN(void);
static void PRIVATE_UARTHandler(void);

static void PRIVATE_errorHandler()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_errorHandler();
 80009cc:	f7ff feea 	bl	80007a4 <TASK_errorHandler>
		vTaskDelay(500);
 80009d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d4:	f003 f8a4 	bl	8003b20 <vTaskDelay>
		TASK_errorHandler();
 80009d8:	e7f8      	b.n	80009cc <PRIVATE_errorHandler+0x4>

080009da <PRIVATE_nucleoRED>:
	}
}

static void PRIVATE_nucleoRED()
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoRED();
 80009de:	f7ff fee9 	bl	80007b4 <TASK_nucleoRED>
		vTaskDelay(500);
 80009e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e6:	f003 f89b 	bl	8003b20 <vTaskDelay>
		TASK_nucleoRED();
 80009ea:	e7f8      	b.n	80009de <PRIVATE_nucleoRED+0x4>

080009ec <PRIVATE_nucleoBLU>:
	}
}

static void PRIVATE_nucleoBLU()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoBLU();
 80009f0:	f7ff fef0 	bl	80007d4 <TASK_nucleoBLU>
		vTaskDelay(250);
 80009f4:	20fa      	movs	r0, #250	; 0xfa
 80009f6:	f003 f893 	bl	8003b20 <vTaskDelay>
		TASK_nucleoBLU();
 80009fa:	e7f9      	b.n	80009f0 <PRIVATE_nucleoBLU+0x4>

080009fc <PRIVATE_nucleoGRN>:
	}
}

static void PRIVATE_nucleoGRN()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoGRN();
 8000a00:	f7ff fef8 	bl	80007f4 <TASK_nucleoGRN>
		vTaskDelay(100);
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f003 f88b 	bl	8003b20 <vTaskDelay>
	{
 8000a0a:	e7f9      	b.n	8000a00 <PRIVATE_nucleoGRN+0x4>

08000a0c <PRIVATE_UARTHandler>:
	}
}

static void PRIVATE_UARTHandler()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_UARTHandler();
 8000a10:	f7ff fe78 	bl	8000704 <TASK_UARTHandler>
		vTaskDelay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a18:	f003 f882 	bl	8003b20 <vTaskDelay>
		TASK_UARTHandler();
 8000a1c:	e7f8      	b.n	8000a10 <PRIVATE_UARTHandler+0x4>
	...

08000a20 <RTOS_init>:




void RTOS_init()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af02      	add	r7, sp, #8
	BaseType_t ret;


	TaskHandle_t errorHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_errorHandler,
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a36:	4935      	ldr	r1, [pc, #212]	; (8000b0c <RTOS_init+0xec>)
 8000a38:	4835      	ldr	r0, [pc, #212]	; (8000b10 <RTOS_init+0xf0>)
 8000a3a:	f002 ff3b 	bl	80038b4 <xTaskCreate>
 8000a3e:	6178      	str	r0, [r7, #20]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 1U,
				&errorHandler_th);

		if(ret != pdPASS)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d006      	beq.n	8000a54 <RTOS_init+0x34>
		{
			errorMessage |= 0x0001; //RTOS init error
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <RTOS_init+0xf4>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <RTOS_init+0xf4>)
 8000a52:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoRED_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_nucleoRED,
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a64:	492c      	ldr	r1, [pc, #176]	; (8000b18 <RTOS_init+0xf8>)
 8000a66:	482d      	ldr	r0, [pc, #180]	; (8000b1c <RTOS_init+0xfc>)
 8000a68:	f002 ff24 	bl	80038b4 <xTaskCreate>
 8000a6c:	6178      	str	r0, [r7, #20]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoRED_th);

		if(ret != pdPASS)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d006      	beq.n	8000a82 <RTOS_init+0x62>
		{
			errorMessage |= 0x0001; //RTOS init error
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <RTOS_init+0xf4>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <RTOS_init+0xf4>)
 8000a80:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoBLUE_th;

	xTaskCreate((TaskFunction_t)PRIVATE_nucleoBLU,
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	2303      	movs	r3, #3
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a92:	4923      	ldr	r1, [pc, #140]	; (8000b20 <RTOS_init+0x100>)
 8000a94:	4823      	ldr	r0, [pc, #140]	; (8000b24 <RTOS_init+0x104>)
 8000a96:	f002 ff0d 	bl	80038b4 <xTaskCreate>
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoBLUE_th);

		if(ret != pdPASS)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d006      	beq.n	8000aae <RTOS_init+0x8e>
		{
			errorMessage |= 0x00000001; //RTOS init error
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <RTOS_init+0xf4>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <RTOS_init+0xf4>)
 8000aac:	801a      	strh	r2, [r3, #0]
		}

	TaskHandle_t nucleoGRN_th;

	xTaskCreate((TaskFunction_t)PRIVATE_nucleoGRN,
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000abc:	491a      	ldr	r1, [pc, #104]	; (8000b28 <RTOS_init+0x108>)
 8000abe:	481b      	ldr	r0, [pc, #108]	; (8000b2c <RTOS_init+0x10c>)
 8000ac0:	f002 fef8 	bl	80038b4 <xTaskCreate>
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoGRN_th);

		if(ret != pdPASS)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d006      	beq.n	8000ad8 <RTOS_init+0xb8>
		{
			errorMessage |= 0x00000001; //RTOS init error
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <RTOS_init+0xf4>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <RTOS_init+0xf4>)
 8000ad6:	801a      	strh	r2, [r3, #0]
		}

	TaskHandle_t UARTHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_UARTHandler,
 8000ad8:	463b      	mov	r3, r7
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	2305      	movs	r3, #5
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae6:	4912      	ldr	r1, [pc, #72]	; (8000b30 <RTOS_init+0x110>)
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <RTOS_init+0x114>)
 8000aea:	f002 fee3 	bl	80038b4 <xTaskCreate>
 8000aee:	6178      	str	r0, [r7, #20]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 5U,
				&UARTHandler_th);

		if(ret != pdPASS)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d006      	beq.n	8000b04 <RTOS_init+0xe4>
		{
			errorMessage |= 0x0001; //RTOS init error
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <RTOS_init+0xf4>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <RTOS_init+0xf4>)
 8000b02:	801a      	strh	r2, [r3, #0]
		}

	vTaskStartScheduler();
 8000b04:	f003 f840 	bl	8003b88 <vTaskStartScheduler>

	for(;;);
 8000b08:	e7fe      	b.n	8000b08 <RTOS_init+0xe8>
 8000b0a:	bf00      	nop
 8000b0c:	08004a50 	.word	0x08004a50
 8000b10:	080009c9 	.word	0x080009c9
 8000b14:	20004008 	.word	0x20004008
 8000b18:	08004a60 	.word	0x08004a60
 8000b1c:	080009db 	.word	0x080009db
 8000b20:	08004a6c 	.word	0x08004a6c
 8000b24:	080009ed 	.word	0x080009ed
 8000b28:	08004a78 	.word	0x08004a78
 8000b2c:	080009fd 	.word	0x080009fd
 8000b30:	08004a84 	.word	0x08004a84
 8000b34:	08000a0d 	.word	0x08000a0d

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2019      	movs	r0, #25
 8000b9e:	f000 f9a9 	bl	8000ef4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ba2:	2019      	movs	r0, #25
 8000ba4:	f000 f9c2 	bl	8000f2c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_InitTick+0xa0>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <HAL_InitTick+0xa0>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_InitTick+0xa0>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc4:	f107 0210 	add.w	r2, r7, #16
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f8a8 	bl	8001d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bd4:	f001 f892 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8000bd8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <HAL_InitTick+0xa4>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	0c9b      	lsrs	r3, r3, #18
 8000be4:	3b01      	subs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_InitTick+0xa8>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <HAL_InitTick+0xac>)
 8000bec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_InitTick+0xa8>)
 8000bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_InitTick+0xa8>)
 8000bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_InitTick+0xa8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_InitTick+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <HAL_InitTick+0xa8>)
 8000c0a:	f001 faff 	bl	800220c <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d104      	bne.n	8000c1e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <HAL_InitTick+0xa8>)
 8000c16:	f001 fb2e 	bl	8002276 <HAL_TIM_Base_Start_IT>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	2000414c 	.word	0x2000414c
 8000c34:	40010000 	.word	0x40010000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c72:	f001 fb24 	bl	80022be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000414c 	.word	0x2000414c

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <SystemInit+0x28>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <SystemInit+0x28>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SystemInit+0x28>)
 8000c96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cb2:	e003      	b.n	8000cbc <LoopCopyDataInit>

08000cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cba:	3104      	adds	r1, #4

08000cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cc4:	d3f6      	bcc.n	8000cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cc8:	e002      	b.n	8000cd0 <LoopFillZerobss>

08000cca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ccc:	f842 3b04 	str.w	r3, [r2], #4

08000cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cd4:	d3f9      	bcc.n	8000cca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ffd3 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 fe81 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fdf1 	bl	80008c4 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ce4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000ce8:	08004ac8 	.word	0x08004ac8
  ldr  r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cf0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000cf4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000cf8:	20004190 	.word	0x20004190

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_Init+0x40>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_Init+0x40>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x40>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8d8 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff ff2a 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff ff00 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	2000418c 	.word	0x2000418c

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000418c 	.word	0x2000418c

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ff0a 	bl	8000d6c <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e099      	b.n	8001098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0201 	bic.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f84:	e00f      	b.n	8000fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f86:	f7ff fef1 	bl	8000d6c <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d908      	bls.n	8000fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2220      	movs	r2, #32
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e078      	b.n	8001098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1e8      	bne.n	8000f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <HAL_DMA_Init+0x158>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d107      	bne.n	8001010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4313      	orrs	r3, r2
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4313      	orrs	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f023 0307 	bic.w	r3, r3, #7
 8001026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	4313      	orrs	r3, r2
 8001030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	2b04      	cmp	r3, #4
 8001038:	d117      	bne.n	800106a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4313      	orrs	r3, r2
 8001042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00e      	beq.n	800106a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 fa91 	bl	8001574 <DMA_CheckFifoParam>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2240      	movs	r2, #64	; 0x40
 800105c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001066:	2301      	movs	r3, #1
 8001068:	e016      	b.n	8001098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fa48 	bl	8001508 <DMA_CalcBaseAndBitshift>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	223f      	movs	r2, #63	; 0x3f
 8001082:	409a      	lsls	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	e010803f 	.word	0xe010803f

080010a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <HAL_DMA_Start_IT+0x26>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e040      	b.n	800114c <HAL_DMA_Start_IT+0xa8>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d12f      	bne.n	800113e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2202      	movs	r2, #2
 80010e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 f9da 	bl	80014ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fc:	223f      	movs	r2, #63	; 0x3f
 80010fe:	409a      	lsls	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0216 	orr.w	r2, r2, #22
 8001112:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d007      	beq.n	800112c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0208 	orr.w	r2, r2, #8
 800112a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e005      	b.n	800114a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001146:	2302      	movs	r3, #2
 8001148:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800114a:	7dfb      	ldrb	r3, [r7, #23]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d004      	beq.n	8001172 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00c      	b.n	800118c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2205      	movs	r2, #5
 8001176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011a4:	4b92      	ldr	r3, [pc, #584]	; (80013f0 <HAL_DMA_IRQHandler+0x258>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <HAL_DMA_IRQHandler+0x25c>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0a9b      	lsrs	r3, r3, #10
 80011b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c2:	2208      	movs	r2, #8
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01a      	beq.n	8001204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0204 	bic.w	r2, r2, #4
 80011ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	2208      	movs	r2, #8
 80011f2:	409a      	lsls	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	2201      	movs	r2, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d012      	beq.n	800123a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2201      	movs	r2, #1
 8001228:	409a      	lsls	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f043 0202 	orr.w	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123e:	2204      	movs	r2, #4
 8001240:	409a      	lsls	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d012      	beq.n	8001270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2204      	movs	r2, #4
 800125e:	409a      	lsls	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	f043 0204 	orr.w	r2, r3, #4
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001274:	2210      	movs	r2, #16
 8001276:	409a      	lsls	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d043      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03c      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	2210      	movs	r2, #16
 8001294:	409a      	lsls	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d018      	beq.n	80012da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d108      	bne.n	80012c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d024      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
 80012c6:	e01f      	b.n	8001308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01b      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	4798      	blx	r3
 80012d8:	e016      	b.n	8001308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0208 	bic.w	r2, r2, #8
 80012f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130c:	2220      	movs	r2, #32
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 808e 	beq.w	8001436 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8086 	beq.w	8001436 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132e:	2220      	movs	r2, #32
 8001330:	409a      	lsls	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b05      	cmp	r3, #5
 8001340:	d136      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0216 	bic.w	r2, r2, #22
 8001350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <HAL_DMA_IRQHandler+0x1da>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0208 	bic.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	223f      	movs	r2, #63	; 0x3f
 8001388:	409a      	lsls	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d07d      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
        }
        return;
 80013ae:	e078      	b.n	80014a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01c      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d108      	bne.n	80013de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d030      	beq.n	8001436 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
 80013dc:	e02b      	b.n	8001436 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d027      	beq.n	8001436 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
 80013ee:	e022      	b.n	8001436 <HAL_DMA_IRQHandler+0x29e>
 80013f0:	20000000 	.word	0x20000000
 80013f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0210 	bic.w	r2, r2, #16
 8001414:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143a:	2b00      	cmp	r3, #0
 800143c:	d032      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d022      	beq.n	8001490 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2205      	movs	r2, #5
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	d307      	bcc.n	800147e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f2      	bne.n	8001462 <HAL_DMA_IRQHandler+0x2ca>
 800147c:	e000      	b.n	8001480 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800147e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e000      	b.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80014a2:	bf00      	nop
    }
  }
}
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop

080014ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b40      	cmp	r3, #64	; 0x40
 80014d8:	d108      	bne.n	80014ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014ea:	e007      	b.n	80014fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	3b10      	subs	r3, #16
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <DMA_CalcBaseAndBitshift+0x64>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <DMA_CalcBaseAndBitshift+0x68>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d909      	bls.n	800154a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	1d1a      	adds	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	; 0x58
 8001548:	e007      	b.n	800155a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001552:	f023 0303 	bic.w	r3, r3, #3
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	aaaaaaab 	.word	0xaaaaaaab
 8001570:	08004ab0 	.word	0x08004ab0

08001574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d11f      	bne.n	80015ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d855      	bhi.n	8001640 <DMA_CheckFifoParam+0xcc>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DMA_CheckFifoParam+0x28>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015bf 	.word	0x080015bf
 80015a4:	080015ad 	.word	0x080015ad
 80015a8:	08001641 	.word	0x08001641
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d045      	beq.n	8001644 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015bc:	e042      	b.n	8001644 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015c6:	d13f      	bne.n	8001648 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015cc:	e03c      	b.n	8001648 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d6:	d121      	bne.n	800161c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d836      	bhi.n	800164c <DMA_CheckFifoParam+0xd8>
 80015de:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <DMA_CheckFifoParam+0x70>)
 80015e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	080015fb 	.word	0x080015fb
 80015ec:	080015f5 	.word	0x080015f5
 80015f0:	0800160d 	.word	0x0800160d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
      break;
 80015f8:	e02f      	b.n	800165a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d024      	beq.n	8001650 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800160a:	e021      	b.n	8001650 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001614:	d11e      	bne.n	8001654 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800161a:	e01b      	b.n	8001654 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d902      	bls.n	8001628 <DMA_CheckFifoParam+0xb4>
 8001622:	2b03      	cmp	r3, #3
 8001624:	d003      	beq.n	800162e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001626:	e018      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
      break;
 800162c:	e015      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00e      	beq.n	8001658 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
      break;
 800163e:	e00b      	b.n	8001658 <DMA_CheckFifoParam+0xe4>
      break;
 8001640:	bf00      	nop
 8001642:	e00a      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;
 8001644:	bf00      	nop
 8001646:	e008      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;
 8001648:	bf00      	nop
 800164a:	e006      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;
 800164c:	bf00      	nop
 800164e:	e004      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;
 8001650:	bf00      	nop
 8001652:	e002      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;   
 8001654:	bf00      	nop
 8001656:	e000      	b.n	800165a <DMA_CheckFifoParam+0xe6>
      break;
 8001658:	bf00      	nop
    }
  } 
  
  return status; 
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	e165      	b.n	8001950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8154 	bne.w	800194a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d00b      	beq.n	80016c2 <HAL_GPIO_Init+0x5a>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b6:	2b11      	cmp	r3, #17
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d130      	bne.n	8001724 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 0201 	and.w	r2, r3, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0xfc>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b12      	cmp	r3, #18
 8001762:	d123      	bne.n	80017ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	69b9      	ldr	r1, [r7, #24]
 80017a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0203 	and.w	r2, r3, #3
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80ae 	beq.w	800194a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <HAL_GPIO_Init+0x2fc>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a5b      	ldr	r2, [pc, #364]	; (8001964 <HAL_GPIO_Init+0x2fc>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b59      	ldr	r3, [pc, #356]	; (8001964 <HAL_GPIO_Init+0x2fc>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180a:	4a57      	ldr	r2, [pc, #348]	; (8001968 <HAL_GPIO_Init+0x300>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4e      	ldr	r2, [pc, #312]	; (800196c <HAL_GPIO_Init+0x304>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d025      	beq.n	8001882 <HAL_GPIO_Init+0x21a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4d      	ldr	r2, [pc, #308]	; (8001970 <HAL_GPIO_Init+0x308>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01f      	beq.n	800187e <HAL_GPIO_Init+0x216>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <HAL_GPIO_Init+0x30c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d019      	beq.n	800187a <HAL_GPIO_Init+0x212>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_GPIO_Init+0x310>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x20e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_GPIO_Init+0x314>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00d      	beq.n	8001872 <HAL_GPIO_Init+0x20a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a49      	ldr	r2, [pc, #292]	; (8001980 <HAL_GPIO_Init+0x318>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x206>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a48      	ldr	r2, [pc, #288]	; (8001984 <HAL_GPIO_Init+0x31c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_GPIO_Init+0x202>
 8001866:	2306      	movs	r3, #6
 8001868:	e00c      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800186a:	2307      	movs	r3, #7
 800186c:	e00a      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800186e:	2305      	movs	r3, #5
 8001870:	e008      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 8001872:	2304      	movs	r3, #4
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 8001876:	2303      	movs	r3, #3
 8001878:	e004      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800187a:	2302      	movs	r3, #2
 800187c:	e002      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 8001882:	2300      	movs	r3, #0
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f002 0203 	and.w	r2, r2, #3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4093      	lsls	r3, r2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001894:	4934      	ldr	r1, [pc, #208]	; (8001968 <HAL_GPIO_Init+0x300>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_GPIO_Init+0x320>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c6:	4a30      	ldr	r2, [pc, #192]	; (8001988 <HAL_GPIO_Init+0x320>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_GPIO_Init+0x320>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f0:	4a25      	ldr	r2, [pc, #148]	; (8001988 <HAL_GPIO_Init+0x320>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_GPIO_Init+0x320>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_GPIO_Init+0x320>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_GPIO_Init+0x320>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_GPIO_Init+0x320>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	f67f ae96 	bls.w	8001684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001958:	bf00      	nop
 800195a:	3724      	adds	r7, #36	; 0x24
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020800 	.word	0x40020800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40021400 	.word	0x40021400
 8001984:	40021800 	.word	0x40021800
 8001988:	40013c00 	.word	0x40013c00

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0cc      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d90c      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b8      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	494d      	ldr	r1, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d044      	beq.n	8001aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d119      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e07f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e067      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 0203 	bic.w	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4934      	ldr	r1, [pc, #208]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f976 	bl	8000d6c <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f972 	bl	8000d6c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e04f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 020c 	and.w	r2, r3, #12
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1eb      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d20c      	bcs.n	8001ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e032      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4916      	ldr	r1, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	490e      	ldr	r1, [pc, #56]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b12:	f000 f821 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b16:	4601      	mov	r1, r0
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	5cd3      	ldrb	r3, [r2, r3]
 8001b26:	fa21 f303 	lsr.w	r3, r1, r3
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f828 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08004a98 	.word	0x08004a98
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6e:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d007      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x32>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d008      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x38>
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 808d 	bne.w	8001c9e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b86:	60bb      	str	r3, [r7, #8]
       break;
 8001b88:	e08c      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b8a:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b8c:	60bb      	str	r3, [r7, #8]
      break;
 8001b8e:	e089      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9a:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d023      	beq.n	8001bee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	f04f 0400 	mov.w	r4, #0
 8001bb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	ea03 0501 	and.w	r5, r3, r1
 8001bbc:	ea04 0602 	and.w	r6, r4, r2
 8001bc0:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bc2:	fb02 f106 	mul.w	r1, r2, r6
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	fb02 f205 	mul.w	r2, r2, r5
 8001bcc:	440a      	add	r2, r1
 8001bce:	493a      	ldr	r1, [pc, #232]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bd0:	fba5 0101 	umull	r0, r1, r5, r1
 8001bd4:	1853      	adds	r3, r2, r1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f04f 0400 	mov.w	r4, #0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	f7fe fb1d 	bl	8000220 <__aeabi_uldivmod>
 8001be6:	4603      	mov	r3, r0
 8001be8:	460c      	mov	r4, r1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e049      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	099b      	lsrs	r3, r3, #6
 8001bf4:	f04f 0400 	mov.w	r4, #0
 8001bf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	ea03 0501 	and.w	r5, r3, r1
 8001c04:	ea04 0602 	and.w	r6, r4, r2
 8001c08:	4629      	mov	r1, r5
 8001c0a:	4632      	mov	r2, r6
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	0154      	lsls	r4, r2, #5
 8001c16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c1a:	014b      	lsls	r3, r1, #5
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4622      	mov	r2, r4
 8001c20:	1b49      	subs	r1, r1, r5
 8001c22:	eb62 0206 	sbc.w	r2, r2, r6
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	f04f 0400 	mov.w	r4, #0
 8001c2e:	0194      	lsls	r4, r2, #6
 8001c30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c34:	018b      	lsls	r3, r1, #6
 8001c36:	1a5b      	subs	r3, r3, r1
 8001c38:	eb64 0402 	sbc.w	r4, r4, r2
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	00e2      	lsls	r2, r4, #3
 8001c46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c4a:	00d9      	lsls	r1, r3, #3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4614      	mov	r4, r2
 8001c50:	195b      	adds	r3, r3, r5
 8001c52:	eb44 0406 	adc.w	r4, r4, r6
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	02a2      	lsls	r2, r4, #10
 8001c60:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c64:	0299      	lsls	r1, r3, #10
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f04f 0400 	mov.w	r4, #0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	f7fe fad2 	bl	8000220 <__aeabi_uldivmod>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	60bb      	str	r3, [r7, #8]
      break;
 8001c9c:	e002      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ca0:	60bb      	str	r3, [r7, #8]
      break;
 8001ca2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	017d7840 	.word	0x017d7840

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08004aa8 	.word	0x08004aa8

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffdc 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08004aa8 	.word	0x08004aa8

08001d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	220f      	movs	r2, #15
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RCC_GetClockConfig+0x60>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 020f 	and.w	r2, r3, #15
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d075      	beq.n	8001e8c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001da0:	4ba2      	ldr	r3, [pc, #648]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d00c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dac:	4b9f      	ldr	r3, [pc, #636]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d112      	bne.n	8001dde <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db8:	4b9c      	ldr	r3, [pc, #624]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc4:	d10b      	bne.n	8001dde <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc6:	4b99      	ldr	r3, [pc, #612]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d05b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x102>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d157      	bne.n	8001e8a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e20b      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x6e>
 8001de8:	4b90      	ldr	r3, [pc, #576]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a8f      	ldr	r2, [pc, #572]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e01d      	b.n	8001e32 <HAL_RCC_OscConfig+0xaa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCC_OscConfig+0x92>
 8001e00:	4b8a      	ldr	r3, [pc, #552]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a89      	ldr	r2, [pc, #548]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b87      	ldr	r3, [pc, #540]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a86      	ldr	r2, [pc, #536]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0xaa>
 8001e1a:	4b84      	ldr	r3, [pc, #528]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a83      	ldr	r2, [pc, #524]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a80      	ldr	r2, [pc, #512]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d013      	beq.n	8001e62 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff97 	bl	8000d6c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e42:	f7fe ff93 	bl	8000d6c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1d0      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0xba>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7fe ff83 	bl	8000d6c <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6a:	f7fe ff7f 	bl	8000d6c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	; 0x64
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1bc      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7c:	4b6b      	ldr	r3, [pc, #428]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0xe2>
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d063      	beq.n	8001f60 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e98:	4b64      	ldr	r3, [pc, #400]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea4:	4b61      	ldr	r3, [pc, #388]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d11c      	bne.n	8001eea <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb0:	4b5e      	ldr	r3, [pc, #376]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d116      	bne.n	8001eea <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebc:	4b5b      	ldr	r3, [pc, #364]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x14c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e190      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b55      	ldr	r3, [pc, #340]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4952      	ldr	r1, [pc, #328]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee8:	e03a      	b.n	8001f60 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef2:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <HAL_RCC_OscConfig+0x2a8>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff38 	bl	8000d6c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f00:	f7fe ff34 	bl	8000d6c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e171      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b43      	ldr	r3, [pc, #268]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	493f      	ldr	r1, [pc, #252]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
 8001f32:	e015      	b.n	8001f60 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCC_OscConfig+0x2a8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff17 	bl	8000d6c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe ff13 	bl	8000d6c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e150      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d030      	beq.n	8001fce <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fef7 	bl	8000d6c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f82:	f7fe fef3 	bl	8000d6c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e130      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1fa>
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fee0 	bl	8000d6c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fedc 	bl	8000d6c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e119      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 809f 	beq.w	800211a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_OscConfig+0x2a4>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002008:	2301      	movs	r3, #1
 800200a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_RCC_OscConfig+0x2b0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d120      	bne.n	800205a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_RCC_OscConfig+0x2b0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_RCC_OscConfig+0x2b0>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002024:	f7fe fea2 	bl	8000d6c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	e010      	b.n	800204e <HAL_RCC_OscConfig+0x2c6>
 800202c:	40023800 	.word	0x40023800
 8002030:	42470000 	.word	0x42470000
 8002034:	42470e80 	.word	0x42470e80
 8002038:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203c:	f7fe fe96 	bl	8000d6c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0d3      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x478>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d106      	bne.n	8002070 <HAL_RCC_OscConfig+0x2e8>
 8002062:	4b68      	ldr	r3, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a67      	ldr	r2, [pc, #412]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	e01c      	b.n	80020aa <HAL_RCC_OscConfig+0x322>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b05      	cmp	r3, #5
 8002076:	d10c      	bne.n	8002092 <HAL_RCC_OscConfig+0x30a>
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	4a61      	ldr	r2, [pc, #388]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6713      	str	r3, [r2, #112]	; 0x70
 8002084:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6713      	str	r3, [r2, #112]	; 0x70
 8002090:	e00b      	b.n	80020aa <HAL_RCC_OscConfig+0x322>
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a5b      	ldr	r2, [pc, #364]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d015      	beq.n	80020de <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe fe5b 	bl	8000d6c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fe57 	bl	8000d6c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e092      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ee      	beq.n	80020ba <HAL_RCC_OscConfig+0x332>
 80020dc:	e014      	b.n	8002108 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe fe45 	bl	8000d6c <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fe41 	bl	8000d6c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e07c      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a3c      	ldr	r2, [pc, #240]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d068      	beq.n	80021f4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d060      	beq.n	80021f0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d145      	bne.n	80021c2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <HAL_RCC_OscConfig+0x480>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fe16 	bl	8000d6c <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe fe12 	bl	8000d6c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04f      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	071b      	lsls	r3, r3, #28
 800218e:	491d      	ldr	r1, [pc, #116]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <HAL_RCC_OscConfig+0x480>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fde7 	bl	8000d6c <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe fde3 	bl	8000d6c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e020      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x41a>
 80021c0:	e018      	b.n	80021f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_RCC_OscConfig+0x480>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fdd0 	bl	8000d6c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe fdcc 	bl	8000d6c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e009      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCC_OscConfig+0x47c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x448>
 80021ee:	e001      	b.n	80021f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000
 8002204:	40023800 	.word	0x40023800
 8002208:	42470060 	.word	0x42470060

0800220c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e01d      	b.n	800225a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f815 	bl	8002262 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 f968 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b06      	cmp	r3, #6
 800229e:	d007      	beq.n	80022b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d122      	bne.n	800231a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d11b      	bne.n	800231a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0202 	mvn.w	r2, #2
 80022ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f8ee 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 8002306:	e005      	b.n	8002314 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f8e0 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f8f1 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b04      	cmp	r3, #4
 8002326:	d122      	bne.n	800236e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b04      	cmp	r3, #4
 8002334:	d11b      	bne.n	800236e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0204 	mvn.w	r2, #4
 800233e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f8c4 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 800235a:	e005      	b.n	8002368 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f8b6 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8c7 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b08      	cmp	r3, #8
 800237a:	d122      	bne.n	80023c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b08      	cmp	r3, #8
 8002388:	d11b      	bne.n	80023c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0208 	mvn.w	r2, #8
 8002392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2204      	movs	r2, #4
 8002398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f89a 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 80023ae:	e005      	b.n	80023bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f88c 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f89d 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d122      	bne.n	8002416 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d11b      	bne.n	8002416 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f06f 0210 	mvn.w	r2, #16
 80023e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2208      	movs	r2, #8
 80023ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f870 	bl	80024e2 <HAL_TIM_IC_CaptureCallback>
 8002402:	e005      	b.n	8002410 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f862 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f873 	bl	80024f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10e      	bne.n	8002442 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0201 	mvn.w	r2, #1
 800243a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7fe fab1 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b80      	cmp	r3, #128	; 0x80
 800244e:	d10e      	bne.n	800246e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d107      	bne.n	800246e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f903 	bl	8002674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d10e      	bne.n	800249a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	d107      	bne.n	800249a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f838 	bl	800250a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d10e      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d107      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0220 	mvn.w	r2, #32
 80024be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f8cd 	bl	8002660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a40      	ldr	r2, [pc, #256]	; (8002634 <TIM_Base_SetConfig+0x114>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d013      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d00f      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <TIM_Base_SetConfig+0x118>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00b      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3c      	ldr	r2, [pc, #240]	; (800263c <TIM_Base_SetConfig+0x11c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <TIM_Base_SetConfig+0x120>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <TIM_Base_SetConfig+0x124>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <TIM_Base_SetConfig+0x114>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d027      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <TIM_Base_SetConfig+0x118>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d023      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a2b      	ldr	r2, [pc, #172]	; (800263c <TIM_Base_SetConfig+0x11c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d01f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <TIM_Base_SetConfig+0x120>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <TIM_Base_SetConfig+0x124>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d017      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a28      	ldr	r2, [pc, #160]	; (8002648 <TIM_Base_SetConfig+0x128>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <TIM_Base_SetConfig+0x12c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00f      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <TIM_Base_SetConfig+0x130>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a25      	ldr	r2, [pc, #148]	; (8002654 <TIM_Base_SetConfig+0x134>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a24      	ldr	r2, [pc, #144]	; (8002658 <TIM_Base_SetConfig+0x138>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a23      	ldr	r2, [pc, #140]	; (800265c <TIM_Base_SetConfig+0x13c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <TIM_Base_SetConfig+0x114>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d003      	beq.n	8002618 <TIM_Base_SetConfig+0xf8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <TIM_Base_SetConfig+0x124>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d103      	bne.n	8002620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	615a      	str	r2, [r3, #20]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40010400 	.word	0x40010400
 8002648:	40014000 	.word	0x40014000
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800
 8002654:	40001800 	.word	0x40001800
 8002658:	40001c00 	.word	0x40001c00
 800265c:	40002000 	.word	0x40002000

08002660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e03f      	b.n	800271a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f837 	bl	8002722 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	; 0x24
 80026b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fc4b 	bl	8002f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	d153      	bne.n	80027fa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_UART_Transmit_DMA+0x26>
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e04c      	b.n	80027fc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_UART_Transmit_DMA+0x38>
 800276c:	2302      	movs	r3, #2
 800276e:	e045      	b.n	80027fc <HAL_UART_Transmit_DMA+0xc4>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <HAL_UART_Transmit_DMA+0xcc>)
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_UART_Transmit_DMA+0xd0>)
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_UART_Transmit_DMA+0xd4>)
 80027ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	2200      	movs	r2, #0
 80027b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3304      	adds	r3, #4
 80027cc:	461a      	mov	r2, r3
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	f7fe fc68 	bl	80010a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027f4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
  }
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	08002b75 	.word	0x08002b75
 8002808:	08002bc7 	.word	0x08002bc7
 800280c:	08002c67 	.word	0x08002c67

08002810 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b20      	cmp	r3, #32
 8002828:	d166      	bne.n	80028f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_UART_Receive_DMA+0x26>
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e05f      	b.n	80028fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_UART_Receive_DMA+0x38>
 8002844:	2302      	movs	r3, #2
 8002846:	e058      	b.n	80028fa <HAL_UART_Receive_DMA+0xea>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2222      	movs	r2, #34	; 0x22
 8002866:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_UART_Receive_DMA+0xf4>)
 8002870:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <HAL_UART_Receive_DMA+0xf8>)
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	4a23      	ldr	r2, [pc, #140]	; (800290c <HAL_UART_Receive_DMA+0xfc>)
 8002880:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	2200      	movs	r2, #0
 8002888:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3304      	adds	r3, #4
 800289a:	4619      	mov	r1, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	f7fe fbff 	bl	80010a4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	08002be3 	.word	0x08002be3
 8002908:	08002c4b 	.word	0x08002c4b
 800290c:	08002c67 	.word	0x08002c67

08002910 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_UART_IRQHandler+0x52>
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa83 	bl	8002e66 <UART_Receive_IT>
      return;
 8002960:	e0d1      	b.n	8002b06 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80b0 	beq.w	8002aca <HAL_UART_IRQHandler+0x1ba>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_UART_IRQHandler+0x70>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80a5 	beq.w	8002aca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_UART_IRQHandler+0x90>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_UART_IRQHandler+0xb0>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	f043 0202 	orr.w	r2, r3, #2
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_UART_IRQHandler+0xd0>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	f043 0204 	orr.w	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00f      	beq.n	8002a0a <HAL_UART_IRQHandler+0xfa>
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_UART_IRQHandler+0xee>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	f043 0208 	orr.w	r2, r3, #8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d078      	beq.n	8002b04 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_UART_IRQHandler+0x11c>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa1d 	bl	8002e66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_UART_IRQHandler+0x144>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d031      	beq.n	8002ab8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f966 	bl	8002d26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d123      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a76:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <HAL_UART_IRQHandler+0x1fc>)
 8002a86:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fb61 	bl	8001154 <HAL_DMA_Abort_IT>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d016      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa6:	e00e      	b.n	8002ac6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f859 	bl	8002b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aae:	e00a      	b.n	8002ac6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f855 	bl	8002b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab6:	e006      	b.n	8002ac6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f851 	bl	8002b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002ac4:	e01e      	b.n	8002b04 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac6:	bf00      	nop
    return;
 8002ac8:	e01c      	b.n	8002b04 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1d6>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f953 	bl	8002d8a <UART_Transmit_IT>
    return;
 8002ae4:	e00f      	b.n	8002b06 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1f6>
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f99b 	bl	8002e36 <UART_EndTransmit_IT>
    return;
 8002b00:	bf00      	nop
 8002b02:	e000      	b.n	8002b06 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002b04:	bf00      	nop
  }
}
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08002d63 	.word	0x08002d63

08002b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d113      	bne.n	8002bb8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002bb6:	e002      	b.n	8002bbe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff ffa9 	bl	8002b10 <HAL_UART_TxCpltCallback>
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff ffa5 	bl	8002b24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d11e      	bne.n	8002c3c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c12:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c32:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff ff7b 	bl	8002b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff ff77 	bl	8002b4c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b21      	cmp	r3, #33	; 0x21
 8002c98:	d108      	bne.n	8002cac <UART_DMAError+0x46>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ca6:	68b8      	ldr	r0, [r7, #8]
 8002ca8:	f000 f827 	bl	8002cfa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b40      	cmp	r3, #64	; 0x40
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b22      	cmp	r3, #34	; 0x22
 8002ccc:	d108      	bne.n	8002ce0 <UART_DMAError+0x7a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002cda:	68b8      	ldr	r0, [r7, #8]
 8002cdc:	f000 f823 	bl	8002d26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	f043 0210 	orr.w	r2, r3, #16
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cec:	68b8      	ldr	r0, [r7, #8]
 8002cee:	f7ff ff37 	bl	8002b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002d10:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff feef 	bl	8002b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b21      	cmp	r3, #33	; 0x21
 8002d9c:	d144      	bne.n	8002e28 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da6:	d11a      	bne.n	8002dde <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dbc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	1c9a      	adds	r2, r3, #2
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	621a      	str	r2, [r3, #32]
 8002dd0:	e00e      	b.n	8002df0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	621a      	str	r2, [r3, #32]
 8002ddc:	e008      	b.n	8002df0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6211      	str	r1, [r2, #32]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10f      	bne.n	8002e24 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fe5a 	bl	8002b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b22      	cmp	r3, #34	; 0x22
 8002e78:	d171      	bne.n	8002f5e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	d123      	bne.n	8002ecc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10e      	bne.n	8002eb0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
 8002eae:	e029      	b.n	8002f04 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eca:	e01b      	b.n	8002f04 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6858      	ldr	r0, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	1c59      	adds	r1, r3, #1
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6291      	str	r1, [r2, #40]	; 0x28
 8002ee4:	b2c2      	uxtb	r2, r0
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e00c      	b.n	8002f04 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	1c58      	adds	r0, r3, #1
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	6288      	str	r0, [r1, #40]	; 0x28
 8002efc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4619      	mov	r1, r3
 8002f12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d120      	bne.n	8002f5a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0220 	bic.w	r2, r2, #32
 8002f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff fdf1 	bl	8002b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e002      	b.n	8002f60 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002faa:	f023 030c 	bic.w	r3, r3, #12
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd6:	f040 8199 	bne.w	800330c <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4ac6      	ldr	r2, [pc, #792]	; (80032f8 <UART_SetConfig+0x390>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00f      	beq.n	8003004 <UART_SetConfig+0x9c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4ac4      	ldr	r2, [pc, #784]	; (80032fc <UART_SetConfig+0x394>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00a      	beq.n	8003004 <UART_SetConfig+0x9c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4ac3      	ldr	r2, [pc, #780]	; (8003300 <UART_SetConfig+0x398>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d005      	beq.n	8003004 <UART_SetConfig+0x9c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4ac1      	ldr	r2, [pc, #772]	; (8003304 <UART_SetConfig+0x39c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	f040 80bd 	bne.w	800317e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7fe fe7a 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8003008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	461d      	mov	r5, r3
 800300e:	f04f 0600 	mov.w	r6, #0
 8003012:	46a8      	mov	r8, r5
 8003014:	46b1      	mov	r9, r6
 8003016:	eb18 0308 	adds.w	r3, r8, r8
 800301a:	eb49 0409 	adc.w	r4, r9, r9
 800301e:	4698      	mov	r8, r3
 8003020:	46a1      	mov	r9, r4
 8003022:	eb18 0805 	adds.w	r8, r8, r5
 8003026:	eb49 0906 	adc.w	r9, r9, r6
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800303a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800303e:	4688      	mov	r8, r1
 8003040:	4691      	mov	r9, r2
 8003042:	eb18 0005 	adds.w	r0, r8, r5
 8003046:	eb49 0106 	adc.w	r1, r9, r6
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	461d      	mov	r5, r3
 8003050:	f04f 0600 	mov.w	r6, #0
 8003054:	196b      	adds	r3, r5, r5
 8003056:	eb46 0406 	adc.w	r4, r6, r6
 800305a:	461a      	mov	r2, r3
 800305c:	4623      	mov	r3, r4
 800305e:	f7fd f8df 	bl	8000220 <__aeabi_uldivmod>
 8003062:	4603      	mov	r3, r0
 8003064:	460c      	mov	r4, r1
 8003066:	461a      	mov	r2, r3
 8003068:	4ba7      	ldr	r3, [pc, #668]	; (8003308 <UART_SetConfig+0x3a0>)
 800306a:	fba3 2302 	umull	r2, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	461d      	mov	r5, r3
 8003078:	f04f 0600 	mov.w	r6, #0
 800307c:	46a9      	mov	r9, r5
 800307e:	46b2      	mov	sl, r6
 8003080:	eb19 0309 	adds.w	r3, r9, r9
 8003084:	eb4a 040a 	adc.w	r4, sl, sl
 8003088:	4699      	mov	r9, r3
 800308a:	46a2      	mov	sl, r4
 800308c:	eb19 0905 	adds.w	r9, r9, r5
 8003090:	eb4a 0a06 	adc.w	sl, sl, r6
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030a8:	4689      	mov	r9, r1
 80030aa:	4692      	mov	sl, r2
 80030ac:	eb19 0005 	adds.w	r0, r9, r5
 80030b0:	eb4a 0106 	adc.w	r1, sl, r6
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	461d      	mov	r5, r3
 80030ba:	f04f 0600 	mov.w	r6, #0
 80030be:	196b      	adds	r3, r5, r5
 80030c0:	eb46 0406 	adc.w	r4, r6, r6
 80030c4:	461a      	mov	r2, r3
 80030c6:	4623      	mov	r3, r4
 80030c8:	f7fd f8aa 	bl	8000220 <__aeabi_uldivmod>
 80030cc:	4603      	mov	r3, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b8d      	ldr	r3, [pc, #564]	; (8003308 <UART_SetConfig+0x3a0>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	2164      	movs	r1, #100	; 0x64
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	3332      	adds	r3, #50	; 0x32
 80030e6:	4a88      	ldr	r2, [pc, #544]	; (8003308 <UART_SetConfig+0x3a0>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f4:	4498      	add	r8, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	461d      	mov	r5, r3
 80030fa:	f04f 0600 	mov.w	r6, #0
 80030fe:	46a9      	mov	r9, r5
 8003100:	46b2      	mov	sl, r6
 8003102:	eb19 0309 	adds.w	r3, r9, r9
 8003106:	eb4a 040a 	adc.w	r4, sl, sl
 800310a:	4699      	mov	r9, r3
 800310c:	46a2      	mov	sl, r4
 800310e:	eb19 0905 	adds.w	r9, r9, r5
 8003112:	eb4a 0a06 	adc.w	sl, sl, r6
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800312a:	4689      	mov	r9, r1
 800312c:	4692      	mov	sl, r2
 800312e:	eb19 0005 	adds.w	r0, r9, r5
 8003132:	eb4a 0106 	adc.w	r1, sl, r6
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	461d      	mov	r5, r3
 800313c:	f04f 0600 	mov.w	r6, #0
 8003140:	196b      	adds	r3, r5, r5
 8003142:	eb46 0406 	adc.w	r4, r6, r6
 8003146:	461a      	mov	r2, r3
 8003148:	4623      	mov	r3, r4
 800314a:	f7fd f869 	bl	8000220 <__aeabi_uldivmod>
 800314e:	4603      	mov	r3, r0
 8003150:	460c      	mov	r4, r1
 8003152:	461a      	mov	r2, r3
 8003154:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <UART_SetConfig+0x3a0>)
 8003156:	fba3 1302 	umull	r1, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a67      	ldr	r2, [pc, #412]	; (8003308 <UART_SetConfig+0x3a0>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 0207 	and.w	r2, r3, #7
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4442      	add	r2, r8
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e27d      	b.n	800367a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800317e:	f7fe fda9 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8003182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	461d      	mov	r5, r3
 8003188:	f04f 0600 	mov.w	r6, #0
 800318c:	46a8      	mov	r8, r5
 800318e:	46b1      	mov	r9, r6
 8003190:	eb18 0308 	adds.w	r3, r8, r8
 8003194:	eb49 0409 	adc.w	r4, r9, r9
 8003198:	4698      	mov	r8, r3
 800319a:	46a1      	mov	r9, r4
 800319c:	eb18 0805 	adds.w	r8, r8, r5
 80031a0:	eb49 0906 	adc.w	r9, r9, r6
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031b8:	4688      	mov	r8, r1
 80031ba:	4691      	mov	r9, r2
 80031bc:	eb18 0005 	adds.w	r0, r8, r5
 80031c0:	eb49 0106 	adc.w	r1, r9, r6
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	461d      	mov	r5, r3
 80031ca:	f04f 0600 	mov.w	r6, #0
 80031ce:	196b      	adds	r3, r5, r5
 80031d0:	eb46 0406 	adc.w	r4, r6, r6
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	f7fd f822 	bl	8000220 <__aeabi_uldivmod>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <UART_SetConfig+0x3a0>)
 80031e4:	fba3 2302 	umull	r2, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	461d      	mov	r5, r3
 80031f2:	f04f 0600 	mov.w	r6, #0
 80031f6:	46a9      	mov	r9, r5
 80031f8:	46b2      	mov	sl, r6
 80031fa:	eb19 0309 	adds.w	r3, r9, r9
 80031fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003202:	4699      	mov	r9, r3
 8003204:	46a2      	mov	sl, r4
 8003206:	eb19 0905 	adds.w	r9, r9, r5
 800320a:	eb4a 0a06 	adc.w	sl, sl, r6
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800321e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003222:	4689      	mov	r9, r1
 8003224:	4692      	mov	sl, r2
 8003226:	eb19 0005 	adds.w	r0, r9, r5
 800322a:	eb4a 0106 	adc.w	r1, sl, r6
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	461d      	mov	r5, r3
 8003234:	f04f 0600 	mov.w	r6, #0
 8003238:	196b      	adds	r3, r5, r5
 800323a:	eb46 0406 	adc.w	r4, r6, r6
 800323e:	461a      	mov	r2, r3
 8003240:	4623      	mov	r3, r4
 8003242:	f7fc ffed 	bl	8000220 <__aeabi_uldivmod>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	461a      	mov	r2, r3
 800324c:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <UART_SetConfig+0x3a0>)
 800324e:	fba3 1302 	umull	r1, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2164      	movs	r1, #100	; 0x64
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	3332      	adds	r3, #50	; 0x32
 8003260:	4a29      	ldr	r2, [pc, #164]	; (8003308 <UART_SetConfig+0x3a0>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800326e:	4498      	add	r8, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	461d      	mov	r5, r3
 8003274:	f04f 0600 	mov.w	r6, #0
 8003278:	46a9      	mov	r9, r5
 800327a:	46b2      	mov	sl, r6
 800327c:	eb19 0309 	adds.w	r3, r9, r9
 8003280:	eb4a 040a 	adc.w	r4, sl, sl
 8003284:	4699      	mov	r9, r3
 8003286:	46a2      	mov	sl, r4
 8003288:	eb19 0905 	adds.w	r9, r9, r5
 800328c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032a4:	4689      	mov	r9, r1
 80032a6:	4692      	mov	sl, r2
 80032a8:	eb19 0005 	adds.w	r0, r9, r5
 80032ac:	eb4a 0106 	adc.w	r1, sl, r6
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	461d      	mov	r5, r3
 80032b6:	f04f 0600 	mov.w	r6, #0
 80032ba:	196b      	adds	r3, r5, r5
 80032bc:	eb46 0406 	adc.w	r4, r6, r6
 80032c0:	461a      	mov	r2, r3
 80032c2:	4623      	mov	r3, r4
 80032c4:	f7fc ffac 	bl	8000220 <__aeabi_uldivmod>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <UART_SetConfig+0x3a0>)
 80032d0:	fba3 1302 	umull	r1, r3, r3, r2
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2164      	movs	r1, #100	; 0x64
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	3332      	adds	r3, #50	; 0x32
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <UART_SetConfig+0x3a0>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4442      	add	r2, r8
 80032f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032f6:	e1c0      	b.n	800367a <UART_SetConfig+0x712>
 80032f8:	40011000 	.word	0x40011000
 80032fc:	40011400 	.word	0x40011400
 8003300:	40011800 	.word	0x40011800
 8003304:	40011c00 	.word	0x40011c00
 8003308:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4adc      	ldr	r2, [pc, #880]	; (8003684 <UART_SetConfig+0x71c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <UART_SetConfig+0x3ce>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4adb      	ldr	r2, [pc, #876]	; (8003688 <UART_SetConfig+0x720>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00a      	beq.n	8003336 <UART_SetConfig+0x3ce>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4ad9      	ldr	r2, [pc, #868]	; (800368c <UART_SetConfig+0x724>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d005      	beq.n	8003336 <UART_SetConfig+0x3ce>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4ad8      	ldr	r2, [pc, #864]	; (8003690 <UART_SetConfig+0x728>)
 8003330:	4293      	cmp	r3, r2
 8003332:	f040 80d1 	bne.w	80034d8 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003336:	f7fe fce1 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 800333a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	469a      	mov	sl, r3
 8003340:	f04f 0b00 	mov.w	fp, #0
 8003344:	46d0      	mov	r8, sl
 8003346:	46d9      	mov	r9, fp
 8003348:	eb18 0308 	adds.w	r3, r8, r8
 800334c:	eb49 0409 	adc.w	r4, r9, r9
 8003350:	4698      	mov	r8, r3
 8003352:	46a1      	mov	r9, r4
 8003354:	eb18 080a 	adds.w	r8, r8, sl
 8003358:	eb49 090b 	adc.w	r9, r9, fp
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003368:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800336c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003370:	4688      	mov	r8, r1
 8003372:	4691      	mov	r9, r2
 8003374:	eb1a 0508 	adds.w	r5, sl, r8
 8003378:	eb4b 0609 	adc.w	r6, fp, r9
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	0094      	lsls	r4, r2, #2
 8003390:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003394:	008b      	lsls	r3, r1, #2
 8003396:	461a      	mov	r2, r3
 8003398:	4623      	mov	r3, r4
 800339a:	4628      	mov	r0, r5
 800339c:	4631      	mov	r1, r6
 800339e:	f7fc ff3f 	bl	8000220 <__aeabi_uldivmod>
 80033a2:	4603      	mov	r3, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	461a      	mov	r2, r3
 80033a8:	4bba      	ldr	r3, [pc, #744]	; (8003694 <UART_SetConfig+0x72c>)
 80033aa:	fba3 2302 	umull	r2, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	469b      	mov	fp, r3
 80033b8:	f04f 0c00 	mov.w	ip, #0
 80033bc:	46d9      	mov	r9, fp
 80033be:	46e2      	mov	sl, ip
 80033c0:	eb19 0309 	adds.w	r3, r9, r9
 80033c4:	eb4a 040a 	adc.w	r4, sl, sl
 80033c8:	4699      	mov	r9, r3
 80033ca:	46a2      	mov	sl, r4
 80033cc:	eb19 090b 	adds.w	r9, r9, fp
 80033d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033e8:	4689      	mov	r9, r1
 80033ea:	4692      	mov	sl, r2
 80033ec:	eb1b 0509 	adds.w	r5, fp, r9
 80033f0:	eb4c 060a 	adc.w	r6, ip, sl
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4619      	mov	r1, r3
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	f04f 0400 	mov.w	r4, #0
 8003406:	0094      	lsls	r4, r2, #2
 8003408:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800340c:	008b      	lsls	r3, r1, #2
 800340e:	461a      	mov	r2, r3
 8003410:	4623      	mov	r3, r4
 8003412:	4628      	mov	r0, r5
 8003414:	4631      	mov	r1, r6
 8003416:	f7fc ff03 	bl	8000220 <__aeabi_uldivmod>
 800341a:	4603      	mov	r3, r0
 800341c:	460c      	mov	r4, r1
 800341e:	461a      	mov	r2, r3
 8003420:	4b9c      	ldr	r3, [pc, #624]	; (8003694 <UART_SetConfig+0x72c>)
 8003422:	fba3 1302 	umull	r1, r3, r3, r2
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2164      	movs	r1, #100	; 0x64
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	3332      	adds	r3, #50	; 0x32
 8003434:	4a97      	ldr	r2, [pc, #604]	; (8003694 <UART_SetConfig+0x72c>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003440:	4498      	add	r8, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	469b      	mov	fp, r3
 8003446:	f04f 0c00 	mov.w	ip, #0
 800344a:	46d9      	mov	r9, fp
 800344c:	46e2      	mov	sl, ip
 800344e:	eb19 0309 	adds.w	r3, r9, r9
 8003452:	eb4a 040a 	adc.w	r4, sl, sl
 8003456:	4699      	mov	r9, r3
 8003458:	46a2      	mov	sl, r4
 800345a:	eb19 090b 	adds.w	r9, r9, fp
 800345e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800346e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003476:	4689      	mov	r9, r1
 8003478:	4692      	mov	sl, r2
 800347a:	eb1b 0509 	adds.w	r5, fp, r9
 800347e:	eb4c 060a 	adc.w	r6, ip, sl
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	f04f 0400 	mov.w	r4, #0
 8003494:	0094      	lsls	r4, r2, #2
 8003496:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800349a:	008b      	lsls	r3, r1, #2
 800349c:	461a      	mov	r2, r3
 800349e:	4623      	mov	r3, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	4631      	mov	r1, r6
 80034a4:	f7fc febc 	bl	8000220 <__aeabi_uldivmod>
 80034a8:	4603      	mov	r3, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b79      	ldr	r3, [pc, #484]	; (8003694 <UART_SetConfig+0x72c>)
 80034b0:	fba3 1302 	umull	r1, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	2164      	movs	r1, #100	; 0x64
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	3332      	adds	r3, #50	; 0x32
 80034c2:	4a74      	ldr	r2, [pc, #464]	; (8003694 <UART_SetConfig+0x72c>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4442      	add	r2, r8
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	e0d0      	b.n	800367a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80034d8:	f7fe fbfc 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80034dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	469a      	mov	sl, r3
 80034e2:	f04f 0b00 	mov.w	fp, #0
 80034e6:	46d0      	mov	r8, sl
 80034e8:	46d9      	mov	r9, fp
 80034ea:	eb18 0308 	adds.w	r3, r8, r8
 80034ee:	eb49 0409 	adc.w	r4, r9, r9
 80034f2:	4698      	mov	r8, r3
 80034f4:	46a1      	mov	r9, r4
 80034f6:	eb18 080a 	adds.w	r8, r8, sl
 80034fa:	eb49 090b 	adc.w	r9, r9, fp
 80034fe:	f04f 0100 	mov.w	r1, #0
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800350a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800350e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003512:	4688      	mov	r8, r1
 8003514:	4691      	mov	r9, r2
 8003516:	eb1a 0508 	adds.w	r5, sl, r8
 800351a:	eb4b 0609 	adc.w	r6, fp, r9
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4619      	mov	r1, r3
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	0094      	lsls	r4, r2, #2
 8003532:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003536:	008b      	lsls	r3, r1, #2
 8003538:	461a      	mov	r2, r3
 800353a:	4623      	mov	r3, r4
 800353c:	4628      	mov	r0, r5
 800353e:	4631      	mov	r1, r6
 8003540:	f7fc fe6e 	bl	8000220 <__aeabi_uldivmod>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	461a      	mov	r2, r3
 800354a:	4b52      	ldr	r3, [pc, #328]	; (8003694 <UART_SetConfig+0x72c>)
 800354c:	fba3 2302 	umull	r2, r3, r3, r2
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	469b      	mov	fp, r3
 800355a:	f04f 0c00 	mov.w	ip, #0
 800355e:	46d9      	mov	r9, fp
 8003560:	46e2      	mov	sl, ip
 8003562:	eb19 0309 	adds.w	r3, r9, r9
 8003566:	eb4a 040a 	adc.w	r4, sl, sl
 800356a:	4699      	mov	r9, r3
 800356c:	46a2      	mov	sl, r4
 800356e:	eb19 090b 	adds.w	r9, r9, fp
 8003572:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800358a:	4689      	mov	r9, r1
 800358c:	4692      	mov	sl, r2
 800358e:	eb1b 0509 	adds.w	r5, fp, r9
 8003592:	eb4c 060a 	adc.w	r6, ip, sl
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4619      	mov	r1, r3
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	0094      	lsls	r4, r2, #2
 80035aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ae:	008b      	lsls	r3, r1, #2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	4628      	mov	r0, r5
 80035b6:	4631      	mov	r1, r6
 80035b8:	f7fc fe32 	bl	8000220 <__aeabi_uldivmod>
 80035bc:	4603      	mov	r3, r0
 80035be:	460c      	mov	r4, r1
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <UART_SetConfig+0x72c>)
 80035c4:	fba3 1302 	umull	r1, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	2164      	movs	r1, #100	; 0x64
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	3332      	adds	r3, #50	; 0x32
 80035d6:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <UART_SetConfig+0x72c>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e2:	4498      	add	r8, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	469b      	mov	fp, r3
 80035e8:	f04f 0c00 	mov.w	ip, #0
 80035ec:	46d9      	mov	r9, fp
 80035ee:	46e2      	mov	sl, ip
 80035f0:	eb19 0309 	adds.w	r3, r9, r9
 80035f4:	eb4a 040a 	adc.w	r4, sl, sl
 80035f8:	4699      	mov	r9, r3
 80035fa:	46a2      	mov	sl, r4
 80035fc:	eb19 090b 	adds.w	r9, r9, fp
 8003600:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003610:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003614:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003618:	4689      	mov	r9, r1
 800361a:	4692      	mov	sl, r2
 800361c:	eb1b 0509 	adds.w	r5, fp, r9
 8003620:	eb4c 060a 	adc.w	r6, ip, sl
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4619      	mov	r1, r3
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	0094      	lsls	r4, r2, #2
 8003638:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800363c:	008b      	lsls	r3, r1, #2
 800363e:	461a      	mov	r2, r3
 8003640:	4623      	mov	r3, r4
 8003642:	4628      	mov	r0, r5
 8003644:	4631      	mov	r1, r6
 8003646:	f7fc fdeb 	bl	8000220 <__aeabi_uldivmod>
 800364a:	4603      	mov	r3, r0
 800364c:	460c      	mov	r4, r1
 800364e:	461a      	mov	r2, r3
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <UART_SetConfig+0x72c>)
 8003652:	fba3 1302 	umull	r1, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2164      	movs	r1, #100	; 0x64
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <UART_SetConfig+0x72c>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4442      	add	r2, r8
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	e7ff      	b.n	800367a <UART_SetConfig+0x712>
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003684:	40011000 	.word	0x40011000
 8003688:	40011400 	.word	0x40011400
 800368c:	40011800 	.word	0x40011800
 8003690:	40011c00 	.word	0x40011c00
 8003694:	51eb851f 	.word	0x51eb851f

08003698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0208 	add.w	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f103 0208 	add.w	r2, r3, #8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f103 0208 	add.w	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d103      	bne.n	800375a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e00c      	b.n	8003774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3308      	adds	r3, #8
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e002      	b.n	8003768 <vListInsert+0x2e>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d2f6      	bcs.n	8003762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6852      	ldr	r2, [r2, #4]
 80037cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d103      	bne.n	80037e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08e      	sub	sp, #56	; 0x38
 8003804:	af04      	add	r7, sp, #16
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	e7fe      	b.n	8003826 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <xTaskCreateStatic+0x42>
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e7fe      	b.n	8003840 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003842:	2354      	movs	r3, #84	; 0x54
 8003844:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b54      	cmp	r3, #84	; 0x54
 800384a:	d009      	beq.n	8003860 <xTaskCreateStatic+0x60>
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e7fe      	b.n	800385e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003860:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01e      	beq.n	80038a6 <xTaskCreateStatic+0xa6>
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01b      	beq.n	80038a6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003876:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003880:	2300      	movs	r3, #0
 8003882:	9303      	str	r3, [sp, #12]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	9302      	str	r3, [sp, #8]
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f850 	bl	800393e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800389e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a0:	f000 f8d4 	bl	8003a4c <prvAddNewTaskToReadyList>
 80038a4:	e001      	b.n	80038aa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038aa:	697b      	ldr	r3, [r7, #20]
	}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3728      	adds	r7, #40	; 0x28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08c      	sub	sp, #48	; 0x30
 80038b8:	af04      	add	r7, sp, #16
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 feb3 	bl	8004634 <pvPortMalloc>
 80038ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038d6:	2054      	movs	r0, #84	; 0x54
 80038d8:	f000 feac 	bl	8004634 <pvPortMalloc>
 80038dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ea:	e005      	b.n	80038f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038ec:	6978      	ldr	r0, [r7, #20]
 80038ee:	f000 ff63 	bl	80047b8 <vPortFree>
 80038f2:	e001      	b.n	80038f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d017      	beq.n	800392e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	2300      	movs	r3, #0
 800390a:	9303      	str	r3, [sp, #12]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	9302      	str	r3, [sp, #8]
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f80e 	bl	800393e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003922:	69f8      	ldr	r0, [r7, #28]
 8003924:	f000 f892 	bl	8003a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003928:	2301      	movs	r3, #1
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e002      	b.n	8003934 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003934:	69bb      	ldr	r3, [r7, #24]
	}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b088      	sub	sp, #32
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003956:	3b01      	subs	r3, #1
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f023 0307 	bic.w	r3, r3, #7
 8003964:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <prvInitialiseNewTask+0x46>
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	e7fe      	b.n	8003982 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01f      	beq.n	80039ca <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e012      	b.n	80039b6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	4413      	add	r3, r2
 8003996:	7819      	ldrb	r1, [r3, #0]
 8003998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	3334      	adds	r3, #52	; 0x34
 80039a0:	460a      	mov	r2, r1
 80039a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d9e9      	bls.n	8003990 <prvInitialiseNewTask+0x52>
 80039bc:	e000      	b.n	80039c0 <prvInitialiseNewTask+0x82>
			{
				break;
 80039be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c8:	e003      	b.n	80039d2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d901      	bls.n	80039dc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039d8:	2306      	movs	r3, #6
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	2200      	movs	r2, #0
 80039ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	3304      	adds	r3, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fe70 	bl	80036d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	3318      	adds	r3, #24
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fe6b 	bl	80036d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	f1c3 0207 	rsb	r2, r3, #7
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	69b8      	ldr	r0, [r7, #24]
 8003a2c:	f000 fbfe 	bl	800422c <pxPortInitialiseStack>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a42:	bf00      	nop
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a54:	f000 fd12 	bl	800447c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <prvAddNewTaskToReadyList+0xb8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <prvAddNewTaskToReadyList+0xb8>)
 8003a60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a62:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <prvAddNewTaskToReadyList+0xbc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a6a:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <prvAddNewTaskToReadyList+0xbc>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <prvAddNewTaskToReadyList+0xb8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d110      	bne.n	8003a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a78:	f000 fab8 	bl	8003fec <prvInitialiseTaskLists>
 8003a7c:	e00d      	b.n	8003a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a7e:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <prvAddNewTaskToReadyList+0xc0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <prvAddNewTaskToReadyList+0xbc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d802      	bhi.n	8003a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a94:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <prvAddNewTaskToReadyList+0xbc>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <prvAddNewTaskToReadyList+0xc4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <prvAddNewTaskToReadyList+0xc4>)
 8003aa2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <prvAddNewTaskToReadyList+0xc8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <prvAddNewTaskToReadyList+0xc8>)
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <prvAddNewTaskToReadyList+0xcc>)
 8003ac4:	441a      	add	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7ff fe10 	bl	80036f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ad2:	f000 fd01 	bl	80044d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <prvAddNewTaskToReadyList+0xc0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00e      	beq.n	8003afc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <prvAddNewTaskToReadyList+0xbc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d207      	bcs.n	8003afc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <prvAddNewTaskToReadyList+0xd0>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200003bc 	.word	0x200003bc
 8003b08:	200002bc 	.word	0x200002bc
 8003b0c:	200003c8 	.word	0x200003c8
 8003b10:	200003d8 	.word	0x200003d8
 8003b14:	200003c4 	.word	0x200003c4
 8003b18:	200002c0 	.word	0x200002c0
 8003b1c:	e000ed04 	.word	0xe000ed04

08003b20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <vTaskDelay+0x60>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <vTaskDelay+0x2e>
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	e7fe      	b.n	8003b4c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003b4e:	f000 f879 	bl	8003c44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b52:	2100      	movs	r1, #0
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fb03 	bl	8004160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b5a:	f000 f881 	bl	8003c60 <xTaskResumeAll>
 8003b5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <vTaskDelay+0x64>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	200003e4 	.word	0x200003e4
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b96:	463a      	mov	r2, r7
 8003b98:	1d39      	adds	r1, r7, #4
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fe76 	bl	8000890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	9202      	str	r2, [sp, #8]
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	460a      	mov	r2, r1
 8003bb6:	491d      	ldr	r1, [pc, #116]	; (8003c2c <vTaskStartScheduler+0xa4>)
 8003bb8:	481d      	ldr	r0, [pc, #116]	; (8003c30 <vTaskStartScheduler+0xa8>)
 8003bba:	f7ff fe21 	bl	8003800 <xTaskCreateStatic>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <vTaskStartScheduler+0xac>)
 8003bc2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <vTaskStartScheduler+0xac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e001      	b.n	8003bd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d115      	bne.n	8003c08 <vTaskStartScheduler+0x80>
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <vTaskStartScheduler+0xb0>)
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <vTaskStartScheduler+0xb4>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bfc:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <vTaskStartScheduler+0xb8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c02:	f000 fb9d 	bl	8004340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c06:	e00d      	b.n	8003c24 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d109      	bne.n	8003c24 <vTaskStartScheduler+0x9c>
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e7fe      	b.n	8003c22 <vTaskStartScheduler+0x9a>
}
 8003c24:	bf00      	nop
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	08004a90 	.word	0x08004a90
 8003c30:	08003fbd 	.word	0x08003fbd
 8003c34:	200003e0 	.word	0x200003e0
 8003c38:	200003dc 	.word	0x200003dc
 8003c3c:	200003c8 	.word	0x200003c8
 8003c40:	200003c0 	.word	0x200003c0

08003c44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <vTaskSuspendAll+0x18>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <vTaskSuspendAll+0x18>)
 8003c50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	200003e4 	.word	0x200003e4

08003c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c6e:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <xTaskResumeAll+0x114>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <xTaskResumeAll+0x2a>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	e7fe      	b.n	8003c88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c8a:	f000 fbf7 	bl	800447c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c8e:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <xTaskResumeAll+0x114>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	4a37      	ldr	r2, [pc, #220]	; (8003d74 <xTaskResumeAll+0x114>)
 8003c96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <xTaskResumeAll+0x114>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d161      	bne.n	8003d64 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ca0:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <xTaskResumeAll+0x118>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d05d      	beq.n	8003d64 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca8:	e02e      	b.n	8003d08 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003caa:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <xTaskResumeAll+0x11c>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fd78 	bl	80037ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fd73 	bl	80037ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <xTaskResumeAll+0x120>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <xTaskResumeAll+0x120>)
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <xTaskResumeAll+0x124>)
 8003ce6:	441a      	add	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7ff fcff 	bl	80036f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <xTaskResumeAll+0x128>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <xTaskResumeAll+0x12c>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d08:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <xTaskResumeAll+0x11c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1cc      	bne.n	8003caa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d16:	f000 fa03 	bl	8004120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <xTaskResumeAll+0x130>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d26:	f000 f837 	bl	8003d98 <xTaskIncrementTick>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003d30:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <xTaskResumeAll+0x12c>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f1      	bne.n	8003d26 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <xTaskResumeAll+0x130>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <xTaskResumeAll+0x12c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <xTaskResumeAll+0x134>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d64:	f000 fbb8 	bl	80044d8 <vPortExitCritical>

	return xAlreadyYielded;
 8003d68:	68bb      	ldr	r3, [r7, #8]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200003e4 	.word	0x200003e4
 8003d78:	200003bc 	.word	0x200003bc
 8003d7c:	2000037c 	.word	0x2000037c
 8003d80:	200003c4 	.word	0x200003c4
 8003d84:	200002c0 	.word	0x200002c0
 8003d88:	200002bc 	.word	0x200002bc
 8003d8c:	200003d0 	.word	0x200003d0
 8003d90:	200003cc 	.word	0x200003cc
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003da2:	4b4e      	ldr	r3, [pc, #312]	; (8003edc <xTaskIncrementTick+0x144>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f040 8087 	bne.w	8003eba <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dac:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <xTaskIncrementTick+0x148>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003db4:	4a4a      	ldr	r2, [pc, #296]	; (8003ee0 <xTaskIncrementTick+0x148>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11f      	bne.n	8003e00 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dc0:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <xTaskIncrementTick+0x14c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <xTaskIncrementTick+0x46>
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	e7fe      	b.n	8003ddc <xTaskIncrementTick+0x44>
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <xTaskIncrementTick+0x14c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <xTaskIncrementTick+0x150>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3e      	ldr	r2, [pc, #248]	; (8003ee4 <xTaskIncrementTick+0x14c>)
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4a3e      	ldr	r2, [pc, #248]	; (8003ee8 <xTaskIncrementTick+0x150>)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b3e      	ldr	r3, [pc, #248]	; (8003eec <xTaskIncrementTick+0x154>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3301      	adds	r3, #1
 8003df8:	4a3c      	ldr	r2, [pc, #240]	; (8003eec <xTaskIncrementTick+0x154>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	f000 f990 	bl	8004120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <xTaskIncrementTick+0x158>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d348      	bcc.n	8003e9c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <xTaskIncrementTick+0x14c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <xTaskIncrementTick+0x158>)
 8003e16:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1a:	601a      	str	r2, [r3, #0]
					break;
 8003e1c:	e03e      	b.n	8003e9c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e1e:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <xTaskIncrementTick+0x14c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d203      	bcs.n	8003e3e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e36:	4a2e      	ldr	r2, [pc, #184]	; (8003ef0 <xTaskIncrementTick+0x158>)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e3c:	e02e      	b.n	8003e9c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fcb2 	bl	80037ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3318      	adds	r3, #24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fca9 	bl	80037ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	2201      	movs	r2, #1
 8003e60:	409a      	lsls	r2, r3
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <xTaskIncrementTick+0x15c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <xTaskIncrementTick+0x15c>)
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <xTaskIncrementTick+0x160>)
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f7ff fc35 	bl	80036f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <xTaskIncrementTick+0x164>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d3b9      	bcc.n	8003e0a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e9a:	e7b6      	b.n	8003e0a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e9c:	4b17      	ldr	r3, [pc, #92]	; (8003efc <xTaskIncrementTick+0x164>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	4915      	ldr	r1, [pc, #84]	; (8003ef8 <xTaskIncrementTick+0x160>)
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d907      	bls.n	8003ec4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e004      	b.n	8003ec4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <xTaskIncrementTick+0x168>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <xTaskIncrementTick+0x168>)
 8003ec2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <xTaskIncrementTick+0x16c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ed0:	697b      	ldr	r3, [r7, #20]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	200003e4 	.word	0x200003e4
 8003ee0:	200003c0 	.word	0x200003c0
 8003ee4:	20000374 	.word	0x20000374
 8003ee8:	20000378 	.word	0x20000378
 8003eec:	200003d4 	.word	0x200003d4
 8003ef0:	200003dc 	.word	0x200003dc
 8003ef4:	200003c4 	.word	0x200003c4
 8003ef8:	200002c0 	.word	0x200002c0
 8003efc:	200002bc 	.word	0x200002bc
 8003f00:	200003cc 	.word	0x200003cc
 8003f04:	200003d0 	.word	0x200003d0

08003f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f0e:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <vTaskSwitchContext+0xa0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <vTaskSwitchContext+0xa4>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f1c:	e03e      	b.n	8003f9c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003f1e:	4b23      	ldr	r3, [pc, #140]	; (8003fac <vTaskSwitchContext+0xa4>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f24:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <vTaskSwitchContext+0xa8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	fab3 f383 	clz	r3, r3
 8003f30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	f1c3 031f 	rsb	r3, r3, #31
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	491e      	ldr	r1, [pc, #120]	; (8003fb4 <vTaskSwitchContext+0xac>)
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	e7fe      	b.n	8003f60 <vTaskSwitchContext+0x58>
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a11      	ldr	r2, [pc, #68]	; (8003fb4 <vTaskSwitchContext+0xac>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	3308      	adds	r3, #8
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d104      	bne.n	8003f92 <vTaskSwitchContext+0x8a>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <vTaskSwitchContext+0xb0>)
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	200003e4 	.word	0x200003e4
 8003fac:	200003d0 	.word	0x200003d0
 8003fb0:	200003c4 	.word	0x200003c4
 8003fb4:	200002c0 	.word	0x200002c0
 8003fb8:	200002bc 	.word	0x200002bc

08003fbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fc4:	f000 f852 	bl	800406c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <prvIdleTask+0x28>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d9f9      	bls.n	8003fc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <prvIdleTask+0x2c>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fe0:	e7f0      	b.n	8003fc4 <prvIdleTask+0x8>
 8003fe2:	bf00      	nop
 8003fe4:	200002c0 	.word	0x200002c0
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	e00c      	b.n	8004012 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4a12      	ldr	r2, [pc, #72]	; (800404c <prvInitialiseTaskLists+0x60>)
 8004004:	4413      	add	r3, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fb46 	bl	8003698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3301      	adds	r3, #1
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b06      	cmp	r3, #6
 8004016:	d9ef      	bls.n	8003ff8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004018:	480d      	ldr	r0, [pc, #52]	; (8004050 <prvInitialiseTaskLists+0x64>)
 800401a:	f7ff fb3d 	bl	8003698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800401e:	480d      	ldr	r0, [pc, #52]	; (8004054 <prvInitialiseTaskLists+0x68>)
 8004020:	f7ff fb3a 	bl	8003698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004024:	480c      	ldr	r0, [pc, #48]	; (8004058 <prvInitialiseTaskLists+0x6c>)
 8004026:	f7ff fb37 	bl	8003698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800402a:	480c      	ldr	r0, [pc, #48]	; (800405c <prvInitialiseTaskLists+0x70>)
 800402c:	f7ff fb34 	bl	8003698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004030:	480b      	ldr	r0, [pc, #44]	; (8004060 <prvInitialiseTaskLists+0x74>)
 8004032:	f7ff fb31 	bl	8003698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <prvInitialiseTaskLists+0x78>)
 8004038:	4a05      	ldr	r2, [pc, #20]	; (8004050 <prvInitialiseTaskLists+0x64>)
 800403a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvInitialiseTaskLists+0x7c>)
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <prvInitialiseTaskLists+0x68>)
 8004040:	601a      	str	r2, [r3, #0]
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200002c0 	.word	0x200002c0
 8004050:	2000034c 	.word	0x2000034c
 8004054:	20000360 	.word	0x20000360
 8004058:	2000037c 	.word	0x2000037c
 800405c:	20000390 	.word	0x20000390
 8004060:	200003a8 	.word	0x200003a8
 8004064:	20000374 	.word	0x20000374
 8004068:	20000378 	.word	0x20000378

0800406c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004072:	e019      	b.n	80040a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004074:	f000 fa02 	bl	800447c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <prvCheckTasksWaitingTermination+0x4c>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fb91 	bl	80037ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <prvCheckTasksWaitingTermination+0x50>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3b01      	subs	r3, #1
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <prvCheckTasksWaitingTermination+0x50>)
 8004092:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <prvCheckTasksWaitingTermination+0x54>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3b01      	subs	r3, #1
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <prvCheckTasksWaitingTermination+0x54>)
 800409c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800409e:	f000 fa1b 	bl	80044d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f80e 	bl	80040c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <prvCheckTasksWaitingTermination+0x54>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e1      	bne.n	8004074 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000390 	.word	0x20000390
 80040bc:	200003bc 	.word	0x200003bc
 80040c0:	200003a4 	.word	0x200003a4

080040c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d108      	bne.n	80040e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fb6c 	bl	80047b8 <vPortFree>
				vPortFree( pxTCB );
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fb69 	bl	80047b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040e6:	e017      	b.n	8004118 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d103      	bne.n	80040fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fb60 	bl	80047b8 <vPortFree>
	}
 80040f8:	e00e      	b.n	8004118 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004100:	2b02      	cmp	r3, #2
 8004102:	d009      	beq.n	8004118 <prvDeleteTCB+0x54>
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e7fe      	b.n	8004116 <prvDeleteTCB+0x52>
	}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <prvResetNextTaskUnblockTime+0x38>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <prvResetNextTaskUnblockTime+0x3c>)
 8004132:	f04f 32ff 	mov.w	r2, #4294967295
 8004136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004138:	e008      	b.n	800414c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <prvResetNextTaskUnblockTime+0x38>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <prvResetNextTaskUnblockTime+0x3c>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000374 	.word	0x20000374
 800415c:	200003dc 	.word	0x200003dc

08004160 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <prvAddCurrentTaskToDelayedList+0xb0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3304      	adds	r3, #4
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fb18 	bl	80037ac <uxListRemove>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	4b21      	ldr	r3, [pc, #132]	; (8004218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4013      	ands	r3, r2
 8004196:	4a20      	ldr	r2, [pc, #128]	; (8004218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004198:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d10a      	bne.n	80041b8 <prvAddCurrentTaskToDelayedList+0x58>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	481a      	ldr	r0, [pc, #104]	; (800421c <prvAddCurrentTaskToDelayedList+0xbc>)
 80041b2:	f7ff fa9e 	bl	80036f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041b6:	e026      	b.n	8004206 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d209      	bcs.n	80041e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d0:	4b13      	ldr	r3, [pc, #76]	; (8004220 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7ff faac 	bl	800373a <vListInsert>
}
 80041e2:	e010      	b.n	8004206 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7ff faa2 	bl	800373a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d202      	bcs.n	8004206 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004200:	4a09      	ldr	r2, [pc, #36]	; (8004228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6013      	str	r3, [r2, #0]
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200003c0 	.word	0x200003c0
 8004214:	200002bc 	.word	0x200002bc
 8004218:	200003c4 	.word	0x200003c4
 800421c:	200003a8 	.word	0x200003a8
 8004220:	20000378 	.word	0x20000378
 8004224:	20000374 	.word	0x20000374
 8004228:	200003dc 	.word	0x200003dc

0800422c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b04      	subs	r3, #4
 800423c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3b04      	subs	r3, #4
 800424a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f023 0201 	bic.w	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b04      	subs	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800425c:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <pxPortInitialiseStack+0x64>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b14      	subs	r3, #20
 8004266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3b04      	subs	r3, #4
 8004272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f06f 0202 	mvn.w	r2, #2
 800427a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3b20      	subs	r3, #32
 8004280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	08004295 	.word	0x08004295

08004294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <prvTaskExitError+0x50>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d009      	beq.n	80042bc <prvTaskExitError+0x28>
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e7fe      	b.n	80042ba <prvTaskExitError+0x26>
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042ce:	bf00      	nop
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0fc      	beq.n	80042d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c
	...

080042f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <pxCurrentTCBConst2>)
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	6808      	ldr	r0, [r1, #0]
 80042f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	f380 8809 	msr	PSP, r0
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8811 	msr	BASEPRI, r0
 800430a:	4770      	bx	lr
 800430c:	f3af 8000 	nop.w

08004310 <pxCurrentTCBConst2>:
 8004310:	200002bc 	.word	0x200002bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004318:	4808      	ldr	r0, [pc, #32]	; (800433c <prvPortStartFirstTask+0x24>)
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	6800      	ldr	r0, [r0, #0]
 800431e:	f380 8808 	msr	MSP, r0
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f380 8814 	msr	CONTROL, r0
 800432a:	b662      	cpsie	i
 800432c:	b661      	cpsie	f
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	df00      	svc	0
 8004338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800433a:	bf00      	nop
 800433c:	e000ed08 	.word	0xe000ed08

08004340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <xPortStartScheduler+0x118>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a44      	ldr	r2, [pc, #272]	; (800445c <xPortStartScheduler+0x11c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d109      	bne.n	8004364 <xPortStartScheduler+0x24>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	e7fe      	b.n	8004362 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004364:	4b3c      	ldr	r3, [pc, #240]	; (8004458 <xPortStartScheduler+0x118>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3d      	ldr	r2, [pc, #244]	; (8004460 <xPortStartScheduler+0x120>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d109      	bne.n	8004382 <xPortStartScheduler+0x42>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e7fe      	b.n	8004380 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004382:	4b38      	ldr	r3, [pc, #224]	; (8004464 <xPortStartScheduler+0x124>)
 8004384:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	4b30      	ldr	r3, [pc, #192]	; (8004468 <xPortStartScheduler+0x128>)
 80043a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043aa:	4b30      	ldr	r3, [pc, #192]	; (800446c <xPortStartScheduler+0x12c>)
 80043ac:	2207      	movs	r2, #7
 80043ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b0:	e009      	b.n	80043c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <xPortStartScheduler+0x12c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	4a2c      	ldr	r2, [pc, #176]	; (800446c <xPortStartScheduler+0x12c>)
 80043ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d0ef      	beq.n	80043b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043d2:	4b26      	ldr	r3, [pc, #152]	; (800446c <xPortStartScheduler+0x12c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f1c3 0307 	rsb	r3, r3, #7
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d009      	beq.n	80043f2 <xPortStartScheduler+0xb2>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	e7fe      	b.n	80043f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043f2:	4b1e      	ldr	r3, [pc, #120]	; (800446c <xPortStartScheduler+0x12c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <xPortStartScheduler+0x12c>)
 80043fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <xPortStartScheduler+0x12c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <xPortStartScheduler+0x12c>)
 8004406:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <xPortStartScheduler+0x130>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <xPortStartScheduler+0x130>)
 8004416:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800441a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <xPortStartScheduler+0x130>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <xPortStartScheduler+0x130>)
 8004422:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004426:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004428:	f000 f8d6 	bl	80045d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <xPortStartScheduler+0x134>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004432:	f000 f8f5 	bl	8004620 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <xPortStartScheduler+0x138>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a0f      	ldr	r2, [pc, #60]	; (8004478 <xPortStartScheduler+0x138>)
 800443c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004440:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004442:	f7ff ff69 	bl	8004318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004446:	f7ff fd5f 	bl	8003f08 <vTaskSwitchContext>
	prvTaskExitError();
 800444a:	f7ff ff23 	bl	8004294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	e000ed00 	.word	0xe000ed00
 800445c:	410fc271 	.word	0x410fc271
 8004460:	410fc270 	.word	0x410fc270
 8004464:	e000e400 	.word	0xe000e400
 8004468:	200003e8 	.word	0x200003e8
 800446c:	200003ec 	.word	0x200003ec
 8004470:	e000ed20 	.word	0xe000ed20
 8004474:	2000000c 	.word	0x2000000c
 8004478:	e000ef34 	.word	0xe000ef34

0800447c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <vPortEnterCritical+0x54>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <vPortEnterCritical+0x54>)
 800449c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <vPortEnterCritical+0x54>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d10e      	bne.n	80044c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <vPortEnterCritical+0x58>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <vPortEnterCritical+0x48>
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	e7fe      	b.n	80044c2 <vPortEnterCritical+0x46>
	}
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	2000000c 	.word	0x2000000c
 80044d4:	e000ed04 	.word	0xe000ed04

080044d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <vPortExitCritical+0x4c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <vPortExitCritical+0x22>
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	e7fe      	b.n	80044f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <vPortExitCritical+0x4c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <vPortExitCritical+0x4c>)
 8004502:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <vPortExitCritical+0x4c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <vPortExitCritical+0x3e>
 800450c:	2300      	movs	r3, #0
 800450e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	2000000c 	.word	0x2000000c
	...

08004530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004530:	f3ef 8009 	mrs	r0, PSP
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	4b15      	ldr	r3, [pc, #84]	; (8004590 <pxCurrentTCBConst>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	f01e 0f10 	tst.w	lr, #16
 8004540:	bf08      	it	eq
 8004542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454a:	6010      	str	r0, [r2, #0]
 800454c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004554:	f380 8811 	msr	BASEPRI, r0
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f7ff fcd2 	bl	8003f08 <vTaskSwitchContext>
 8004564:	f04f 0000 	mov.w	r0, #0
 8004568:	f380 8811 	msr	BASEPRI, r0
 800456c:	bc09      	pop	{r0, r3}
 800456e:	6819      	ldr	r1, [r3, #0]
 8004570:	6808      	ldr	r0, [r1, #0]
 8004572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004576:	f01e 0f10 	tst.w	lr, #16
 800457a:	bf08      	it	eq
 800457c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004580:	f380 8809 	msr	PSP, r0
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	f3af 8000 	nop.w

08004590 <pxCurrentTCBConst>:
 8004590:	200002bc 	.word	0x200002bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045b0:	f7ff fbf2 	bl	8003d98 <xTaskIncrementTick>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <SysTick_Handler+0x3c>)
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	2300      	movs	r3, #0
 80045c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <vPortSetupTimerInterrupt+0x34>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <vPortSetupTimerInterrupt+0x38>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <vPortSetupTimerInterrupt+0x3c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <vPortSetupTimerInterrupt+0x40>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	099b      	lsrs	r3, r3, #6
 80045f4:	4a09      	ldr	r2, [pc, #36]	; (800461c <vPortSetupTimerInterrupt+0x44>)
 80045f6:	3b01      	subs	r3, #1
 80045f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <vPortSetupTimerInterrupt+0x34>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	601a      	str	r2, [r3, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000e010 	.word	0xe000e010
 8004610:	e000e018 	.word	0xe000e018
 8004614:	20000000 	.word	0x20000000
 8004618:	10624dd3 	.word	0x10624dd3
 800461c:	e000e014 	.word	0xe000e014

08004620 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004620:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004630 <vPortEnableVFP+0x10>
 8004624:	6801      	ldr	r1, [r0, #0]
 8004626:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800462a:	6001      	str	r1, [r0, #0]
 800462c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800462e:	bf00      	nop
 8004630:	e000ed88 	.word	0xe000ed88

08004634 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004640:	f7ff fb00 	bl	8003c44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004644:	4b57      	ldr	r3, [pc, #348]	; (80047a4 <pvPortMalloc+0x170>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800464c:	f000 f90c 	bl	8004868 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004650:	4b55      	ldr	r3, [pc, #340]	; (80047a8 <pvPortMalloc+0x174>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 808c 	bne.w	8004776 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01c      	beq.n	800469e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004664:	2208      	movs	r2, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	2b00      	cmp	r3, #0
 8004674:	d013      	beq.n	800469e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f023 0307 	bic.w	r3, r3, #7
 800467c:	3308      	adds	r3, #8
 800467e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <pvPortMalloc+0x6a>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e7fe      	b.n	800469c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d068      	beq.n	8004776 <pvPortMalloc+0x142>
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <pvPortMalloc+0x178>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d863      	bhi.n	8004776 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046ae:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <pvPortMalloc+0x17c>)
 80046b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046b2:	4b3f      	ldr	r3, [pc, #252]	; (80047b0 <pvPortMalloc+0x17c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046b8:	e004      	b.n	80046c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d903      	bls.n	80046d6 <pvPortMalloc+0xa2>
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f1      	bne.n	80046ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <pvPortMalloc+0x170>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	429a      	cmp	r2, r3
 80046de:	d04a      	beq.n	8004776 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2208      	movs	r2, #8
 80046e6:	4413      	add	r3, r2
 80046e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	1ad2      	subs	r2, r2, r3
 80046fa:	2308      	movs	r3, #8
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	429a      	cmp	r2, r3
 8004700:	d91e      	bls.n	8004740 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <pvPortMalloc+0xf4>
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e7fe      	b.n	8004726 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1ad2      	subs	r2, r2, r3
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800473a:	69b8      	ldr	r0, [r7, #24]
 800473c:	f000 f8f6 	bl	800492c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <pvPortMalloc+0x178>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	4a18      	ldr	r2, [pc, #96]	; (80047ac <pvPortMalloc+0x178>)
 800474c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800474e:	4b17      	ldr	r3, [pc, #92]	; (80047ac <pvPortMalloc+0x178>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <pvPortMalloc+0x180>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d203      	bcs.n	8004762 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800475a:	4b14      	ldr	r3, [pc, #80]	; (80047ac <pvPortMalloc+0x178>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <pvPortMalloc+0x180>)
 8004760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <pvPortMalloc+0x174>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	431a      	orrs	r2, r3
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004776:	f7ff fa73 	bl	8003c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <pvPortMalloc+0x164>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e7fe      	b.n	8004796 <pvPortMalloc+0x162>
	return pvReturn;
 8004798:	69fb      	ldr	r3, [r7, #28]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3728      	adds	r7, #40	; 0x28
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20003ff8 	.word	0x20003ff8
 80047a8:	20004004 	.word	0x20004004
 80047ac:	20003ffc 	.word	0x20003ffc
 80047b0:	20003ff0 	.word	0x20003ff0
 80047b4:	20004000 	.word	0x20004000

080047b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d046      	beq.n	8004858 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047ca:	2308      	movs	r3, #8
 80047cc:	425b      	negs	r3, r3
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4413      	add	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <vPortFree+0xa8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <vPortFree+0x42>
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e7fe      	b.n	80047f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <vPortFree+0x5e>
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	e7fe      	b.n	8004814 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <vPortFree+0xa8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d019      	beq.n	8004858 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d115      	bne.n	8004858 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vPortFree+0xa8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	43db      	mvns	r3, r3
 8004836:	401a      	ands	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800483c:	f7ff fa02 	bl	8003c44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <vPortFree+0xac>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4413      	add	r3, r2
 800484a:	4a06      	ldr	r2, [pc, #24]	; (8004864 <vPortFree+0xac>)
 800484c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	f000 f86c 	bl	800492c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004854:	f7ff fa04 	bl	8003c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20004004 	.word	0x20004004
 8004864:	20003ffc 	.word	0x20003ffc

08004868 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800486e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004872:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <prvHeapInit+0xac>)
 8004876:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3307      	adds	r3, #7
 8004886:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <prvHeapInit+0xac>)
 8004898:	4413      	add	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <prvHeapInit+0xb0>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <prvHeapInit+0xb0>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048b4:	2208      	movs	r2, #8
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <prvHeapInit+0xb4>)
 80048c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <prvHeapInit+0xb4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <prvHeapInit+0xb4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <prvHeapInit+0xb4>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <prvHeapInit+0xb8>)
 80048f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a09      	ldr	r2, [pc, #36]	; (8004924 <prvHeapInit+0xbc>)
 80048fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <prvHeapInit+0xc0>)
 8004902:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004906:	601a      	str	r2, [r3, #0]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	200003f0 	.word	0x200003f0
 8004918:	20003ff0 	.word	0x20003ff0
 800491c:	20003ff8 	.word	0x20003ff8
 8004920:	20004000 	.word	0x20004000
 8004924:	20003ffc 	.word	0x20003ffc
 8004928:	20004004 	.word	0x20004004

0800492c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004934:	4b28      	ldr	r3, [pc, #160]	; (80049d8 <prvInsertBlockIntoFreeList+0xac>)
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e002      	b.n	8004940 <prvInsertBlockIntoFreeList+0x14>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d8f7      	bhi.n	800493a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d108      	bne.n	800496e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	441a      	add	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	441a      	add	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d118      	bne.n	80049b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <prvInsertBlockIntoFreeList+0xb0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d00d      	beq.n	80049aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e008      	b.n	80049bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <prvInsertBlockIntoFreeList+0xb0>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e003      	b.n	80049bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d002      	beq.n	80049ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20003ff0 	.word	0x20003ff0
 80049dc:	20003ff8 	.word	0x20003ff8

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	4e0d      	ldr	r6, [pc, #52]	; (8004a18 <__libc_init_array+0x38>)
 80049e4:	4c0d      	ldr	r4, [pc, #52]	; (8004a1c <__libc_init_array+0x3c>)
 80049e6:	1ba4      	subs	r4, r4, r6
 80049e8:	10a4      	asrs	r4, r4, #2
 80049ea:	2500      	movs	r5, #0
 80049ec:	42a5      	cmp	r5, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	4e0b      	ldr	r6, [pc, #44]	; (8004a20 <__libc_init_array+0x40>)
 80049f2:	4c0c      	ldr	r4, [pc, #48]	; (8004a24 <__libc_init_array+0x44>)
 80049f4:	f000 f820 	bl	8004a38 <_init>
 80049f8:	1ba4      	subs	r4, r4, r6
 80049fa:	10a4      	asrs	r4, r4, #2
 80049fc:	2500      	movs	r5, #0
 80049fe:	42a5      	cmp	r5, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a08:	4798      	blx	r3
 8004a0a:	3501      	adds	r5, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a12:	4798      	blx	r3
 8004a14:	3501      	adds	r5, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	08004ac0 	.word	0x08004ac0
 8004a1c:	08004ac0 	.word	0x08004ac0
 8004a20:	08004ac0 	.word	0x08004ac0
 8004a24:	08004ac4 	.word	0x08004ac4

08004a28 <memset>:
 8004a28:	4402      	add	r2, r0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <memset+0xa>
 8004a30:	4770      	bx	lr
 8004a32:	f803 1b01 	strb.w	r1, [r3], #1
 8004a36:	e7f9      	b.n	8004a2c <memset+0x4>

08004a38 <_init>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr

08004a44 <_fini>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr
