
PACboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049fc  080049fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a04  08004a04  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000416c  20000010  08004a1c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  08004a1c  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103b5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002973  00000000  00000000  000303f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f50  00000000  00000000  00032d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de8  00000000  00000000  00033cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000221e1  00000000  00000000  00034aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dad4  00000000  00000000  00056c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1ffb  00000000  00000000  00064755  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  001367cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004988 	.word	0x08004988

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08004988 	.word	0x08004988

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <UART_Init>:

uint8_t txBuffer[TXBUFFERSIZE];
uint8_t rxBuffer[RXBUFFERSIZE];

void UART_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
//CLOCK
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b6d      	ldr	r3, [pc, #436]	; (80006e0 <UART_Init+0x1c0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a6c      	ldr	r2, [pc, #432]	; (80006e0 <UART_Init+0x1c0>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b6a      	ldr	r3, [pc, #424]	; (80006e0 <UART_Init+0x1c0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_USART6_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b66      	ldr	r3, [pc, #408]	; (80006e0 <UART_Init+0x1c0>)
 8000548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054a:	4a65      	ldr	r2, [pc, #404]	; (80006e0 <UART_Init+0x1c0>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	6453      	str	r3, [r2, #68]	; 0x44
 8000552:	4b63      	ldr	r3, [pc, #396]	; (80006e0 <UART_Init+0x1c0>)
 8000554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000556:	f003 0320 	and.w	r3, r3, #32
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
__DMA2_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	4b5f      	ldr	r3, [pc, #380]	; (80006e0 <UART_Init+0x1c0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a5e      	ldr	r2, [pc, #376]	; (80006e0 <UART_Init+0x1c0>)
 8000568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <UART_Init+0x1c0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

//GPIO
GPIO_InitTypeDef UART_GPIO;

UART_GPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800057a:	23c0      	movs	r3, #192	; 0xc0
 800057c:	60fb      	str	r3, [r7, #12]
UART_GPIO.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	613b      	str	r3, [r7, #16]
UART_GPIO.Pull = GPIO_PULLUP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
UART_GPIO.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	61bb      	str	r3, [r7, #24]
UART_GPIO.Alternate = GPIO_AF8_USART6;
 800058a:	2308      	movs	r3, #8
 800058c:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &UART_GPIO);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4619      	mov	r1, r3
 8000594:	4853      	ldr	r0, [pc, #332]	; (80006e4 <UART_Init+0x1c4>)
 8000596:	f001 f813 	bl	80015c0 <HAL_GPIO_Init>

//DMA
dma_tx.Instance                 = DMA2_Stream7;
 800059a:	4b53      	ldr	r3, [pc, #332]	; (80006e8 <UART_Init+0x1c8>)
 800059c:	4a53      	ldr	r2, [pc, #332]	; (80006ec <UART_Init+0x1cc>)
 800059e:	601a      	str	r2, [r3, #0]
dma_tx.Init.Channel             = DMA_CHANNEL_5;
 80005a0:	4b51      	ldr	r3, [pc, #324]	; (80006e8 <UART_Init+0x1c8>)
 80005a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80005a6:	605a      	str	r2, [r3, #4]
dma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80005a8:	4b4f      	ldr	r3, [pc, #316]	; (80006e8 <UART_Init+0x1c8>)
 80005aa:	2240      	movs	r2, #64	; 0x40
 80005ac:	609a      	str	r2, [r3, #8]
dma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80005ae:	4b4e      	ldr	r3, [pc, #312]	; (80006e8 <UART_Init+0x1c8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
dma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80005b4:	4b4c      	ldr	r3, [pc, #304]	; (80006e8 <UART_Init+0x1c8>)
 80005b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ba:	611a      	str	r2, [r3, #16]
dma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005bc:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <UART_Init+0x1c8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
dma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80005c2:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <UART_Init+0x1c8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
dma_tx.Init.Mode                = DMA_NORMAL;
 80005c8:	4b47      	ldr	r3, [pc, #284]	; (80006e8 <UART_Init+0x1c8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
dma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80005ce:	4b46      	ldr	r3, [pc, #280]	; (80006e8 <UART_Init+0x1c8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
dma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <UART_Init+0x1c8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
dma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80005da:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <UART_Init+0x1c8>)
 80005dc:	2203      	movs	r2, #3
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
dma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80005e0:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <UART_Init+0x1c8>)
 80005e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005e6:	62da      	str	r2, [r3, #44]	; 0x2c
dma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <UART_Init+0x1c8>)
 80005ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005ee:	631a      	str	r2, [r3, #48]	; 0x30

HAL_DMA_Init(&dma_tx);
 80005f0:	483d      	ldr	r0, [pc, #244]	; (80006e8 <UART_Init+0x1c8>)
 80005f2:	f000 fc55 	bl	8000ea0 <HAL_DMA_Init>


dma_rx.Instance                 = DMA2_Stream1;
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <UART_Init+0x1d0>)
 80005f8:	4a3e      	ldr	r2, [pc, #248]	; (80006f4 <UART_Init+0x1d4>)
 80005fa:	601a      	str	r2, [r3, #0]
dma_rx.Init.Channel             = DMA_CHANNEL_5;
 80005fc:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <UART_Init+0x1d0>)
 80005fe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000602:	605a      	str	r2, [r3, #4]
dma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000604:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <UART_Init+0x1d0>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
dma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800060a:	4b39      	ldr	r3, [pc, #228]	; (80006f0 <UART_Init+0x1d0>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
dma_rx.Init.MemInc              = DMA_MINC_DISABLE;
 8000610:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <UART_Init+0x1d0>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
dma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <UART_Init+0x1d0>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
dma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <UART_Init+0x1d0>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
dma_rx.Init.Mode                = DMA_NORMAL;
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <UART_Init+0x1d0>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
dma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <UART_Init+0x1d0>)
 800062a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800062e:	621a      	str	r2, [r3, #32]
dma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <UART_Init+0x1d0>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
dma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <UART_Init+0x1d0>)
 8000638:	2203      	movs	r2, #3
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
dma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <UART_Init+0x1d0>)
 800063e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
dma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <UART_Init+0x1d0>)
 8000646:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800064a:	631a      	str	r2, [r3, #48]	; 0x30

HAL_DMA_Init(&dma_rx);
 800064c:	4828      	ldr	r0, [pc, #160]	; (80006f0 <UART_Init+0x1d0>)
 800064e:	f000 fc27 	bl	8000ea0 <HAL_DMA_Init>



//UART
uart6.Instance        = USART6;
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <UART_Init+0x1d8>)
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <UART_Init+0x1dc>)
 8000656:	601a      	str	r2, [r3, #0]

uart6.Init.BaudRate   = 9600;
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <UART_Init+0x1d8>)
 800065a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800065e:	605a      	str	r2, [r3, #4]
uart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <UART_Init+0x1d8>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
uart6.Init.StopBits   = UART_STOPBITS_1;
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <UART_Init+0x1d8>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
uart6.Init.Parity     = UART_PARITY_NONE;
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <UART_Init+0x1d8>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
uart6.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <UART_Init+0x1d8>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
uart6.Init.Mode       = UART_MODE_TX_RX;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <UART_Init+0x1d8>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
if(HAL_UART_Init(&uart6) != HAL_OK)
 800067e:	481e      	ldr	r0, [pc, #120]	; (80006f8 <UART_Init+0x1d8>)
 8000680:	f001 ffae 	bl	80025e0 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <UART_Init+0x170>
{
  errorMessage = 0x0002; //UART failure
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <UART_Init+0x1e0>)
 800068c:	2202      	movs	r2, #2
 800068e:	801a      	strh	r2, [r3, #0]
}


//Link DMA -> UART
__HAL_LINKDMA(&uart6, hdmatx, dma_tx);
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <UART_Init+0x1d8>)
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <UART_Init+0x1c8>)
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <UART_Init+0x1c8>)
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <UART_Init+0x1d8>)
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
__HAL_LINKDMA(&uart6, hdmarx, dma_rx);
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <UART_Init+0x1d8>)
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <UART_Init+0x1d0>)
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <UART_Init+0x1d0>)
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <UART_Init+0x1d8>)
 80006a6:	639a      	str	r2, [r3, #56]	; 0x38


HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2100      	movs	r1, #0
 80006ac:	2046      	movs	r0, #70	; 0x46
 80006ae:	f000 fbcd 	bl	8000e4c <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006b2:	2046      	movs	r0, #70	; 0x46
 80006b4:	f000 fbe6 	bl	8000e84 <HAL_NVIC_EnableIRQ>

/* NVIC configuration for DMA transfer complete interrupt (USART6_RX) */
HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2039      	movs	r0, #57	; 0x39
 80006be:	f000 fbc5 	bl	8000e4c <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006c2:	2039      	movs	r0, #57	; 0x39
 80006c4:	f000 fbde 	bl	8000e84 <HAL_NVIC_EnableIRQ>

/* NVIC for USART, to catch the TX complete */
HAL_NVIC_SetPriority(USART6_IRQn, 0, 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2100      	movs	r1, #0
 80006cc:	2047      	movs	r0, #71	; 0x47
 80006ce:	f000 fbbd 	bl	8000e4c <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(USART6_IRQn);
 80006d2:	2047      	movs	r0, #71	; 0x47
 80006d4:	f000 fbd6 	bl	8000e84 <HAL_NVIC_EnableIRQ>
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020800 	.word	0x40020800
 80006e8:	20003ff8 	.word	0x20003ff8
 80006ec:	400264b8 	.word	0x400264b8
 80006f0:	200040d8 	.word	0x200040d8
 80006f4:	40026428 	.word	0x40026428
 80006f8:	20004058 	.word	0x20004058
 80006fc:	40011400 	.word	0x40011400
 8000700:	20003ff4 	.word	0x20003ff4

08000704 <TASK_UARTHandler>:


void TASK_UARTHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&uart6, rxBuffer, RXBUFFERSIZE);
 800070a:	2220      	movs	r2, #32
 800070c:	4913      	ldr	r1, [pc, #76]	; (800075c <TASK_UARTHandler+0x58>)
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <TASK_UARTHandler+0x5c>)
 8000710:	f002 f82a 	bl	8002768 <HAL_UART_Receive_DMA>

	for(int i = 0; i < RXBUFFERSIZE; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e00b      	b.n	8000732 <TASK_UARTHandler+0x2e>
	{
		txBuffer[i]=rxBuffer[i];
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <TASK_UARTHandler+0x58>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	7819      	ldrb	r1, [r3, #0]
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <TASK_UARTHandler+0x60>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	460a      	mov	r2, r1
 800072a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RXBUFFERSIZE; i++)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b1f      	cmp	r3, #31
 8000736:	ddf0      	ble.n	800071a <TASK_UARTHandler+0x16>
	}

	if(HAL_UART_Transmit_DMA(&uart6, (uint8_t*)txBuffer, TXBUFFERSIZE) != HAL_OK)
 8000738:	2220      	movs	r2, #32
 800073a:	490a      	ldr	r1, [pc, #40]	; (8000764 <TASK_UARTHandler+0x60>)
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <TASK_UARTHandler+0x5c>)
 800073e:	f001 ffa7 	bl	8002690 <HAL_UART_Transmit_DMA>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d005      	beq.n	8000754 <TASK_UARTHandler+0x50>
	{
		GPIOB->ODR ^= GPIO_PIN_14;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <TASK_UARTHandler+0x64>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <TASK_UARTHandler+0x64>)
 800074e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000752:	6153      	str	r3, [r2, #20]
	}
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20004098 	.word	0x20004098
 8000760:	20004058 	.word	0x20004058
 8000764:	200040b8 	.word	0x200040b8
 8000768:	40020400 	.word	0x40020400

0800076c <DMA2_Stream1_IRQHandler>:



//Interrupt Handling
void DMA2_Stream1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&dma_rx);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <DMA2_Stream1_IRQHandler+0x10>)
 8000772:	f000 fcbd 	bl	80010f0 <HAL_DMA_IRQHandler>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200040d8 	.word	0x200040d8

08000780 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&dma_tx);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <DMA2_Stream7_IRQHandler+0x10>)
 8000786:	f000 fcb3 	bl	80010f0 <HAL_DMA_IRQHandler>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20003ff8 	.word	0x20003ff8

08000794 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart6);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <USART6_IRQHandler+0x10>)
 800079a:	f002 f865 	bl	8002868 <HAL_UART_IRQHandler>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20004058 	.word	0x20004058

080007a8 <TASK_errorHandler>:

static GPIO_InitTypeDef  GPIO_InitStructRED;
static GPIO_InitTypeDef  GPIO_InitStructBLU;

void TASK_errorHandler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <TASK_nucleoRED>:

void TASK_nucleoRED(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
		//GPIOB->ODR ^= GPIO_PIN_14;
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <TASK_nucleoBLU>:




void TASK_nucleoBLU(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
		//GPIOB->ODR ^= GPIO_PIN_7;
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <errorInit>:


void errorInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	GPIO_InitStructRED.Mode  = GPIO_MODE_OUTPUT_PP;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <errorInit+0x4c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	605a      	str	r2, [r3, #4]
	GPIO_InitStructRED.Pull  = GPIO_PULLUP;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <errorInit+0x4c>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	609a      	str	r2, [r3, #8]
	GPIO_InitStructRED.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <errorInit+0x4c>)
 80007e6:	2203      	movs	r2, #3
 80007e8:	60da      	str	r2, [r3, #12]
	GPIO_InitStructRED.Pin = GPIO_PIN_7;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <errorInit+0x4c>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructRED);
 80007f0:	490b      	ldr	r1, [pc, #44]	; (8000820 <errorInit+0x4c>)
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <errorInit+0x50>)
 80007f4:	f000 fee4 	bl	80015c0 <HAL_GPIO_Init>

	GPIO_InitStructBLU.Mode  = GPIO_MODE_OUTPUT_PP;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <errorInit+0x54>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	605a      	str	r2, [r3, #4]
	GPIO_InitStructBLU.Pull  = GPIO_PULLUP;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <errorInit+0x54>)
 8000800:	2201      	movs	r2, #1
 8000802:	609a      	str	r2, [r3, #8]
	GPIO_InitStructBLU.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <errorInit+0x54>)
 8000806:	2203      	movs	r2, #3
 8000808:	60da      	str	r2, [r3, #12]
	GPIO_InitStructBLU.Pin = GPIO_PIN_14;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <errorInit+0x54>)
 800080c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000810:	601a      	str	r2, [r3, #0]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructBLU);
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <errorInit+0x54>)
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <errorInit+0x50>)
 8000816:	f000 fed3 	bl	80015c0 <HAL_GPIO_Init>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000002c 	.word	0x2000002c
 8000824:	40020400 	.word	0x40020400
 8000828:	20000040 	.word	0x20000040

0800082c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4a07      	ldr	r2, [pc, #28]	; (8000858 <vApplicationGetIdleTaskMemory+0x2c>)
 800083c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <vApplicationGetIdleTaskMemory+0x30>)
 8000842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000054 	.word	0x20000054
 800085c:	200000a8 	.word	0x200000a8

08000860 <main>:

void SystemClock_Config(void);
void StartDefaultTask(void const * argument);

int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  HAL_Init();
 8000864:	f000 f9f8 	bl	8000c58 <HAL_Init>
  SystemClock_Config();
 8000868:	f000 f808 	bl	800087c <SystemClock_Config>
  errorInit();
 800086c:	f7ff ffb2 	bl	80007d4 <errorInit>
  UART_Init();
 8000870:	f7ff fe56 	bl	8000520 <UART_Init>
  RTOS_init();
 8000874:	f000 f89a 	bl	80009ac <RTOS_init>

  for(;;);
 8000878:	e7fe      	b.n	8000878 <main+0x18>
	...

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b096      	sub	sp, #88	; 0x58
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	2234      	movs	r2, #52	; 0x34
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f004 f874 	bl	8004978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xbc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	4a23      	ldr	r2, [pc, #140]	; (8000938 <SystemClock_Config+0xbc>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	; 0x40
 80008b0:	4b21      	ldr	r3, [pc, #132]	; (8000938 <SystemClock_Config+0xbc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <SystemClock_Config+0xc0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <SystemClock_Config+0xc0>)
 80008c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <SystemClock_Config+0xc0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2310      	movs	r3, #16
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 f9f7 	bl	8001ce0 <HAL_RCC_OscConfig>
  {
    //error
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]


  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <SystemClock_Config+0xbc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <SystemClock_Config+0xbc>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <SystemClock_Config+0xbc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f000 ffdb 	bl	80018e4 <HAL_RCC_ClockConfig>
  {
	 //error
  }
}
 800092e:	bf00      	nop
 8000930:	3758      	adds	r7, #88	; 0x58
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 f9a3 	bl	8000c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010000 	.word	0x40010000

08000964 <PRIVATE_errorHandler>:
static void PRIVATE_nucleoRED(void);
static void PRIVATE_nucleoBLU(void);
static void PRIVATE_UARTHandler(void);

static void PRIVATE_errorHandler()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_errorHandler();
 8000968:	f7ff ff1e 	bl	80007a8 <TASK_errorHandler>
		vTaskDelay(500);
 800096c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000970:	f003 f882 	bl	8003a78 <vTaskDelay>
		TASK_errorHandler();
 8000974:	e7f8      	b.n	8000968 <PRIVATE_errorHandler+0x4>

08000976 <PRIVATE_nucleoRED>:
	}
}

static void PRIVATE_nucleoRED()
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoRED();
 800097a:	f7ff ff1c 	bl	80007b6 <TASK_nucleoRED>
		vTaskDelay(500);
 800097e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000982:	f003 f879 	bl	8003a78 <vTaskDelay>
		TASK_nucleoRED();
 8000986:	e7f8      	b.n	800097a <PRIVATE_nucleoRED+0x4>

08000988 <PRIVATE_nucleoBLU>:
	}
}

static void PRIVATE_nucleoBLU()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_nucleoBLU();
 800098c:	f7ff ff1a 	bl	80007c4 <TASK_nucleoBLU>
		vTaskDelay(250);
 8000990:	20fa      	movs	r0, #250	; 0xfa
 8000992:	f003 f871 	bl	8003a78 <vTaskDelay>
		TASK_nucleoBLU();
 8000996:	e7f9      	b.n	800098c <PRIVATE_nucleoBLU+0x4>

08000998 <PRIVATE_UARTHandler>:
	}
}

static void PRIVATE_UARTHandler()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	while(1)
	{
		TASK_UARTHandler();
 800099c:	f7ff feb2 	bl	8000704 <TASK_UARTHandler>
		vTaskDelay(1000);
 80009a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a4:	f003 f868 	bl	8003a78 <vTaskDelay>
		TASK_UARTHandler();
 80009a8:	e7f8      	b.n	800099c <PRIVATE_UARTHandler+0x4>
	...

080009ac <RTOS_init>:




void RTOS_init()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
	BaseType_t ret;


	TaskHandle_t errorHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_errorHandler,
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	2301      	movs	r3, #1
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2300      	movs	r3, #0
 80009be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c2:	492a      	ldr	r1, [pc, #168]	; (8000a6c <RTOS_init+0xc0>)
 80009c4:	482a      	ldr	r0, [pc, #168]	; (8000a70 <RTOS_init+0xc4>)
 80009c6:	f002 ff21 	bl	800380c <xTaskCreate>
 80009ca:	6178      	str	r0, [r7, #20]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 1U,
				&errorHandler_th);

		if(ret != pdPASS)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d006      	beq.n	80009e0 <RTOS_init+0x34>
		{
			errorMessage |= 0x0001; //RTOS init error
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <RTOS_init+0xc8>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <RTOS_init+0xc8>)
 80009de:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoRED_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_nucleoRED,
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	2303      	movs	r3, #3
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f0:	4921      	ldr	r1, [pc, #132]	; (8000a78 <RTOS_init+0xcc>)
 80009f2:	4822      	ldr	r0, [pc, #136]	; (8000a7c <RTOS_init+0xd0>)
 80009f4:	f002 ff0a 	bl	800380c <xTaskCreate>
 80009f8:	6178      	str	r0, [r7, #20]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoRED_th);

		if(ret != pdPASS)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d006      	beq.n	8000a0e <RTOS_init+0x62>
		{
			errorMessage |= 0x0001; //RTOS init error
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <RTOS_init+0xc8>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <RTOS_init+0xc8>)
 8000a0c:	801a      	strh	r2, [r3, #0]



	TaskHandle_t nucleoBLUE_th;

	xTaskCreate((TaskFunction_t)PRIVATE_nucleoBLU,
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	2303      	movs	r3, #3
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1e:	4918      	ldr	r1, [pc, #96]	; (8000a80 <RTOS_init+0xd4>)
 8000a20:	4818      	ldr	r0, [pc, #96]	; (8000a84 <RTOS_init+0xd8>)
 8000a22:	f002 fef3 	bl	800380c <xTaskCreate>
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 3U,
				&nucleoBLUE_th);

		if(ret != pdPASS)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d006      	beq.n	8000a3a <RTOS_init+0x8e>
		{
			errorMessage |= 0x00000001; //RTOS init error
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <RTOS_init+0xc8>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <RTOS_init+0xc8>)
 8000a38:	801a      	strh	r2, [r3, #0]



	TaskHandle_t UARTHandler_th;

	ret = xTaskCreate((TaskFunction_t)PRIVATE_UARTHandler,
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	2305      	movs	r3, #5
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2300      	movs	r3, #0
 8000a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a48:	490f      	ldr	r1, [pc, #60]	; (8000a88 <RTOS_init+0xdc>)
 8000a4a:	4810      	ldr	r0, [pc, #64]	; (8000a8c <RTOS_init+0xe0>)
 8000a4c:	f002 fede 	bl	800380c <xTaskCreate>
 8000a50:	6178      	str	r0, [r7, #20]
				configMINIMAL_STACK_SIZE*2,
				NULL,
				tskIDLE_PRIORITY + 5U,
				&UARTHandler_th);

		if(ret != pdPASS)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d006      	beq.n	8000a66 <RTOS_init+0xba>
		{
			errorMessage |= 0x0001; //RTOS init error
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <RTOS_init+0xc8>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <RTOS_init+0xc8>)
 8000a64:	801a      	strh	r2, [r3, #0]
		}

	vTaskStartScheduler();
 8000a66:	f003 f83b 	bl	8003ae0 <vTaskStartScheduler>

	for(;;);
 8000a6a:	e7fe      	b.n	8000a6a <RTOS_init+0xbe>
 8000a6c:	080049a0 	.word	0x080049a0
 8000a70:	08000965 	.word	0x08000965
 8000a74:	20003ff4 	.word	0x20003ff4
 8000a78:	080049b0 	.word	0x080049b0
 8000a7c:	08000977 	.word	0x08000977
 8000a80:	080049bc 	.word	0x080049bc
 8000a84:	08000989 	.word	0x08000989
 8000a88:	080049c8 	.word	0x080049c8
 8000a8c:	08000999 	.word	0x08000999

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2019      	movs	r0, #25
 8000af6:	f000 f9a9 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000afa:	2019      	movs	r0, #25
 8000afc:	f000 f9c2 	bl	8000e84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <HAL_InitTick+0xa0>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_InitTick+0xa0>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_InitTick+0xa0>)
 8000b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f8a8 	bl	8001c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b2c:	f001 f892 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8000b30:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0c9b      	lsrs	r3, r3, #18
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <HAL_InitTick+0xac>)
 8000b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b62:	f001 faff 	bl	8002164 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d104      	bne.n	8000b76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b6e:	f001 fb2e 	bl	80021ce <HAL_TIM_Base_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	20004138 	.word	0x20004138
 8000b8c:	40010000 	.word	0x40010000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bca:	f001 fb24 	bl	8002216 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20004138 	.word	0x20004138

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <SystemInit+0x28>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <SystemInit+0x28>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <SystemInit+0x28>)
 8000bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c0a:	e003      	b.n	8000c14 <LoopCopyDataInit>

08000c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c12:	3104      	adds	r1, #4

08000c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c1c:	d3f6      	bcc.n	8000c0c <CopyDataInit>
  ldr  r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c20:	e002      	b.n	8000c28 <LoopFillZerobss>

08000c22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c24:	f842 3b04 	str.w	r3, [r2], #4

08000c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c2c:	d3f9      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2e:	f7ff ffd3 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f003 fe7d 	bl	8004930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fe13 	bl	8000860 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c3c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000c40:	08004a0c 	.word	0x08004a0c
  ldr  r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c48:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c4c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c50:	2000417c 	.word	0x2000417c

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f8d8 	bl	8000e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff ff2a 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff ff00 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20004178 	.word	0x20004178

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20004178 	.word	0x20004178

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff4c 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5e:	f7ff ff61 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff ffb1 	bl	8000dd0 <NVIC_EncodePriority>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff80 	bl	8000d7c <__NVIC_SetPriority>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff54 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ff0a 	bl	8000cc4 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e099      	b.n	8000ff0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000edc:	e00f      	b.n	8000efe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ede:	f7ff fef1 	bl	8000cc4 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d908      	bls.n	8000efe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2220      	movs	r2, #32
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e078      	b.n	8000ff0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1e8      	bne.n	8000ede <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <HAL_DMA_Init+0x158>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d107      	bne.n	8000f68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	4313      	orrs	r3, r2
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f023 0307 	bic.w	r3, r3, #7
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d117      	bne.n	8000fc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00e      	beq.n	8000fc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fa91 	bl	80014cc <DMA_CheckFifoParam>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2240      	movs	r2, #64	; 0x40
 8000fb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e016      	b.n	8000ff0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fa48 	bl	8001460 <DMA_CalcBaseAndBitshift>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd8:	223f      	movs	r2, #63	; 0x3f
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	e010803f 	.word	0xe010803f

08000ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_DMA_Start_IT+0x26>
 800101e:	2302      	movs	r3, #2
 8001020:	e040      	b.n	80010a4 <HAL_DMA_Start_IT+0xa8>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d12f      	bne.n	8001096 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2202      	movs	r2, #2
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f9da 	bl	8001404 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001054:	223f      	movs	r2, #63	; 0x3f
 8001056:	409a      	lsls	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0216 	orr.w	r2, r2, #22
 800106a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0208 	orr.w	r2, r2, #8
 8001082:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e005      	b.n	80010a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800109e:	2302      	movs	r3, #2
 80010a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d004      	beq.n	80010ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00c      	b.n	80010e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2205      	movs	r2, #5
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010fc:	4b92      	ldr	r3, [pc, #584]	; (8001348 <HAL_DMA_IRQHandler+0x258>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a92      	ldr	r2, [pc, #584]	; (800134c <HAL_DMA_IRQHandler+0x25c>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0a9b      	lsrs	r3, r3, #10
 8001108:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	2208      	movs	r2, #8
 800111c:	409a      	lsls	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d01a      	beq.n	800115c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0204 	bic.w	r2, r2, #4
 8001142:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	2208      	movs	r2, #8
 800114a:	409a      	lsls	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	2201      	movs	r2, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d012      	beq.n	8001192 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00b      	beq.n	8001192 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	2201      	movs	r2, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118a:	f043 0202 	orr.w	r2, r3, #2
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001196:	2204      	movs	r2, #4
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d012      	beq.n	80011c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00b      	beq.n	80011c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	2204      	movs	r2, #4
 80011b6:	409a      	lsls	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	f043 0204 	orr.w	r2, r3, #4
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	2210      	movs	r2, #16
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d043      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d03c      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2210      	movs	r2, #16
 80011ec:	409a      	lsls	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d018      	beq.n	8001232 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d108      	bne.n	8001220 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	2b00      	cmp	r3, #0
 8001214:	d024      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
 800121e:	e01f      	b.n	8001260 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001224:	2b00      	cmp	r3, #0
 8001226:	d01b      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4798      	blx	r3
 8001230:	e016      	b.n	8001260 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0208 	bic.w	r2, r2, #8
 800124e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	2220      	movs	r2, #32
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 808e 	beq.w	800138e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8086 	beq.w	800138e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	2220      	movs	r2, #32
 8001288:	409a      	lsls	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b05      	cmp	r3, #5
 8001298:	d136      	bne.n	8001308 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0216 	bic.w	r2, r2, #22
 80012a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <HAL_DMA_IRQHandler+0x1da>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0208 	bic.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	223f      	movs	r2, #63	; 0x3f
 80012e0:	409a      	lsls	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d07d      	beq.n	80013fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
        }
        return;
 8001306:	e078      	b.n	80013fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01c      	beq.n	8001350 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d108      	bne.n	8001336 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	2b00      	cmp	r3, #0
 800132a:	d030      	beq.n	800138e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
 8001334:	e02b      	b.n	800138e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133a:	2b00      	cmp	r3, #0
 800133c:	d027      	beq.n	800138e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
 8001346:	e022      	b.n	800138e <HAL_DMA_IRQHandler+0x29e>
 8001348:	20000000 	.word	0x20000000
 800134c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0210 	bic.w	r2, r2, #16
 800136c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	2b00      	cmp	r3, #0
 8001394:	d032      	beq.n	80013fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d022      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2205      	movs	r2, #5
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3301      	adds	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d307      	bcc.n	80013d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f2      	bne.n	80013ba <HAL_DMA_IRQHandler+0x2ca>
 80013d4:	e000      	b.n	80013d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
 80013f8:	e000      	b.n	80013fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80013fa:	bf00      	nop
    }
  }
}
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop

08001404 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001420:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d108      	bne.n	8001444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001442:	e007      	b.n	8001454 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3b10      	subs	r3, #16
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <DMA_CalcBaseAndBitshift+0x68>)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d909      	bls.n	80014a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	1d1a      	adds	r2, r3, #4
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	659a      	str	r2, [r3, #88]	; 0x58
 80014a0:	e007      	b.n	80014b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	aaaaaaab 	.word	0xaaaaaaab
 80014c8:	080049f4 	.word	0x080049f4

080014cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d11f      	bne.n	8001526 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d855      	bhi.n	8001598 <DMA_CheckFifoParam+0xcc>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <DMA_CheckFifoParam+0x28>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001505 	.word	0x08001505
 80014f8:	08001517 	.word	0x08001517
 80014fc:	08001505 	.word	0x08001505
 8001500:	08001599 	.word	0x08001599
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d045      	beq.n	800159c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001514:	e042      	b.n	800159c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800151e:	d13f      	bne.n	80015a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001524:	e03c      	b.n	80015a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152e:	d121      	bne.n	8001574 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d836      	bhi.n	80015a4 <DMA_CheckFifoParam+0xd8>
 8001536:	a201      	add	r2, pc, #4	; (adr r2, 800153c <DMA_CheckFifoParam+0x70>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800154d 	.word	0x0800154d
 8001540:	08001553 	.word	0x08001553
 8001544:	0800154d 	.word	0x0800154d
 8001548:	08001565 	.word	0x08001565
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
      break;
 8001550:	e02f      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d024      	beq.n	80015a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001562:	e021      	b.n	80015a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800156c:	d11e      	bne.n	80015ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001572:	e01b      	b.n	80015ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d902      	bls.n	8001580 <DMA_CheckFifoParam+0xb4>
 800157a:	2b03      	cmp	r3, #3
 800157c:	d003      	beq.n	8001586 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800157e:	e018      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
      break;
 8001584:	e015      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00e      	beq.n	80015b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
      break;
 8001596:	e00b      	b.n	80015b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001598:	bf00      	nop
 800159a:	e00a      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      break;
 800159c:	bf00      	nop
 800159e:	e008      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      break;
 80015a0:	bf00      	nop
 80015a2:	e006      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      break;
 80015a4:	bf00      	nop
 80015a6:	e004      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      break;
 80015a8:	bf00      	nop
 80015aa:	e002      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80015ac:	bf00      	nop
 80015ae:	e000      	b.n	80015b2 <DMA_CheckFifoParam+0xe6>
      break;
 80015b0:	bf00      	nop
    }
  } 
  
  return status; 
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e165      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8154 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d00b      	beq.n	800161a <HAL_GPIO_Init+0x5a>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800160e:	2b11      	cmp	r3, #17
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b12      	cmp	r3, #18
 8001618:	d130      	bne.n	800167c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0xfc>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b12      	cmp	r3, #18
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ae 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_GPIO_Init+0x2fc>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a5b      	ldr	r2, [pc, #364]	; (80018bc <HAL_GPIO_Init+0x2fc>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_GPIO_Init+0x2fc>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a57      	ldr	r2, [pc, #348]	; (80018c0 <HAL_GPIO_Init+0x300>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4e      	ldr	r2, [pc, #312]	; (80018c4 <HAL_GPIO_Init+0x304>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <HAL_GPIO_Init+0x308>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4c      	ldr	r2, [pc, #304]	; (80018cc <HAL_GPIO_Init+0x30c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4b      	ldr	r2, [pc, #300]	; (80018d0 <HAL_GPIO_Init+0x310>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <HAL_GPIO_Init+0x314>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x20a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a49      	ldr	r2, [pc, #292]	; (80018d8 <HAL_GPIO_Init+0x318>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x206>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_GPIO_Init+0x31c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x202>
 80017be:	2306      	movs	r3, #6
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4934      	ldr	r1, [pc, #208]	; (80018c0 <HAL_GPIO_Init+0x300>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_GPIO_Init+0x320>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181e:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <HAL_GPIO_Init+0x320>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_GPIO_Init+0x320>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001848:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <HAL_GPIO_Init+0x320>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_GPIO_Init+0x320>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_GPIO_Init+0x320>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_GPIO_Init+0x320>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_GPIO_Init+0x320>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae96 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40021400 	.word	0x40021400
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0cc      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d90c      	bls.n	8001920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b8      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	494d      	ldr	r1, [pc, #308]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d044      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e067      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4934      	ldr	r1, [pc, #208]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff f976 	bl	8000cc4 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff f972 	bl	8000cc4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e04f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d20c      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e032      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4916      	ldr	r1, [pc, #88]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f821 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4601      	mov	r1, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	5cd3      	ldrb	r3, [r2, r3]
 8001a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f828 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	080049dc 	.word	0x080049dc
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac6:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d007      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x32>
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d008      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 808d 	bne.w	8001bf6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ade:	60bb      	str	r3, [r7, #8]
       break;
 8001ae0:	e08c      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ae4:	60bb      	str	r3, [r7, #8]
      break;
 8001ae6:	e089      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae8:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af2:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d023      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	f04f 0400 	mov.w	r4, #0
 8001b08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	ea03 0501 	and.w	r5, r3, r1
 8001b14:	ea04 0602 	and.w	r6, r4, r2
 8001b18:	4a3d      	ldr	r2, [pc, #244]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b1a:	fb02 f106 	mul.w	r1, r2, r6
 8001b1e:	2200      	movs	r2, #0
 8001b20:	fb02 f205 	mul.w	r2, r2, r5
 8001b24:	440a      	add	r2, r1
 8001b26:	493a      	ldr	r1, [pc, #232]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b28:	fba5 0101 	umull	r0, r1, r5, r1
 8001b2c:	1853      	adds	r3, r2, r1
 8001b2e:	4619      	mov	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f04f 0400 	mov.w	r4, #0
 8001b36:	461a      	mov	r2, r3
 8001b38:	4623      	mov	r3, r4
 8001b3a:	f7fe fb71 	bl	8000220 <__aeabi_uldivmod>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e049      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	f04f 0400 	mov.w	r4, #0
 8001b50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	ea03 0501 	and.w	r5, r3, r1
 8001b5c:	ea04 0602 	and.w	r6, r4, r2
 8001b60:	4629      	mov	r1, r5
 8001b62:	4632      	mov	r2, r6
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f04f 0400 	mov.w	r4, #0
 8001b6c:	0154      	lsls	r4, r2, #5
 8001b6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b72:	014b      	lsls	r3, r1, #5
 8001b74:	4619      	mov	r1, r3
 8001b76:	4622      	mov	r2, r4
 8001b78:	1b49      	subs	r1, r1, r5
 8001b7a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	0194      	lsls	r4, r2, #6
 8001b88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b8c:	018b      	lsls	r3, r1, #6
 8001b8e:	1a5b      	subs	r3, r3, r1
 8001b90:	eb64 0402 	sbc.w	r4, r4, r2
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	00e2      	lsls	r2, r4, #3
 8001b9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ba2:	00d9      	lsls	r1, r3, #3
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	195b      	adds	r3, r3, r5
 8001baa:	eb44 0406 	adc.w	r4, r4, r6
 8001bae:	f04f 0100 	mov.w	r1, #0
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	02a2      	lsls	r2, r4, #10
 8001bb8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bbc:	0299      	lsls	r1, r3, #10
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f04f 0400 	mov.w	r4, #0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	f7fe fb26 	bl	8000220 <__aeabi_uldivmod>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460c      	mov	r4, r1
 8001bd8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	3301      	adds	r3, #1
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	60bb      	str	r3, [r7, #8]
      break;
 8001bf4:	e002      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001bf8:	60bb      	str	r3, [r7, #8]
      break;
 8001bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bfc:	68bb      	ldr	r3, [r7, #8]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	017d7840 	.word	0x017d7840

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff0 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c34:	4601      	mov	r1, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	080049ec 	.word	0x080049ec

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c58:	f7ff ffdc 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0b5b      	lsrs	r3, r3, #13
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	080049ec 	.word	0x080049ec

08001c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	220f      	movs	r2, #15
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_RCC_GetClockConfig+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 020f 	and.w	r2, r3, #15
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d075      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cf8:	4ba2      	ldr	r3, [pc, #648]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d00c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d04:	4b9f      	ldr	r3, [pc, #636]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d112      	bne.n	8001d36 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d10:	4b9c      	ldr	r3, [pc, #624]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1c:	d10b      	bne.n	8001d36 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1e:	4b99      	ldr	r3, [pc, #612]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d05b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x102>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d157      	bne.n	8001de2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e20b      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x6e>
 8001d40:	4b90      	ldr	r3, [pc, #576]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a8f      	ldr	r2, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e01d      	b.n	8001d8a <HAL_RCC_OscConfig+0xaa>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x92>
 8001d58:	4b8a      	ldr	r3, [pc, #552]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a89      	ldr	r2, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b87      	ldr	r3, [pc, #540]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a86      	ldr	r2, [pc, #536]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e00b      	b.n	8001d8a <HAL_RCC_OscConfig+0xaa>
 8001d72:	4b84      	ldr	r3, [pc, #528]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a83      	ldr	r2, [pc, #524]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b81      	ldr	r3, [pc, #516]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a80      	ldr	r2, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d013      	beq.n	8001dba <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7fe ff97 	bl	8000cc4 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9a:	f7fe ff93 	bl	8000cc4 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1d0      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dac:	4b75      	ldr	r3, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0xba>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7fe ff83 	bl	8000cc4 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc2:	f7fe ff7f 	bl	8000cc4 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	; 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1bc      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xe2>
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d063      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001df0:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfc:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d11c      	bne.n	8001e42 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e08:	4b5e      	ldr	r3, [pc, #376]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d116      	bne.n	8001e42 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e14:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_OscConfig+0x14c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e190      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4952      	ldr	r1, [pc, #328]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e40:	e03a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d020      	beq.n	8001e8c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4a:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_RCC_OscConfig+0x2a8>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe ff38 	bl	8000cc4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e58:	f7fe ff34 	bl	8000cc4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e171      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	493f      	ldr	r1, [pc, #252]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
 8001e8a:	e015      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_RCC_OscConfig+0x2a8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7fe ff17 	bl	8000cc4 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7fe ff13 	bl	8000cc4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e150      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d030      	beq.n	8001f26 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d016      	beq.n	8001efa <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fef7 	bl	8000cc4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eda:	f7fe fef3 	bl	8000cc4 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e130      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x1fa>
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe fee0 	bl	8000cc4 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7fe fedc 	bl	8000cc4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e119      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 809f 	beq.w	8002072 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x2a4>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f60:	2301      	movs	r3, #1
 8001f62:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d120      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x2b0>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7c:	f7fe fea2 	bl	8000cc4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	e010      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2c6>
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	42470e80 	.word	0x42470e80
 8001f90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7fe fe96 	bl	8000cc4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0d3      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x478>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2e8>
 8001fba:	4b68      	ldr	r3, [pc, #416]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a67      	ldr	r2, [pc, #412]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc6:	e01c      	b.n	8002002 <HAL_RCC_OscConfig+0x322>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x30a>
 8001fd0:	4b62      	ldr	r3, [pc, #392]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a61      	ldr	r2, [pc, #388]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	4b5f      	ldr	r3, [pc, #380]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a5e      	ldr	r2, [pc, #376]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x322>
 8001fea:	4b5c      	ldr	r3, [pc, #368]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a5b      	ldr	r2, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a58      	ldr	r2, [pc, #352]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d015      	beq.n	8002036 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7fe fe5b 	bl	8000cc4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fe57 	bl	8000cc4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e092      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCC_OscConfig+0x332>
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7fe fe45 	bl	8000cc4 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fe41 	bl	8000cc4 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e07c      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d068      	beq.n	800214c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d060      	beq.n	8002148 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d145      	bne.n	800211a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe fe16 	bl	8000cc4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209c:	f7fe fe12 	bl	8000cc4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e04f      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	019b      	lsls	r3, r3, #6
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	061b      	lsls	r3, r3, #24
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	071b      	lsls	r3, r3, #28
 80020e6:	491d      	ldr	r1, [pc, #116]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fde7 	bl	8000cc4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fa:	f7fe fde3 	bl	8000cc4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e020      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x41a>
 8002118:	e018      	b.n	800214c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x480>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe fdd0 	bl	8000cc4 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe fdcc 	bl	8000cc4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e009      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_RCC_OscConfig+0x47c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x448>
 8002146:	e001      	b.n	800214c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000
 800215c:	40023800 	.word	0x40023800
 8002160:	42470060 	.word	0x42470060

08002164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e01d      	b.n	80021b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f815 	bl	80021ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f000 f968 	bl	8002478 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d007      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d122      	bne.n	8002272 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d11b      	bne.n	8002272 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0202 	mvn.w	r2, #2
 8002242:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f8ee 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 800225e:	e005      	b.n	800226c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8e0 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f8f1 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b04      	cmp	r3, #4
 800227e:	d122      	bne.n	80022c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d11b      	bne.n	80022c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 0204 	mvn.w	r2, #4
 8002296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f8c4 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 80022b2:	e005      	b.n	80022c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f8b6 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8c7 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d122      	bne.n	800231a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d11b      	bne.n	800231a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0208 	mvn.w	r2, #8
 80022ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2204      	movs	r2, #4
 80022f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f89a 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 8002306:	e005      	b.n	8002314 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f88c 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f89d 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b10      	cmp	r3, #16
 8002326:	d122      	bne.n	800236e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b10      	cmp	r3, #16
 8002334:	d11b      	bne.n	800236e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f06f 0210 	mvn.w	r2, #16
 800233e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2208      	movs	r2, #8
 8002344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f870 	bl	800243a <HAL_TIM_IC_CaptureCallback>
 800235a:	e005      	b.n	8002368 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f862 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f873 	bl	800244e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10e      	bne.n	800239a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0201 	mvn.w	r2, #1
 8002392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fe fad3 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d10e      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d107      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f903 	bl	80025cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d10e      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d107      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f838 	bl	8002462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d10e      	bne.n	800241e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b20      	cmp	r3, #32
 800240c:	d107      	bne.n	800241e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0220 	mvn.w	r2, #32
 8002416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f8cd 	bl	80025b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a40      	ldr	r2, [pc, #256]	; (800258c <TIM_Base_SetConfig+0x114>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <TIM_Base_SetConfig+0x40>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002496:	d00f      	beq.n	80024b8 <TIM_Base_SetConfig+0x40>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <TIM_Base_SetConfig+0x118>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00b      	beq.n	80024b8 <TIM_Base_SetConfig+0x40>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <TIM_Base_SetConfig+0x11c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <TIM_Base_SetConfig+0x40>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <TIM_Base_SetConfig+0x120>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d003      	beq.n	80024b8 <TIM_Base_SetConfig+0x40>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3a      	ldr	r2, [pc, #232]	; (800259c <TIM_Base_SetConfig+0x124>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d108      	bne.n	80024ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a2f      	ldr	r2, [pc, #188]	; (800258c <TIM_Base_SetConfig+0x114>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02b      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d8:	d027      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <TIM_Base_SetConfig+0x118>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d023      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a2b      	ldr	r2, [pc, #172]	; (8002594 <TIM_Base_SetConfig+0x11c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <TIM_Base_SetConfig+0x120>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01b      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a29      	ldr	r2, [pc, #164]	; (800259c <TIM_Base_SetConfig+0x124>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d017      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <TIM_Base_SetConfig+0x128>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <TIM_Base_SetConfig+0x12c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00f      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <TIM_Base_SetConfig+0x130>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00b      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0x134>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <TIM_Base_SetConfig+0x138>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <TIM_Base_SetConfig+0x13c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d108      	bne.n	800253c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <TIM_Base_SetConfig+0x114>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d003      	beq.n	8002570 <TIM_Base_SetConfig+0xf8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <TIM_Base_SetConfig+0x124>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d103      	bne.n	8002578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	615a      	str	r2, [r3, #20]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800
 8002598:	40000c00 	.word	0x40000c00
 800259c:	40010400 	.word	0x40010400
 80025a0:	40014000 	.word	0x40014000
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800
 80025ac:	40001800 	.word	0x40001800
 80025b0:	40001c00 	.word	0x40001c00
 80025b4:	40002000 	.word	0x40002000

080025b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e03f      	b.n	8002672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f837 	bl	800267a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fc4b 	bl	8002ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d153      	bne.n	8002752 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_UART_Transmit_DMA+0x26>
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e04c      	b.n	8002754 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_UART_Transmit_DMA+0x38>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e045      	b.n	8002754 <HAL_UART_Transmit_DMA+0xc4>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	88fa      	ldrh	r2, [r7, #6]
 80026da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2221      	movs	r2, #33	; 0x21
 80026ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_UART_Transmit_DMA+0xcc>)
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <HAL_UART_Transmit_DMA+0xd0>)
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_UART_Transmit_DMA+0xd4>)
 8002706:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	2200      	movs	r2, #0
 800270e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3304      	adds	r3, #4
 8002724:	461a      	mov	r2, r3
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	f7fe fc68 	bl	8000ffc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002734:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800274c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	08002acd 	.word	0x08002acd
 8002760:	08002b1f 	.word	0x08002b1f
 8002764:	08002bbf 	.word	0x08002bbf

08002768 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	d166      	bne.n	8002850 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_UART_Receive_DMA+0x26>
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e05f      	b.n	8002852 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_UART_Receive_DMA+0x38>
 800279c:	2302      	movs	r3, #2
 800279e:	e058      	b.n	8002852 <HAL_UART_Receive_DMA+0xea>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	88fa      	ldrh	r2, [r7, #6]
 80027b2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2222      	movs	r2, #34	; 0x22
 80027be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_UART_Receive_DMA+0xf4>)
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_UART_Receive_DMA+0xf8>)
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	4a23      	ldr	r2, [pc, #140]	; (8002864 <HAL_UART_Receive_DMA+0xfc>)
 80027d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	2200      	movs	r2, #0
 80027e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3304      	adds	r3, #4
 80027f2:	4619      	mov	r1, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	f7fe fbff 	bl	8000ffc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800284a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	08002b3b 	.word	0x08002b3b
 8002860:	08002ba3 	.word	0x08002ba3
 8002864:	08002bbf 	.word	0x08002bbf

08002868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_UART_IRQHandler+0x52>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fa83 	bl	8002dbe <UART_Receive_IT>
      return;
 80028b8:	e0d1      	b.n	8002a5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80b0 	beq.w	8002a22 <HAL_UART_IRQHandler+0x1ba>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_UART_IRQHandler+0x70>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80a5 	beq.w	8002a22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_UART_IRQHandler+0x90>
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_UART_IRQHandler+0xb0>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	f043 0202 	orr.w	r2, r3, #2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_UART_IRQHandler+0xd0>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00f      	beq.n	8002962 <HAL_UART_IRQHandler+0xfa>
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <HAL_UART_IRQHandler+0xee>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	f043 0208 	orr.w	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d078      	beq.n	8002a5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_UART_IRQHandler+0x11c>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa1d 	bl	8002dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <HAL_UART_IRQHandler+0x144>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d031      	beq.n	8002a10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f966 	bl	8002c7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d123      	bne.n	8002a08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_UART_IRQHandler+0x1fc>)
 80029de:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fb61 	bl	80010ac <HAL_DMA_Abort_IT>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d016      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029fa:	4610      	mov	r0, r2
 80029fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fe:	e00e      	b.n	8002a1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f859 	bl	8002ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a06:	e00a      	b.n	8002a1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f855 	bl	8002ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0e:	e006      	b.n	8002a1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f851 	bl	8002ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a1c:	e01e      	b.n	8002a5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1e:	bf00      	nop
    return;
 8002a20:	e01c      	b.n	8002a5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1d6>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f953 	bl	8002ce2 <UART_Transmit_IT>
    return;
 8002a3c:	e00f      	b.n	8002a5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1f6>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f99b 	bl	8002d8e <UART_EndTransmit_IT>
    return;
 8002a58:	bf00      	nop
 8002a5a:	e000      	b.n	8002a5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a5c:	bf00      	nop
  }
}
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	08002cbb 	.word	0x08002cbb

08002a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d113      	bne.n	8002b10 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002afc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b0e:	e002      	b.n	8002b16 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff ffa9 	bl	8002a68 <HAL_UART_TxCpltCallback>
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff ffa5 	bl	8002a7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11e      	bne.n	8002b94 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff ff7b 	bl	8002a90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f7ff ff77 	bl	8002aa4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	bf0c      	ite	eq
 8002bde:	2301      	moveq	r3, #1
 8002be0:	2300      	movne	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b21      	cmp	r3, #33	; 0x21
 8002bf0:	d108      	bne.n	8002c04 <UART_DMAError+0x46>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002bfe:	68b8      	ldr	r0, [r7, #8]
 8002c00:	f000 f827 	bl	8002c52 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b22      	cmp	r3, #34	; 0x22
 8002c24:	d108      	bne.n	8002c38 <UART_DMAError+0x7a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002c32:	68b8      	ldr	r0, [r7, #8]
 8002c34:	f000 f823 	bl	8002c7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	f043 0210 	orr.w	r2, r3, #16
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c44:	68b8      	ldr	r0, [r7, #8]
 8002c46:	f7ff ff37 	bl	8002ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c68:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c94:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff feef 	bl	8002ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b21      	cmp	r3, #33	; 0x21
 8002cf4:	d144      	bne.n	8002d80 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfe:	d11a      	bne.n	8002d36 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d14:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	1c9a      	adds	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	621a      	str	r2, [r3, #32]
 8002d28:	e00e      	b.n	8002d48 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	e008      	b.n	8002d48 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	1c59      	adds	r1, r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6211      	str	r1, [r2, #32]
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4619      	mov	r1, r3
 8002d56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fe5a 	bl	8002a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b22      	cmp	r3, #34	; 0x22
 8002dd0:	d171      	bne.n	8002eb6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	d123      	bne.n	8002e24 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10e      	bne.n	8002e08 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
 8002e06:	e029      	b.n	8002e5c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
 8002e22:	e01b      	b.n	8002e5c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6858      	ldr	r0, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6291      	str	r1, [r2, #40]	; 0x28
 8002e3c:	b2c2      	uxtb	r2, r0
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e00c      	b.n	8002e5c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	1c58      	adds	r0, r3, #1
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	6288      	str	r0, [r1, #40]	; 0x28
 8002e54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d120      	bne.n	8002eb2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0220 	bic.w	r2, r2, #32
 8002e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fdf1 	bl	8002a90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e002      	b.n	8002eb8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f02:	f023 030c 	bic.w	r3, r3, #12
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2e:	f040 8199 	bne.w	8003264 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4ac6      	ldr	r2, [pc, #792]	; (8003250 <UART_SetConfig+0x390>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00f      	beq.n	8002f5c <UART_SetConfig+0x9c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4ac4      	ldr	r2, [pc, #784]	; (8003254 <UART_SetConfig+0x394>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00a      	beq.n	8002f5c <UART_SetConfig+0x9c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4ac3      	ldr	r2, [pc, #780]	; (8003258 <UART_SetConfig+0x398>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d005      	beq.n	8002f5c <UART_SetConfig+0x9c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4ac1      	ldr	r2, [pc, #772]	; (800325c <UART_SetConfig+0x39c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	f040 80bd 	bne.w	80030d6 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f5c:	f7fe fe7a 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8002f60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	461d      	mov	r5, r3
 8002f66:	f04f 0600 	mov.w	r6, #0
 8002f6a:	46a8      	mov	r8, r5
 8002f6c:	46b1      	mov	r9, r6
 8002f6e:	eb18 0308 	adds.w	r3, r8, r8
 8002f72:	eb49 0409 	adc.w	r4, r9, r9
 8002f76:	4698      	mov	r8, r3
 8002f78:	46a1      	mov	r9, r4
 8002f7a:	eb18 0805 	adds.w	r8, r8, r5
 8002f7e:	eb49 0906 	adc.w	r9, r9, r6
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f96:	4688      	mov	r8, r1
 8002f98:	4691      	mov	r9, r2
 8002f9a:	eb18 0005 	adds.w	r0, r8, r5
 8002f9e:	eb49 0106 	adc.w	r1, r9, r6
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	f04f 0600 	mov.w	r6, #0
 8002fac:	196b      	adds	r3, r5, r5
 8002fae:	eb46 0406 	adc.w	r4, r6, r6
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f7fd f933 	bl	8000220 <__aeabi_uldivmod>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4ba7      	ldr	r3, [pc, #668]	; (8003260 <UART_SetConfig+0x3a0>)
 8002fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	461d      	mov	r5, r3
 8002fd0:	f04f 0600 	mov.w	r6, #0
 8002fd4:	46a9      	mov	r9, r5
 8002fd6:	46b2      	mov	sl, r6
 8002fd8:	eb19 0309 	adds.w	r3, r9, r9
 8002fdc:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	46a2      	mov	sl, r4
 8002fe4:	eb19 0905 	adds.w	r9, r9, r5
 8002fe8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ffc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003000:	4689      	mov	r9, r1
 8003002:	4692      	mov	sl, r2
 8003004:	eb19 0005 	adds.w	r0, r9, r5
 8003008:	eb4a 0106 	adc.w	r1, sl, r6
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	461d      	mov	r5, r3
 8003012:	f04f 0600 	mov.w	r6, #0
 8003016:	196b      	adds	r3, r5, r5
 8003018:	eb46 0406 	adc.w	r4, r6, r6
 800301c:	461a      	mov	r2, r3
 800301e:	4623      	mov	r3, r4
 8003020:	f7fd f8fe 	bl	8000220 <__aeabi_uldivmod>
 8003024:	4603      	mov	r3, r0
 8003026:	460c      	mov	r4, r1
 8003028:	461a      	mov	r2, r3
 800302a:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <UART_SetConfig+0x3a0>)
 800302c:	fba3 1302 	umull	r1, r3, r3, r2
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	2164      	movs	r1, #100	; 0x64
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	3332      	adds	r3, #50	; 0x32
 800303e:	4a88      	ldr	r2, [pc, #544]	; (8003260 <UART_SetConfig+0x3a0>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800304c:	4498      	add	r8, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	461d      	mov	r5, r3
 8003052:	f04f 0600 	mov.w	r6, #0
 8003056:	46a9      	mov	r9, r5
 8003058:	46b2      	mov	sl, r6
 800305a:	eb19 0309 	adds.w	r3, r9, r9
 800305e:	eb4a 040a 	adc.w	r4, sl, sl
 8003062:	4699      	mov	r9, r3
 8003064:	46a2      	mov	sl, r4
 8003066:	eb19 0905 	adds.w	r9, r9, r5
 800306a:	eb4a 0a06 	adc.w	sl, sl, r6
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800307e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003082:	4689      	mov	r9, r1
 8003084:	4692      	mov	sl, r2
 8003086:	eb19 0005 	adds.w	r0, r9, r5
 800308a:	eb4a 0106 	adc.w	r1, sl, r6
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	461d      	mov	r5, r3
 8003094:	f04f 0600 	mov.w	r6, #0
 8003098:	196b      	adds	r3, r5, r5
 800309a:	eb46 0406 	adc.w	r4, r6, r6
 800309e:	461a      	mov	r2, r3
 80030a0:	4623      	mov	r3, r4
 80030a2:	f7fd f8bd 	bl	8000220 <__aeabi_uldivmod>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <UART_SetConfig+0x3a0>)
 80030ae:	fba3 1302 	umull	r1, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2164      	movs	r1, #100	; 0x64
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	3332      	adds	r3, #50	; 0x32
 80030c0:	4a67      	ldr	r2, [pc, #412]	; (8003260 <UART_SetConfig+0x3a0>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	f003 0207 	and.w	r2, r3, #7
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4442      	add	r2, r8
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	e27d      	b.n	80035d2 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030d6:	f7fe fda9 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 80030da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	461d      	mov	r5, r3
 80030e0:	f04f 0600 	mov.w	r6, #0
 80030e4:	46a8      	mov	r8, r5
 80030e6:	46b1      	mov	r9, r6
 80030e8:	eb18 0308 	adds.w	r3, r8, r8
 80030ec:	eb49 0409 	adc.w	r4, r9, r9
 80030f0:	4698      	mov	r8, r3
 80030f2:	46a1      	mov	r9, r4
 80030f4:	eb18 0805 	adds.w	r8, r8, r5
 80030f8:	eb49 0906 	adc.w	r9, r9, r6
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003108:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800310c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003110:	4688      	mov	r8, r1
 8003112:	4691      	mov	r9, r2
 8003114:	eb18 0005 	adds.w	r0, r8, r5
 8003118:	eb49 0106 	adc.w	r1, r9, r6
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	461d      	mov	r5, r3
 8003122:	f04f 0600 	mov.w	r6, #0
 8003126:	196b      	adds	r3, r5, r5
 8003128:	eb46 0406 	adc.w	r4, r6, r6
 800312c:	461a      	mov	r2, r3
 800312e:	4623      	mov	r3, r4
 8003130:	f7fd f876 	bl	8000220 <__aeabi_uldivmod>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	461a      	mov	r2, r3
 800313a:	4b49      	ldr	r3, [pc, #292]	; (8003260 <UART_SetConfig+0x3a0>)
 800313c:	fba3 2302 	umull	r2, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	461d      	mov	r5, r3
 800314a:	f04f 0600 	mov.w	r6, #0
 800314e:	46a9      	mov	r9, r5
 8003150:	46b2      	mov	sl, r6
 8003152:	eb19 0309 	adds.w	r3, r9, r9
 8003156:	eb4a 040a 	adc.w	r4, sl, sl
 800315a:	4699      	mov	r9, r3
 800315c:	46a2      	mov	sl, r4
 800315e:	eb19 0905 	adds.w	r9, r9, r5
 8003162:	eb4a 0a06 	adc.w	sl, sl, r6
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003172:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003176:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800317a:	4689      	mov	r9, r1
 800317c:	4692      	mov	sl, r2
 800317e:	eb19 0005 	adds.w	r0, r9, r5
 8003182:	eb4a 0106 	adc.w	r1, sl, r6
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	461d      	mov	r5, r3
 800318c:	f04f 0600 	mov.w	r6, #0
 8003190:	196b      	adds	r3, r5, r5
 8003192:	eb46 0406 	adc.w	r4, r6, r6
 8003196:	461a      	mov	r2, r3
 8003198:	4623      	mov	r3, r4
 800319a:	f7fd f841 	bl	8000220 <__aeabi_uldivmod>
 800319e:	4603      	mov	r3, r0
 80031a0:	460c      	mov	r4, r1
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <UART_SetConfig+0x3a0>)
 80031a6:	fba3 1302 	umull	r1, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2164      	movs	r1, #100	; 0x64
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	3332      	adds	r3, #50	; 0x32
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <UART_SetConfig+0x3a0>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031c6:	4498      	add	r8, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	461d      	mov	r5, r3
 80031cc:	f04f 0600 	mov.w	r6, #0
 80031d0:	46a9      	mov	r9, r5
 80031d2:	46b2      	mov	sl, r6
 80031d4:	eb19 0309 	adds.w	r3, r9, r9
 80031d8:	eb4a 040a 	adc.w	r4, sl, sl
 80031dc:	4699      	mov	r9, r3
 80031de:	46a2      	mov	sl, r4
 80031e0:	eb19 0905 	adds.w	r9, r9, r5
 80031e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80031e8:	f04f 0100 	mov.w	r1, #0
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031fc:	4689      	mov	r9, r1
 80031fe:	4692      	mov	sl, r2
 8003200:	eb19 0005 	adds.w	r0, r9, r5
 8003204:	eb4a 0106 	adc.w	r1, sl, r6
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	461d      	mov	r5, r3
 800320e:	f04f 0600 	mov.w	r6, #0
 8003212:	196b      	adds	r3, r5, r5
 8003214:	eb46 0406 	adc.w	r4, r6, r6
 8003218:	461a      	mov	r2, r3
 800321a:	4623      	mov	r3, r4
 800321c:	f7fd f800 	bl	8000220 <__aeabi_uldivmod>
 8003220:	4603      	mov	r3, r0
 8003222:	460c      	mov	r4, r1
 8003224:	461a      	mov	r2, r3
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <UART_SetConfig+0x3a0>)
 8003228:	fba3 1302 	umull	r1, r3, r3, r2
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	2164      	movs	r1, #100	; 0x64
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	3332      	adds	r3, #50	; 0x32
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <UART_SetConfig+0x3a0>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	f003 0207 	and.w	r2, r3, #7
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4442      	add	r2, r8
 800324c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800324e:	e1c0      	b.n	80035d2 <UART_SetConfig+0x712>
 8003250:	40011000 	.word	0x40011000
 8003254:	40011400 	.word	0x40011400
 8003258:	40011800 	.word	0x40011800
 800325c:	40011c00 	.word	0x40011c00
 8003260:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4adc      	ldr	r2, [pc, #880]	; (80035dc <UART_SetConfig+0x71c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00f      	beq.n	800328e <UART_SetConfig+0x3ce>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4adb      	ldr	r2, [pc, #876]	; (80035e0 <UART_SetConfig+0x720>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00a      	beq.n	800328e <UART_SetConfig+0x3ce>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4ad9      	ldr	r2, [pc, #868]	; (80035e4 <UART_SetConfig+0x724>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d005      	beq.n	800328e <UART_SetConfig+0x3ce>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4ad8      	ldr	r2, [pc, #864]	; (80035e8 <UART_SetConfig+0x728>)
 8003288:	4293      	cmp	r3, r2
 800328a:	f040 80d1 	bne.w	8003430 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800328e:	f7fe fce1 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 8003292:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	469a      	mov	sl, r3
 8003298:	f04f 0b00 	mov.w	fp, #0
 800329c:	46d0      	mov	r8, sl
 800329e:	46d9      	mov	r9, fp
 80032a0:	eb18 0308 	adds.w	r3, r8, r8
 80032a4:	eb49 0409 	adc.w	r4, r9, r9
 80032a8:	4698      	mov	r8, r3
 80032aa:	46a1      	mov	r9, r4
 80032ac:	eb18 080a 	adds.w	r8, r8, sl
 80032b0:	eb49 090b 	adc.w	r9, r9, fp
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032c8:	4688      	mov	r8, r1
 80032ca:	4691      	mov	r9, r2
 80032cc:	eb1a 0508 	adds.w	r5, sl, r8
 80032d0:	eb4b 0609 	adc.w	r6, fp, r9
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f04f 0400 	mov.w	r4, #0
 80032e6:	0094      	lsls	r4, r2, #2
 80032e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032ec:	008b      	lsls	r3, r1, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	4623      	mov	r3, r4
 80032f2:	4628      	mov	r0, r5
 80032f4:	4631      	mov	r1, r6
 80032f6:	f7fc ff93 	bl	8000220 <__aeabi_uldivmod>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	461a      	mov	r2, r3
 8003300:	4bba      	ldr	r3, [pc, #744]	; (80035ec <UART_SetConfig+0x72c>)
 8003302:	fba3 2302 	umull	r2, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	469b      	mov	fp, r3
 8003310:	f04f 0c00 	mov.w	ip, #0
 8003314:	46d9      	mov	r9, fp
 8003316:	46e2      	mov	sl, ip
 8003318:	eb19 0309 	adds.w	r3, r9, r9
 800331c:	eb4a 040a 	adc.w	r4, sl, sl
 8003320:	4699      	mov	r9, r3
 8003322:	46a2      	mov	sl, r4
 8003324:	eb19 090b 	adds.w	r9, r9, fp
 8003328:	eb4a 0a0c 	adc.w	sl, sl, ip
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800333c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003340:	4689      	mov	r9, r1
 8003342:	4692      	mov	sl, r2
 8003344:	eb1b 0509 	adds.w	r5, fp, r9
 8003348:	eb4c 060a 	adc.w	r6, ip, sl
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f04f 0400 	mov.w	r4, #0
 800335e:	0094      	lsls	r4, r2, #2
 8003360:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003364:	008b      	lsls	r3, r1, #2
 8003366:	461a      	mov	r2, r3
 8003368:	4623      	mov	r3, r4
 800336a:	4628      	mov	r0, r5
 800336c:	4631      	mov	r1, r6
 800336e:	f7fc ff57 	bl	8000220 <__aeabi_uldivmod>
 8003372:	4603      	mov	r3, r0
 8003374:	460c      	mov	r4, r1
 8003376:	461a      	mov	r2, r3
 8003378:	4b9c      	ldr	r3, [pc, #624]	; (80035ec <UART_SetConfig+0x72c>)
 800337a:	fba3 1302 	umull	r1, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2164      	movs	r1, #100	; 0x64
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	; 0x32
 800338c:	4a97      	ldr	r2, [pc, #604]	; (80035ec <UART_SetConfig+0x72c>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003398:	4498      	add	r8, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	469b      	mov	fp, r3
 800339e:	f04f 0c00 	mov.w	ip, #0
 80033a2:	46d9      	mov	r9, fp
 80033a4:	46e2      	mov	sl, ip
 80033a6:	eb19 0309 	adds.w	r3, r9, r9
 80033aa:	eb4a 040a 	adc.w	r4, sl, sl
 80033ae:	4699      	mov	r9, r3
 80033b0:	46a2      	mov	sl, r4
 80033b2:	eb19 090b 	adds.w	r9, r9, fp
 80033b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033ce:	4689      	mov	r9, r1
 80033d0:	4692      	mov	sl, r2
 80033d2:	eb1b 0509 	adds.w	r5, fp, r9
 80033d6:	eb4c 060a 	adc.w	r6, ip, sl
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4619      	mov	r1, r3
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	0094      	lsls	r4, r2, #2
 80033ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f2:	008b      	lsls	r3, r1, #2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	4628      	mov	r0, r5
 80033fa:	4631      	mov	r1, r6
 80033fc:	f7fc ff10 	bl	8000220 <__aeabi_uldivmod>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	461a      	mov	r2, r3
 8003406:	4b79      	ldr	r3, [pc, #484]	; (80035ec <UART_SetConfig+0x72c>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2164      	movs	r1, #100	; 0x64
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a74      	ldr	r2, [pc, #464]	; (80035ec <UART_SetConfig+0x72c>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4442      	add	r2, r8
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	e0d0      	b.n	80035d2 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7fe fbfc 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8003434:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	469a      	mov	sl, r3
 800343a:	f04f 0b00 	mov.w	fp, #0
 800343e:	46d0      	mov	r8, sl
 8003440:	46d9      	mov	r9, fp
 8003442:	eb18 0308 	adds.w	r3, r8, r8
 8003446:	eb49 0409 	adc.w	r4, r9, r9
 800344a:	4698      	mov	r8, r3
 800344c:	46a1      	mov	r9, r4
 800344e:	eb18 080a 	adds.w	r8, r8, sl
 8003452:	eb49 090b 	adc.w	r9, r9, fp
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003462:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003466:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800346a:	4688      	mov	r8, r1
 800346c:	4691      	mov	r9, r2
 800346e:	eb1a 0508 	adds.w	r5, sl, r8
 8003472:	eb4b 0609 	adc.w	r6, fp, r9
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4619      	mov	r1, r3
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	f04f 0400 	mov.w	r4, #0
 8003488:	0094      	lsls	r4, r2, #2
 800348a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	461a      	mov	r2, r3
 8003492:	4623      	mov	r3, r4
 8003494:	4628      	mov	r0, r5
 8003496:	4631      	mov	r1, r6
 8003498:	f7fc fec2 	bl	8000220 <__aeabi_uldivmod>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b52      	ldr	r3, [pc, #328]	; (80035ec <UART_SetConfig+0x72c>)
 80034a4:	fba3 2302 	umull	r2, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	469b      	mov	fp, r3
 80034b2:	f04f 0c00 	mov.w	ip, #0
 80034b6:	46d9      	mov	r9, fp
 80034b8:	46e2      	mov	sl, ip
 80034ba:	eb19 0309 	adds.w	r3, r9, r9
 80034be:	eb4a 040a 	adc.w	r4, sl, sl
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	eb19 090b 	adds.w	r9, r9, fp
 80034ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e2:	4689      	mov	r9, r1
 80034e4:	4692      	mov	sl, r2
 80034e6:	eb1b 0509 	adds.w	r5, fp, r9
 80034ea:	eb4c 060a 	adc.w	r6, ip, sl
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f04f 0400 	mov.w	r4, #0
 8003500:	0094      	lsls	r4, r2, #2
 8003502:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003506:	008b      	lsls	r3, r1, #2
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	4628      	mov	r0, r5
 800350e:	4631      	mov	r1, r6
 8003510:	f7fc fe86 	bl	8000220 <__aeabi_uldivmod>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	461a      	mov	r2, r3
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <UART_SetConfig+0x72c>)
 800351c:	fba3 1302 	umull	r1, r3, r3, r2
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	2164      	movs	r1, #100	; 0x64
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	3332      	adds	r3, #50	; 0x32
 800352e:	4a2f      	ldr	r2, [pc, #188]	; (80035ec <UART_SetConfig+0x72c>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353a:	4498      	add	r8, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	469b      	mov	fp, r3
 8003540:	f04f 0c00 	mov.w	ip, #0
 8003544:	46d9      	mov	r9, fp
 8003546:	46e2      	mov	sl, ip
 8003548:	eb19 0309 	adds.w	r3, r9, r9
 800354c:	eb4a 040a 	adc.w	r4, sl, sl
 8003550:	4699      	mov	r9, r3
 8003552:	46a2      	mov	sl, r4
 8003554:	eb19 090b 	adds.w	r9, r9, fp
 8003558:	eb4a 0a0c 	adc.w	sl, sl, ip
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003568:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800356c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003570:	4689      	mov	r9, r1
 8003572:	4692      	mov	sl, r2
 8003574:	eb1b 0509 	adds.w	r5, fp, r9
 8003578:	eb4c 060a 	adc.w	r6, ip, sl
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4619      	mov	r1, r3
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	f04f 0400 	mov.w	r4, #0
 800358e:	0094      	lsls	r4, r2, #2
 8003590:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003594:	008b      	lsls	r3, r1, #2
 8003596:	461a      	mov	r2, r3
 8003598:	4623      	mov	r3, r4
 800359a:	4628      	mov	r0, r5
 800359c:	4631      	mov	r1, r6
 800359e:	f7fc fe3f 	bl	8000220 <__aeabi_uldivmod>
 80035a2:	4603      	mov	r3, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <UART_SetConfig+0x72c>)
 80035aa:	fba3 1302 	umull	r1, r3, r3, r2
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2164      	movs	r1, #100	; 0x64
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	3332      	adds	r3, #50	; 0x32
 80035bc:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <UART_SetConfig+0x72c>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4442      	add	r2, r8
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	e7ff      	b.n	80035d2 <UART_SetConfig+0x712>
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035dc:	40011000 	.word	0x40011000
 80035e0:	40011400 	.word	0x40011400
 80035e4:	40011800 	.word	0x40011800
 80035e8:	40011c00 	.word	0x40011c00
 80035ec:	51eb851f 	.word	0x51eb851f

080035f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 0208 	add.w	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f103 0208 	add.w	r2, r3, #8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f103 0208 	add.w	r2, r3, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d103      	bne.n	80036b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e00c      	b.n	80036cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3308      	adds	r3, #8
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e002      	b.n	80036c0 <vListInsert+0x2e>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d2f6      	bcs.n	80036ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6892      	ldr	r2, [r2, #8]
 800371a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6852      	ldr	r2, [r2, #4]
 8003724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d103      	bne.n	8003738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af04      	add	r7, sp, #16
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	e7fe      	b.n	800377e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <xTaskCreateStatic+0x42>
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e7fe      	b.n	8003798 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800379a:	2354      	movs	r3, #84	; 0x54
 800379c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b54      	cmp	r3, #84	; 0x54
 80037a2:	d009      	beq.n	80037b8 <xTaskCreateStatic+0x60>
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e7fe      	b.n	80037b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01e      	beq.n	80037fe <xTaskCreateStatic+0xa6>
 80037c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01b      	beq.n	80037fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037d8:	2300      	movs	r3, #0
 80037da:	9303      	str	r3, [sp, #12]
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	9302      	str	r3, [sp, #8]
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f850 	bl	8003896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037f8:	f000 f8d4 	bl	80039a4 <prvAddNewTaskToReadyList>
 80037fc:	e001      	b.n	8003802 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003802:	697b      	ldr	r3, [r7, #20]
	}
 8003804:	4618      	mov	r0, r3
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	; 0x30
 8003810:	af04      	add	r7, sp, #16
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4618      	mov	r0, r3
 8003822:	f000 feaf 	bl	8004584 <pvPortMalloc>
 8003826:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800382e:	2054      	movs	r0, #84	; 0x54
 8003830:	f000 fea8 	bl	8004584 <pvPortMalloc>
 8003834:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
 8003842:	e005      	b.n	8003850 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f000 ff5f 	bl	8004708 <vPortFree>
 800384a:	e001      	b.n	8003850 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	2300      	movs	r3, #0
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	9302      	str	r3, [sp, #8]
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f80e 	bl	8003896 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800387a:	69f8      	ldr	r0, [r7, #28]
 800387c:	f000 f892 	bl	80039a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003880:	2301      	movs	r3, #1
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e002      	b.n	800388c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800388c:	69bb      	ldr	r3, [r7, #24]
	}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b088      	sub	sp, #32
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038ae:	3b01      	subs	r3, #1
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f023 0307 	bic.w	r3, r3, #7
 80038bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <prvInitialiseNewTask+0x46>
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e7fe      	b.n	80038da <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01f      	beq.n	8003922 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e012      	b.n	800390e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	7819      	ldrb	r1, [r3, #0]
 80038f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	3334      	adds	r3, #52	; 0x34
 80038f8:	460a      	mov	r2, r1
 80038fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b0f      	cmp	r3, #15
 8003912:	d9e9      	bls.n	80038e8 <prvInitialiseNewTask+0x52>
 8003914:	e000      	b.n	8003918 <prvInitialiseNewTask+0x82>
			{
				break;
 8003916:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003920:	e003      	b.n	800392a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	2b06      	cmp	r3, #6
 800392e:	d901      	bls.n	8003934 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003930:	2306      	movs	r3, #6
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	2200      	movs	r2, #0
 8003944:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	3304      	adds	r3, #4
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fe70 	bl	8003630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	3318      	adds	r3, #24
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fe6b 	bl	8003630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	f1c3 0207 	rsb	r2, r3, #7
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	2200      	movs	r2, #0
 8003974:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	68f9      	ldr	r1, [r7, #12]
 8003982:	69b8      	ldr	r0, [r7, #24]
 8003984:	f000 fbfe 	bl	8004184 <pxPortInitialiseStack>
 8003988:	4602      	mov	r2, r0
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800399a:	bf00      	nop
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039ac:	f000 fd0e 	bl	80043cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <prvAddNewTaskToReadyList+0xb8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <prvAddNewTaskToReadyList+0xb8>)
 80039b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ba:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <prvAddNewTaskToReadyList+0xbc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039c2:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <prvAddNewTaskToReadyList+0xbc>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <prvAddNewTaskToReadyList+0xb8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d110      	bne.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039d0:	f000 fab8 	bl	8003f44 <prvInitialiseTaskLists>
 80039d4:	e00d      	b.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <prvAddNewTaskToReadyList+0xc0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <prvAddNewTaskToReadyList+0xbc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d802      	bhi.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039ec:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <prvAddNewTaskToReadyList+0xbc>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <prvAddNewTaskToReadyList+0xc4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3301      	adds	r3, #1
 80039f8:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <prvAddNewTaskToReadyList+0xc4>)
 80039fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	2201      	movs	r2, #1
 8003a02:	409a      	lsls	r2, r3
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <prvAddNewTaskToReadyList+0xc8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <prvAddNewTaskToReadyList+0xc8>)
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <prvAddNewTaskToReadyList+0xcc>)
 8003a1c:	441a      	add	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3304      	adds	r3, #4
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f7ff fe10 	bl	800364a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a2a:	f000 fcfd 	bl	8004428 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <prvAddNewTaskToReadyList+0xc0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <prvAddNewTaskToReadyList+0xbc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d207      	bcs.n	8003a54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <prvAddNewTaskToReadyList+0xd0>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200003a8 	.word	0x200003a8
 8003a60:	200002a8 	.word	0x200002a8
 8003a64:	200003b4 	.word	0x200003b4
 8003a68:	200003c4 	.word	0x200003c4
 8003a6c:	200003b0 	.word	0x200003b0
 8003a70:	200002ac 	.word	0x200002ac
 8003a74:	e000ed04 	.word	0xe000ed04

08003a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d016      	beq.n	8003ab8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <vTaskDelay+0x60>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <vTaskDelay+0x2e>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	e7fe      	b.n	8003aa4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003aa6:	f000 f879 	bl	8003b9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb03 	bl	80040b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ab2:	f000 f881 	bl	8003bb8 <xTaskResumeAll>
 8003ab6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <vTaskDelay+0x64>)
 8003ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200003d0 	.word	0x200003d0
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003aee:	463a      	mov	r2, r7
 8003af0:	1d39      	adds	r1, r7, #4
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fe98 	bl	800082c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	9202      	str	r2, [sp, #8]
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2300      	movs	r3, #0
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	491d      	ldr	r1, [pc, #116]	; (8003b84 <vTaskStartScheduler+0xa4>)
 8003b10:	481d      	ldr	r0, [pc, #116]	; (8003b88 <vTaskStartScheduler+0xa8>)
 8003b12:	f7ff fe21 	bl	8003758 <xTaskCreateStatic>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <vTaskStartScheduler+0xac>)
 8003b1a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <vTaskStartScheduler+0xac>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b24:	2301      	movs	r3, #1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e001      	b.n	8003b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d115      	bne.n	8003b60 <vTaskStartScheduler+0x80>
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <vTaskStartScheduler+0xb0>)
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <vTaskStartScheduler+0xb4>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <vTaskStartScheduler+0xb8>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b5a:	f000 fb99 	bl	8004290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b5e:	e00d      	b.n	8003b7c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d109      	bne.n	8003b7c <vTaskStartScheduler+0x9c>
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e7fe      	b.n	8003b7a <vTaskStartScheduler+0x9a>
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	080049d4 	.word	0x080049d4
 8003b88:	08003f15 	.word	0x08003f15
 8003b8c:	200003cc 	.word	0x200003cc
 8003b90:	200003c8 	.word	0x200003c8
 8003b94:	200003b4 	.word	0x200003b4
 8003b98:	200003ac 	.word	0x200003ac

08003b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <vTaskSuspendAll+0x18>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	4a03      	ldr	r2, [pc, #12]	; (8003bb4 <vTaskSuspendAll+0x18>)
 8003ba8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	200003d0 	.word	0x200003d0

08003bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <xTaskResumeAll+0x114>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <xTaskResumeAll+0x2a>
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	e7fe      	b.n	8003be0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003be2:	f000 fbf3 	bl	80043cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003be6:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <xTaskResumeAll+0x114>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <xTaskResumeAll+0x114>)
 8003bee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf0:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <xTaskResumeAll+0x114>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d161      	bne.n	8003cbc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bf8:	4b35      	ldr	r3, [pc, #212]	; (8003cd0 <xTaskResumeAll+0x118>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05d      	beq.n	8003cbc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c00:	e02e      	b.n	8003c60 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <xTaskResumeAll+0x11c>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fd78 	bl	8003704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fd73 	bl	8003704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	2201      	movs	r2, #1
 8003c24:	409a      	lsls	r2, r3
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <xTaskResumeAll+0x120>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <xTaskResumeAll+0x120>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <xTaskResumeAll+0x124>)
 8003c3e:	441a      	add	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f7ff fcff 	bl	800364a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <xTaskResumeAll+0x128>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003c5a:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <xTaskResumeAll+0x12c>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c60:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <xTaskResumeAll+0x11c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1cc      	bne.n	8003c02 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c6e:	f000 fa03 	bl	8004078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <xTaskResumeAll+0x130>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d010      	beq.n	8003ca0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c7e:	f000 f837 	bl	8003cf0 <xTaskIncrementTick>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <xTaskResumeAll+0x12c>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f1      	bne.n	8003c7e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <xTaskResumeAll+0x130>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <xTaskResumeAll+0x12c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <xTaskResumeAll+0x134>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cbc:	f000 fbb4 	bl	8004428 <vPortExitCritical>

	return xAlreadyYielded;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200003d0 	.word	0x200003d0
 8003cd0:	200003a8 	.word	0x200003a8
 8003cd4:	20000368 	.word	0x20000368
 8003cd8:	200003b0 	.word	0x200003b0
 8003cdc:	200002ac 	.word	0x200002ac
 8003ce0:	200002a8 	.word	0x200002a8
 8003ce4:	200003bc 	.word	0x200003bc
 8003ce8:	200003b8 	.word	0x200003b8
 8003cec:	e000ed04 	.word	0xe000ed04

08003cf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfa:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <xTaskIncrementTick+0x144>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 8087 	bne.w	8003e12 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d04:	4b4c      	ldr	r3, [pc, #304]	; (8003e38 <xTaskIncrementTick+0x148>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d0c:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <xTaskIncrementTick+0x148>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11f      	bne.n	8003d58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d18:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <xTaskIncrementTick+0x14c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <xTaskIncrementTick+0x46>
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	e7fe      	b.n	8003d34 <xTaskIncrementTick+0x44>
 8003d36:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <xTaskIncrementTick+0x14c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	4b40      	ldr	r3, [pc, #256]	; (8003e40 <xTaskIncrementTick+0x150>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3e      	ldr	r2, [pc, #248]	; (8003e3c <xTaskIncrementTick+0x14c>)
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4a3e      	ldr	r2, [pc, #248]	; (8003e40 <xTaskIncrementTick+0x150>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <xTaskIncrementTick+0x154>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <xTaskIncrementTick+0x154>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	f000 f990 	bl	8004078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d58:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <xTaskIncrementTick+0x158>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d348      	bcc.n	8003df4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d62:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <xTaskIncrementTick+0x14c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d104      	bne.n	8003d76 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6c:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <xTaskIncrementTick+0x158>)
 8003d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d72:	601a      	str	r2, [r3, #0]
					break;
 8003d74:	e03e      	b.n	8003df4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <xTaskIncrementTick+0x14c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d203      	bcs.n	8003d96 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d8e:	4a2e      	ldr	r2, [pc, #184]	; (8003e48 <xTaskIncrementTick+0x158>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d94:	e02e      	b.n	8003df4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fcb2 	bl	8003704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	3318      	adds	r3, #24
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fca9 	bl	8003704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	2201      	movs	r2, #1
 8003db8:	409a      	lsls	r2, r3
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <xTaskIncrementTick+0x15c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <xTaskIncrementTick+0x15c>)
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <xTaskIncrementTick+0x160>)
 8003dd2:	441a      	add	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f7ff fc35 	bl	800364a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <xTaskIncrementTick+0x164>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d3b9      	bcc.n	8003d62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df2:	e7b6      	b.n	8003d62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <xTaskIncrementTick+0x164>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4915      	ldr	r1, [pc, #84]	; (8003e50 <xTaskIncrementTick+0x160>)
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d907      	bls.n	8003e1c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e004      	b.n	8003e1c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <xTaskIncrementTick+0x168>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <xTaskIncrementTick+0x168>)
 8003e1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <xTaskIncrementTick+0x16c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e28:	697b      	ldr	r3, [r7, #20]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200003d0 	.word	0x200003d0
 8003e38:	200003ac 	.word	0x200003ac
 8003e3c:	20000360 	.word	0x20000360
 8003e40:	20000364 	.word	0x20000364
 8003e44:	200003c0 	.word	0x200003c0
 8003e48:	200003c8 	.word	0x200003c8
 8003e4c:	200003b0 	.word	0x200003b0
 8003e50:	200002ac 	.word	0x200002ac
 8003e54:	200002a8 	.word	0x200002a8
 8003e58:	200003b8 	.word	0x200003b8
 8003e5c:	200003bc 	.word	0x200003bc

08003e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <vTaskSwitchContext+0xa0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e6e:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <vTaskSwitchContext+0xa4>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e74:	e03e      	b.n	8003ef4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <vTaskSwitchContext+0xa4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <vTaskSwitchContext+0xa8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e8a:	7afb      	ldrb	r3, [r7, #11]
 8003e8c:	f1c3 031f 	rsb	r3, r3, #31
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	491e      	ldr	r1, [pc, #120]	; (8003f0c <vTaskSwitchContext+0xac>)
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <vTaskSwitchContext+0x5a>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e7fe      	b.n	8003eb8 <vTaskSwitchContext+0x58>
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <vTaskSwitchContext+0xac>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3308      	adds	r3, #8
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d104      	bne.n	8003eea <vTaskSwitchContext+0x8a>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <vTaskSwitchContext+0xb0>)
 8003ef2:	6013      	str	r3, [r2, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	200003d0 	.word	0x200003d0
 8003f04:	200003bc 	.word	0x200003bc
 8003f08:	200003b0 	.word	0x200003b0
 8003f0c:	200002ac 	.word	0x200002ac
 8003f10:	200002a8 	.word	0x200002a8

08003f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f1c:	f000 f852 	bl	8003fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <prvIdleTask+0x28>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d9f9      	bls.n	8003f1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <prvIdleTask+0x2c>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f38:	e7f0      	b.n	8003f1c <prvIdleTask+0x8>
 8003f3a:	bf00      	nop
 8003f3c:	200002ac 	.word	0x200002ac
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	e00c      	b.n	8003f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <prvInitialiseTaskLists+0x60>)
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fb46 	bl	80035f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3301      	adds	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b06      	cmp	r3, #6
 8003f6e:	d9ef      	bls.n	8003f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f70:	480d      	ldr	r0, [pc, #52]	; (8003fa8 <prvInitialiseTaskLists+0x64>)
 8003f72:	f7ff fb3d 	bl	80035f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f76:	480d      	ldr	r0, [pc, #52]	; (8003fac <prvInitialiseTaskLists+0x68>)
 8003f78:	f7ff fb3a 	bl	80035f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f7c:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <prvInitialiseTaskLists+0x6c>)
 8003f7e:	f7ff fb37 	bl	80035f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f82:	480c      	ldr	r0, [pc, #48]	; (8003fb4 <prvInitialiseTaskLists+0x70>)
 8003f84:	f7ff fb34 	bl	80035f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f88:	480b      	ldr	r0, [pc, #44]	; (8003fb8 <prvInitialiseTaskLists+0x74>)
 8003f8a:	f7ff fb31 	bl	80035f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <prvInitialiseTaskLists+0x78>)
 8003f90:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <prvInitialiseTaskLists+0x64>)
 8003f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <prvInitialiseTaskLists+0x7c>)
 8003f96:	4a05      	ldr	r2, [pc, #20]	; (8003fac <prvInitialiseTaskLists+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200002ac 	.word	0x200002ac
 8003fa8:	20000338 	.word	0x20000338
 8003fac:	2000034c 	.word	0x2000034c
 8003fb0:	20000368 	.word	0x20000368
 8003fb4:	2000037c 	.word	0x2000037c
 8003fb8:	20000394 	.word	0x20000394
 8003fbc:	20000360 	.word	0x20000360
 8003fc0:	20000364 	.word	0x20000364

08003fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fca:	e019      	b.n	8004000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fcc:	f000 f9fe 	bl	80043cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <prvCheckTasksWaitingTermination+0x4c>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fb91 	bl	8003704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <prvCheckTasksWaitingTermination+0x50>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <prvCheckTasksWaitingTermination+0x50>)
 8003fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <prvCheckTasksWaitingTermination+0x54>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <prvCheckTasksWaitingTermination+0x54>)
 8003ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ff6:	f000 fa17 	bl	8004428 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f80e 	bl	800401c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <prvCheckTasksWaitingTermination+0x54>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e1      	bne.n	8003fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	2000037c 	.word	0x2000037c
 8004014:	200003a8 	.word	0x200003a8
 8004018:	20000390 	.word	0x20000390

0800401c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fb68 	bl	8004708 <vPortFree>
				vPortFree( pxTCB );
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb65 	bl	8004708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800403e:	e017      	b.n	8004070 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004046:	2b01      	cmp	r3, #1
 8004048:	d103      	bne.n	8004052 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fb5c 	bl	8004708 <vPortFree>
	}
 8004050:	e00e      	b.n	8004070 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004058:	2b02      	cmp	r3, #2
 800405a:	d009      	beq.n	8004070 <prvDeleteTCB+0x54>
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e7fe      	b.n	800406e <prvDeleteTCB+0x52>
	}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <prvResetNextTaskUnblockTime+0x38>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <prvResetNextTaskUnblockTime+0x3c>)
 800408a:	f04f 32ff 	mov.w	r2, #4294967295
 800408e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004090:	e008      	b.n	80040a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <prvResetNextTaskUnblockTime+0x38>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <prvResetNextTaskUnblockTime+0x3c>)
 80040a2:	6013      	str	r3, [r2, #0]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20000360 	.word	0x20000360
 80040b4:	200003c8 	.word	0x200003c8

080040b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040c2:	4b29      	ldr	r3, [pc, #164]	; (8004168 <prvAddCurrentTaskToDelayedList+0xb0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040c8:	4b28      	ldr	r3, [pc, #160]	; (800416c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fb18 	bl	8003704 <uxListRemove>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	2201      	movs	r2, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43da      	mvns	r2, r3
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4013      	ands	r3, r2
 80040ee:	4a20      	ldr	r2, [pc, #128]	; (8004170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d10a      	bne.n	8004110 <prvAddCurrentTaskToDelayedList+0x58>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3304      	adds	r3, #4
 8004106:	4619      	mov	r1, r3
 8004108:	481a      	ldr	r0, [pc, #104]	; (8004174 <prvAddCurrentTaskToDelayedList+0xbc>)
 800410a:	f7ff fa9e 	bl	800364a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800410e:	e026      	b.n	800415e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <prvAddCurrentTaskToDelayedList+0xb4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d209      	bcs.n	800413c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <prvAddCurrentTaskToDelayedList+0xc0>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <prvAddCurrentTaskToDelayedList+0xb4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7ff faac 	bl	8003692 <vListInsert>
}
 800413a:	e010      	b.n	800415e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <prvAddCurrentTaskToDelayedList+0xc4>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7ff faa2 	bl	8003692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800414e:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d202      	bcs.n	800415e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <prvAddCurrentTaskToDelayedList+0xc8>)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200003ac 	.word	0x200003ac
 800416c:	200002a8 	.word	0x200002a8
 8004170:	200003b0 	.word	0x200003b0
 8004174:	20000394 	.word	0x20000394
 8004178:	20000364 	.word	0x20000364
 800417c:	20000360 	.word	0x20000360
 8004180:	200003c8 	.word	0x200003c8

08004184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b04      	subs	r3, #4
 8004194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800419c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b04      	subs	r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <pxPortInitialiseStack+0x64>)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3b14      	subs	r3, #20
 80041be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3b04      	subs	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f06f 0202 	mvn.w	r2, #2
 80041d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3b20      	subs	r3, #32
 80041d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	080041ed 	.word	0x080041ed

080041ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <prvTaskExitError+0x50>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d009      	beq.n	8004214 <prvTaskExitError+0x28>
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e7fe      	b.n	8004212 <prvTaskExitError+0x26>
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004226:	bf00      	nop
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0fc      	beq.n	8004228 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000000c 	.word	0x2000000c

08004240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	4770      	bx	lr
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	200002a8 	.word	0x200002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004268:	4808      	ldr	r0, [pc, #32]	; (800428c <prvPortStartFirstTask+0x24>)
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	f380 8808 	msr	MSP, r0
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8814 	msr	CONTROL, r0
 800427a:	b662      	cpsie	i
 800427c:	b661      	cpsie	f
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	df00      	svc	0
 8004288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800428a:	bf00      	nop
 800428c:	e000ed08 	.word	0xe000ed08

08004290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004296:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <xPortStartScheduler+0x118>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a44      	ldr	r2, [pc, #272]	; (80043ac <xPortStartScheduler+0x11c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d109      	bne.n	80042b4 <xPortStartScheduler+0x24>
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e7fe      	b.n	80042b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042b4:	4b3c      	ldr	r3, [pc, #240]	; (80043a8 <xPortStartScheduler+0x118>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a3d      	ldr	r2, [pc, #244]	; (80043b0 <xPortStartScheduler+0x120>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d109      	bne.n	80042d2 <xPortStartScheduler+0x42>
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	e7fe      	b.n	80042d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <xPortStartScheduler+0x124>)
 80042d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <xPortStartScheduler+0x128>)
 80042f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042fa:	4b30      	ldr	r3, [pc, #192]	; (80043bc <xPortStartScheduler+0x12c>)
 80042fc:	2207      	movs	r2, #7
 80042fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004300:	e009      	b.n	8004316 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004302:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <xPortStartScheduler+0x12c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3b01      	subs	r3, #1
 8004308:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <xPortStartScheduler+0x12c>)
 800430a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	b2db      	uxtb	r3, r3
 8004314:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d0ef      	beq.n	8004302 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004322:	4b26      	ldr	r3, [pc, #152]	; (80043bc <xPortStartScheduler+0x12c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f1c3 0307 	rsb	r3, r3, #7
 800432a:	2b04      	cmp	r3, #4
 800432c:	d009      	beq.n	8004342 <xPortStartScheduler+0xb2>
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	e7fe      	b.n	8004340 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004342:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <xPortStartScheduler+0x12c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <xPortStartScheduler+0x12c>)
 800434a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <xPortStartScheduler+0x12c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <xPortStartScheduler+0x12c>)
 8004356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <xPortStartScheduler+0x130>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <xPortStartScheduler+0x130>)
 8004366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800436a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800436c:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <xPortStartScheduler+0x130>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <xPortStartScheduler+0x130>)
 8004372:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004378:	f000 f8d6 	bl	8004528 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <xPortStartScheduler+0x134>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004382:	f000 f8f5 	bl	8004570 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <xPortStartScheduler+0x138>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a0f      	ldr	r2, [pc, #60]	; (80043c8 <xPortStartScheduler+0x138>)
 800438c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004390:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004392:	f7ff ff69 	bl	8004268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004396:	f7ff fd63 	bl	8003e60 <vTaskSwitchContext>
	prvTaskExitError();
 800439a:	f7ff ff27 	bl	80041ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	e000ed00 	.word	0xe000ed00
 80043ac:	410fc271 	.word	0x410fc271
 80043b0:	410fc270 	.word	0x410fc270
 80043b4:	e000e400 	.word	0xe000e400
 80043b8:	200003d4 	.word	0x200003d4
 80043bc:	200003d8 	.word	0x200003d8
 80043c0:	e000ed20 	.word	0xe000ed20
 80043c4:	2000000c 	.word	0x2000000c
 80043c8:	e000ef34 	.word	0xe000ef34

080043cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <vPortEnterCritical+0x54>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <vPortEnterCritical+0x54>)
 80043ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <vPortEnterCritical+0x54>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10e      	bne.n	8004414 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <vPortEnterCritical+0x58>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <vPortEnterCritical+0x48>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	e7fe      	b.n	8004412 <vPortEnterCritical+0x46>
	}
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	2000000c 	.word	0x2000000c
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <vPortExitCritical+0x4c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <vPortExitCritical+0x22>
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e7fe      	b.n	8004448 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <vPortExitCritical+0x4c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <vPortExitCritical+0x4c>)
 8004452:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004454:	4b07      	ldr	r3, [pc, #28]	; (8004474 <vPortExitCritical+0x4c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <vPortExitCritical+0x3e>
 800445c:	2300      	movs	r3, #0
 800445e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	2000000c 	.word	0x2000000c
	...

08004480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004480:	f3ef 8009 	mrs	r0, PSP
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <pxCurrentTCBConst>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f01e 0f10 	tst.w	lr, #16
 8004490:	bf08      	it	eq
 8004492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044a4:	f380 8811 	msr	BASEPRI, r0
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f7ff fcd6 	bl	8003e60 <vTaskSwitchContext>
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f380 8811 	msr	BASEPRI, r0
 80044bc:	bc09      	pop	{r0, r3}
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6808      	ldr	r0, [r1, #0]
 80044c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c6:	f01e 0f10 	tst.w	lr, #16
 80044ca:	bf08      	it	eq
 80044cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044d0:	f380 8809 	msr	PSP, r0
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst>:
 80044e0:	200002a8 	.word	0x200002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004500:	f7ff fbf6 	bl	8003cf0 <xTaskIncrementTick>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <SysTick_Handler+0x3c>)
 800450c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	e000ed04 	.word	0xe000ed04

08004528 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <vPortSetupTimerInterrupt+0x34>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <vPortSetupTimerInterrupt+0x38>)
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <vPortSetupTimerInterrupt+0x3c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <vPortSetupTimerInterrupt+0x40>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	4a09      	ldr	r2, [pc, #36]	; (800456c <vPortSetupTimerInterrupt+0x44>)
 8004546:	3b01      	subs	r3, #1
 8004548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <vPortSetupTimerInterrupt+0x34>)
 800454c:	2207      	movs	r2, #7
 800454e:	601a      	str	r2, [r3, #0]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000e010 	.word	0xe000e010
 8004560:	e000e018 	.word	0xe000e018
 8004564:	20000000 	.word	0x20000000
 8004568:	10624dd3 	.word	0x10624dd3
 800456c:	e000e014 	.word	0xe000e014

08004570 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004570:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004580 <vPortEnableVFP+0x10>
 8004574:	6801      	ldr	r1, [r0, #0]
 8004576:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800457a:	6001      	str	r1, [r0, #0]
 800457c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800457e:	bf00      	nop
 8004580:	e000ed88 	.word	0xe000ed88

08004584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004590:	f7ff fb04 	bl	8003b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004594:	4b57      	ldr	r3, [pc, #348]	; (80046f4 <pvPortMalloc+0x170>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800459c:	f000 f90c 	bl	80047b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045a0:	4b55      	ldr	r3, [pc, #340]	; (80046f8 <pvPortMalloc+0x174>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 808c 	bne.w	80046c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01c      	beq.n	80045ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80045b4:	2208      	movs	r2, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d013      	beq.n	80045ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	3308      	adds	r3, #8
 80045ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <pvPortMalloc+0x6a>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e7fe      	b.n	80045ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d068      	beq.n	80046c6 <pvPortMalloc+0x142>
 80045f4:	4b41      	ldr	r3, [pc, #260]	; (80046fc <pvPortMalloc+0x178>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d863      	bhi.n	80046c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045fe:	4b40      	ldr	r3, [pc, #256]	; (8004700 <pvPortMalloc+0x17c>)
 8004600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004602:	4b3f      	ldr	r3, [pc, #252]	; (8004700 <pvPortMalloc+0x17c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004608:	e004      	b.n	8004614 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d903      	bls.n	8004626 <pvPortMalloc+0xa2>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f1      	bne.n	800460a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004626:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <pvPortMalloc+0x170>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462c:	429a      	cmp	r2, r3
 800462e:	d04a      	beq.n	80046c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2208      	movs	r2, #8
 8004636:	4413      	add	r3, r2
 8004638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	1ad2      	subs	r2, r2, r3
 800464a:	2308      	movs	r3, #8
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	429a      	cmp	r2, r3
 8004650:	d91e      	bls.n	8004690 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <pvPortMalloc+0xf4>
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e7fe      	b.n	8004676 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800468a:	69b8      	ldr	r0, [r7, #24]
 800468c:	f000 f8f6 	bl	800487c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <pvPortMalloc+0x178>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	4a18      	ldr	r2, [pc, #96]	; (80046fc <pvPortMalloc+0x178>)
 800469c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800469e:	4b17      	ldr	r3, [pc, #92]	; (80046fc <pvPortMalloc+0x178>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b18      	ldr	r3, [pc, #96]	; (8004704 <pvPortMalloc+0x180>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d203      	bcs.n	80046b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <pvPortMalloc+0x178>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <pvPortMalloc+0x180>)
 80046b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <pvPortMalloc+0x174>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046c6:	f7ff fa77 	bl	8003bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <pvPortMalloc+0x164>
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e7fe      	b.n	80046e6 <pvPortMalloc+0x162>
	return pvReturn;
 80046e8:	69fb      	ldr	r3, [r7, #28]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3728      	adds	r7, #40	; 0x28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20003fe4 	.word	0x20003fe4
 80046f8:	20003ff0 	.word	0x20003ff0
 80046fc:	20003fe8 	.word	0x20003fe8
 8004700:	20003fdc 	.word	0x20003fdc
 8004704:	20003fec 	.word	0x20003fec

08004708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d046      	beq.n	80047a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800471a:	2308      	movs	r3, #8
 800471c:	425b      	negs	r3, r3
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4413      	add	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <vPortFree+0xa8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <vPortFree+0x42>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e7fe      	b.n	8004748 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <vPortFree+0x5e>
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	e7fe      	b.n	8004764 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <vPortFree+0xa8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d019      	beq.n	80047a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d115      	bne.n	80047a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <vPortFree+0xa8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	43db      	mvns	r3, r3
 8004786:	401a      	ands	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800478c:	f7ff fa06 	bl	8003b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <vPortFree+0xac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4413      	add	r3, r2
 800479a:	4a06      	ldr	r2, [pc, #24]	; (80047b4 <vPortFree+0xac>)
 800479c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800479e:	6938      	ldr	r0, [r7, #16]
 80047a0:	f000 f86c 	bl	800487c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047a4:	f7ff fa08 	bl	8003bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047a8:	bf00      	nop
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20003ff0 	.word	0x20003ff0
 80047b4:	20003fe8 	.word	0x20003fe8

080047b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047be:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047c4:	4b27      	ldr	r3, [pc, #156]	; (8004864 <prvHeapInit+0xac>)
 80047c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3307      	adds	r3, #7
 80047d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <prvHeapInit+0xac>)
 80047e8:	4413      	add	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047f0:	4a1d      	ldr	r2, [pc, #116]	; (8004868 <prvHeapInit+0xb0>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047f6:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <prvHeapInit+0xb0>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4413      	add	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004804:	2208      	movs	r2, #8
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0307 	bic.w	r3, r3, #7
 8004812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a15      	ldr	r2, [pc, #84]	; (800486c <prvHeapInit+0xb4>)
 8004818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <prvHeapInit+0xb4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <prvHeapInit+0xb4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <prvHeapInit+0xb4>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <prvHeapInit+0xb8>)
 8004846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4a09      	ldr	r2, [pc, #36]	; (8004874 <prvHeapInit+0xbc>)
 800484e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <prvHeapInit+0xc0>)
 8004852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004856:	601a      	str	r2, [r3, #0]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	200003dc 	.word	0x200003dc
 8004868:	20003fdc 	.word	0x20003fdc
 800486c:	20003fe4 	.word	0x20003fe4
 8004870:	20003fec 	.word	0x20003fec
 8004874:	20003fe8 	.word	0x20003fe8
 8004878:	20003ff0 	.word	0x20003ff0

0800487c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <prvInsertBlockIntoFreeList+0xac>)
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e002      	b.n	8004890 <prvInsertBlockIntoFreeList+0x14>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d8f7      	bhi.n	800488a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d108      	bne.n	80048be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	441a      	add	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	441a      	add	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d118      	bne.n	8004904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <prvInsertBlockIntoFreeList+0xb0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d00d      	beq.n	80048fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e008      	b.n	800490c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <prvInsertBlockIntoFreeList+0xb0>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e003      	b.n	800490c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d002      	beq.n	800491a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20003fdc 	.word	0x20003fdc
 800492c:	20003fe4 	.word	0x20003fe4

08004930 <__libc_init_array>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4e0d      	ldr	r6, [pc, #52]	; (8004968 <__libc_init_array+0x38>)
 8004934:	4c0d      	ldr	r4, [pc, #52]	; (800496c <__libc_init_array+0x3c>)
 8004936:	1ba4      	subs	r4, r4, r6
 8004938:	10a4      	asrs	r4, r4, #2
 800493a:	2500      	movs	r5, #0
 800493c:	42a5      	cmp	r5, r4
 800493e:	d109      	bne.n	8004954 <__libc_init_array+0x24>
 8004940:	4e0b      	ldr	r6, [pc, #44]	; (8004970 <__libc_init_array+0x40>)
 8004942:	4c0c      	ldr	r4, [pc, #48]	; (8004974 <__libc_init_array+0x44>)
 8004944:	f000 f820 	bl	8004988 <_init>
 8004948:	1ba4      	subs	r4, r4, r6
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	2500      	movs	r5, #0
 800494e:	42a5      	cmp	r5, r4
 8004950:	d105      	bne.n	800495e <__libc_init_array+0x2e>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004958:	4798      	blx	r3
 800495a:	3501      	adds	r5, #1
 800495c:	e7ee      	b.n	800493c <__libc_init_array+0xc>
 800495e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004962:	4798      	blx	r3
 8004964:	3501      	adds	r5, #1
 8004966:	e7f2      	b.n	800494e <__libc_init_array+0x1e>
 8004968:	08004a04 	.word	0x08004a04
 800496c:	08004a04 	.word	0x08004a04
 8004970:	08004a04 	.word	0x08004a04
 8004974:	08004a08 	.word	0x08004a08

08004978 <memset>:
 8004978:	4402      	add	r2, r0
 800497a:	4603      	mov	r3, r0
 800497c:	4293      	cmp	r3, r2
 800497e:	d100      	bne.n	8004982 <memset+0xa>
 8004980:	4770      	bx	lr
 8004982:	f803 1b01 	strb.w	r1, [r3], #1
 8004986:	e7f9      	b.n	800497c <memset+0x4>

08004988 <_init>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr

08004994 <_fini>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr
